
temt6000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010328  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  080104c8  080104c8  000204c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c44  08010c44  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08010c44  08010c44  00020c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c4c  08010c4c  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c4c  08010c4c  00020c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c50  08010c50  00020c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08010c54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000914  20000200  08010e54  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08010e54  00030b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274b3  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050f8  00000000  00000000  000576e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0005c7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001850  00000000  00000000  0005e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd8e  00000000  00000000  0005fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026aee  00000000  00000000  0007d7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4d51  00000000  00000000  000a42ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014903d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082c8  00000000  00000000  00149090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080104b0 	.word	0x080104b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	080104b0 	.word	0x080104b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_ADC1_Init+0x98>)
 8001010:	4a21      	ldr	r2, [pc, #132]	; (8001098 <MX_ADC1_Init+0x9c>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_ADC1_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_ADC1_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_ADC1_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_ADC1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_ADC1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_ADC1_Init+0x98>)
 8001036:	2200      	movs	r2, #0
 8001038:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_ADC1_Init+0x98>)
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <MX_ADC1_Init+0xa0>)
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_ADC1_Init+0x98>)
 8001048:	2201      	movs	r2, #1
 800104a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_ADC1_Init+0x98>)
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_ADC1_Init+0x98>)
 8001056:	2201      	movs	r2, #1
 8001058:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <MX_ADC1_Init+0x98>)
 800105c:	f000 ff54 	bl	8001f08 <HAL_ADC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001066:	f000 fb0f 	bl	8001688 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800106a:	2301      	movs	r3, #1
 800106c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_ADC1_Init+0x98>)
 800107c:	f001 fb52 	bl	8002724 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001086:	f000 faff 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000022c 	.word	0x2000022c
 8001098:	40012000 	.word	0x40012000
 800109c:	0f000001 	.word	0x0f000001

080010a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a32      	ldr	r2, [pc, #200]	; (8001188 <HAL_ADC_MspInit+0xe8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d15e      	bne.n	8001180 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <HAL_ADC_MspInit+0xec>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a30      	ldr	r2, [pc, #192]	; (800118c <HAL_ADC_MspInit+0xec>)
 80010cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_ADC_MspInit+0xec>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_ADC_MspInit+0xec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a29      	ldr	r2, [pc, #164]	; (800118c <HAL_ADC_MspInit+0xec>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_ADC_MspInit+0xec>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010fa:	2302      	movs	r3, #2
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4820      	ldr	r0, [pc, #128]	; (8001190 <HAL_ADC_MspInit+0xf0>)
 800110e:	f002 fc41 	bl	8003994 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 8001114:	4a20      	ldr	r2, [pc, #128]	; (8001198 <HAL_ADC_MspInit+0xf8>)
 8001116:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 800112c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001130:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 8001134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001138:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 800113c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001140:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 8001144:	2200      	movs	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001154:	480f      	ldr	r0, [pc, #60]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 8001156:	f001 ff31 	bl	8002fbc <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001160:	f000 fa92 	bl	8001688 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_ADC_MspInit+0xf4>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2012      	movs	r0, #18
 8001176:	f001 fed1 	bl	8002f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800117a:	2012      	movs	r0, #18
 800117c:	f001 fefa 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40012000 	.word	0x40012000
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000
 8001194:	20000274 	.word	0x20000274
 8001198:	40026410 	.word	0x40026410

0800119c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2038      	movs	r0, #56	; 0x38
 80011c4:	f001 feaa 	bl	8002f1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011c8:	2038      	movs	r0, #56	; 0x38
 80011ca:	f001 fed3 	bl	8002f74 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	4b82      	ldr	r3, [pc, #520]	; (8001400 <MX_GPIO_Init+0x224>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a81      	ldr	r2, [pc, #516]	; (8001400 <MX_GPIO_Init+0x224>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b7f      	ldr	r3, [pc, #508]	; (8001400 <MX_GPIO_Init+0x224>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <MX_GPIO_Init+0x224>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a7a      	ldr	r2, [pc, #488]	; (8001400 <MX_GPIO_Init+0x224>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b78      	ldr	r3, [pc, #480]	; (8001400 <MX_GPIO_Init+0x224>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b74      	ldr	r3, [pc, #464]	; (8001400 <MX_GPIO_Init+0x224>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a73      	ldr	r2, [pc, #460]	; (8001400 <MX_GPIO_Init+0x224>)
 8001234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b71      	ldr	r3, [pc, #452]	; (8001400 <MX_GPIO_Init+0x224>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b6d      	ldr	r3, [pc, #436]	; (8001400 <MX_GPIO_Init+0x224>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a6c      	ldr	r2, [pc, #432]	; (8001400 <MX_GPIO_Init+0x224>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b6a      	ldr	r3, [pc, #424]	; (8001400 <MX_GPIO_Init+0x224>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b66      	ldr	r3, [pc, #408]	; (8001400 <MX_GPIO_Init+0x224>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a65      	ldr	r2, [pc, #404]	; (8001400 <MX_GPIO_Init+0x224>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b63      	ldr	r3, [pc, #396]	; (8001400 <MX_GPIO_Init+0x224>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <MX_GPIO_Init+0x224>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a5e      	ldr	r2, [pc, #376]	; (8001400 <MX_GPIO_Init+0x224>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b5c      	ldr	r3, [pc, #368]	; (8001400 <MX_GPIO_Init+0x224>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2108      	movs	r1, #8
 800129e:	4859      	ldr	r0, [pc, #356]	; (8001404 <MX_GPIO_Init+0x228>)
 80012a0:	f002 fe14 	bl	8003ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2101      	movs	r1, #1
 80012a8:	4857      	ldr	r0, [pc, #348]	; (8001408 <MX_GPIO_Init+0x22c>)
 80012aa:	f002 fe0f 	bl	8003ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012ae:	2200      	movs	r2, #0
 80012b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012b4:	4855      	ldr	r0, [pc, #340]	; (800140c <MX_GPIO_Init+0x230>)
 80012b6:	f002 fe09 	bl	8003ecc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80012ba:	2304      	movs	r3, #4
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	484d      	ldr	r0, [pc, #308]	; (8001404 <MX_GPIO_Init+0x228>)
 80012ce:	f002 fb61 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012d2:	2308      	movs	r3, #8
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4846      	ldr	r0, [pc, #280]	; (8001404 <MX_GPIO_Init+0x228>)
 80012ea:	f002 fb53 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80012ee:	2332      	movs	r3, #50	; 0x32
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4840      	ldr	r0, [pc, #256]	; (8001404 <MX_GPIO_Init+0x228>)
 8001304:	f002 fb46 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001308:	2301      	movs	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	483a      	ldr	r0, [pc, #232]	; (8001408 <MX_GPIO_Init+0x22c>)
 8001320:	f002 fb38 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001324:	2308      	movs	r3, #8
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001334:	2305      	movs	r3, #5
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4832      	ldr	r0, [pc, #200]	; (8001408 <MX_GPIO_Init+0x22c>)
 8001340:	f002 fb28 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001344:	2301      	movs	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001348:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	482d      	ldr	r0, [pc, #180]	; (8001410 <MX_GPIO_Init+0x234>)
 800135a:	f002 fb1b 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800135e:	2310      	movs	r3, #16
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800136e:	2306      	movs	r3, #6
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4825      	ldr	r0, [pc, #148]	; (8001410 <MX_GPIO_Init+0x234>)
 800137a:	f002 fb0b 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800137e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001390:	2305      	movs	r3, #5
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	481e      	ldr	r0, [pc, #120]	; (8001414 <MX_GPIO_Init+0x238>)
 800139c:	f002 fafa 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013a0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80013a4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4814      	ldr	r0, [pc, #80]	; (800140c <MX_GPIO_Init+0x230>)
 80013ba:	f002 faeb 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013be:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d0:	2306      	movs	r3, #6
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <MX_GPIO_Init+0x22c>)
 80013dc:	f002 fada 	bl	8003994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013e0:	2320      	movs	r3, #32
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_GPIO_Init+0x230>)
 80013f4:	f002 face 	bl	8003994 <HAL_GPIO_Init>

}
 80013f8:	bf00      	nop
 80013fa:	3730      	adds	r7, #48	; 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40021000 	.word	0x40021000
 8001408:	40020800 	.word	0x40020800
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400

08001418 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C1_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <MX_I2C1_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C1_Init+0x50>)
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_I2C1_Init+0x58>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_I2C1_Init+0x50>)
 8001436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_I2C1_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_I2C1_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_I2C1_Init+0x50>)
 8001456:	f004 fae7 	bl	8005a28 <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001460:	f000 f912 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200002d4 	.word	0x200002d4
 800146c:	40005400 	.word	0x40005400
 8001470:	000186a0 	.word	0x000186a0

08001474 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_I2C_MspInit+0x84>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d12c      	bne.n	80014f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_I2C_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_I2C_MspInit+0x88>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_I2C_MspInit+0x88>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80014b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b8:	2312      	movs	r3, #18
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c4:	2304      	movs	r3, #4
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	480c      	ldr	r0, [pc, #48]	; (8001500 <HAL_I2C_MspInit+0x8c>)
 80014d0:	f002 fa60 	bl	8003994 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_I2C_MspInit+0x88>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_I2C_MspInit+0x88>)
 80014de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_I2C_MspInit+0x88>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40005400 	.word	0x40005400
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f000 fc67 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f853 	bl	80015b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001512:	f7ff fe63 	bl	80011dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001516:	f7ff ff7f 	bl	8001418 <MX_I2C1_Init>
  MX_SPI1_Init();
 800151a:	f000 f8c5 	bl	80016a8 <MX_SPI1_Init>
  MX_DMA_Init();
 800151e:	f7ff fe3d 	bl	800119c <MX_DMA_Init>
  MX_ADC1_Init();
 8001522:	f7ff fd6b 	bl	8000ffc <MX_ADC1_Init>
  MX_USB_HOST_Init();
 8001526:	f00a f859 	bl	800b5dc <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800152a:	f000 faed 	bl	8001b08 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800152e:	f000 fbb9 	bl	8001ca4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  TEMT6000_Init(&hadc1);
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <main+0x9c>)
 8001534:	f000 fa7e 	bl	8001a34 <TEMT6000_Init>
  /* USER CODE BEGIN WHILE */
  char buffer[40];
  uint8_t size;
  while (1)
  {
	  HAL_GPIO_WritePin(TEMT600_ADC_IN_GPIO_Port, TEMT600_ADC_IN_Pin, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2102      	movs	r1, #2
 800153c:	4819      	ldr	r0, [pc, #100]	; (80015a4 <main+0xa0>)
 800153e:	f002 fcc5 	bl	8003ecc <HAL_GPIO_WritePin>

	  if(TEMT6000_OK == TEMT6000_ReadLight(&TEMT6000_lux))
 8001542:	4819      	ldr	r0, [pc, #100]	; (80015a8 <main+0xa4>)
 8001544:	f000 fa92 	bl	8001a6c <TEMT6000_ReadLight>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d11b      	bne.n	8001586 <main+0x82>
	  {
		  HAL_GPIO_WritePin(TEMT600_ADC_IN_GPIO_Port, TEMT600_ADC_IN_Pin, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2102      	movs	r1, #2
 8001552:	4814      	ldr	r0, [pc, #80]	; (80015a4 <main+0xa0>)
 8001554:	f002 fcba 	bl	8003ecc <HAL_GPIO_WritePin>
		  size = sprintf(buffer, "TEMT6000 Lux: %.2f\n\r\n\r", TEMT6000_lux);
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <main+0xa4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fffb 	bl	8000558 <__aeabi_f2d>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	1d38      	adds	r0, r7, #4
 8001568:	4910      	ldr	r1, [pc, #64]	; (80015ac <main+0xa8>)
 800156a:	f00b fabb 	bl	800cae4 <siprintf>
 800156e:	4603      	mov	r3, r0
 8001570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, size, 100);
 8001574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001578:	b29a      	uxth	r2, r3
 800157a:	1d39      	adds	r1, r7, #4
 800157c:	2364      	movs	r3, #100	; 0x64
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <main+0xac>)
 8001580:	f006 fe76 	bl	8008270 <HAL_UART_Transmit>
 8001584:	e005      	b.n	8001592 <main+0x8e>
	  }
	  else{
		  HAL_UART_Transmit(&huart2, "ERROR TEMT6000", 15, 100);
 8001586:	2364      	movs	r3, #100	; 0x64
 8001588:	220f      	movs	r2, #15
 800158a:	490a      	ldr	r1, [pc, #40]	; (80015b4 <main+0xb0>)
 800158c:	4808      	ldr	r0, [pc, #32]	; (80015b0 <main+0xac>)
 800158e:	f006 fe6f 	bl	8008270 <HAL_UART_Transmit>
//	  if(HAL_UART_Transmit(&huart2, (uint8_t *) "TEST ", 6, 100) == HAL_OK){
//		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
//		  HAL_Delay(100);
//	  };

	  HAL_Delay(200);
 8001592:	20c8      	movs	r0, #200	; 0xc8
 8001594:	f000 fc94 	bl	8001ec0 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001598:	f00a f846 	bl	800b628 <MX_USB_HOST_Process>
	  HAL_GPIO_WritePin(TEMT600_ADC_IN_GPIO_Port, TEMT600_ADC_IN_Pin, 1);
 800159c:	e7cc      	b.n	8001538 <main+0x34>
 800159e:	bf00      	nop
 80015a0:	2000022c 	.word	0x2000022c
 80015a4:	40020000 	.word	0x40020000
 80015a8:	20000328 	.word	0x20000328
 80015ac:	080104c8 	.word	0x080104c8
 80015b0:	200003e0 	.word	0x200003e0
 80015b4:	080104e0 	.word	0x080104e0

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	; 0x50
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	2230      	movs	r2, #48	; 0x30
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f00a fb4a 	bl	800bc60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <SystemClock_Config+0xc8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a26      	ldr	r2, [pc, #152]	; (8001680 <SystemClock_Config+0xc8>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <SystemClock_Config+0xc8>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <SystemClock_Config+0xcc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a20      	ldr	r2, [pc, #128]	; (8001684 <SystemClock_Config+0xcc>)
 8001602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <SystemClock_Config+0xcc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800162c:	2348      	movs	r3, #72	; 0x48
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001634:	2303      	movs	r3, #3
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f004 fbbf 	bl	8005dc0 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001648:	f000 f81e 	bl	8001688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2102      	movs	r1, #2
 8001668:	4618      	mov	r0, r3
 800166a:	f004 fed1 	bl	8006410 <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001674:	f000 f808 	bl	8001688 <Error_Handler>
  }
}
 8001678:	bf00      	nop
 800167a:	3750      	adds	r7, #80	; 0x50
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	e7fe      	b.n	8001690 <Error_Handler+0x8>

08001692 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_SPI1_Init+0x64>)
 80016ae:	4a18      	ldr	r2, [pc, #96]	; (8001710 <MX_SPI1_Init+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_SPI1_Init+0x64>)
 80016b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_SPI1_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_SPI1_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_SPI1_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_SPI1_Init+0x64>)
 80016d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_SPI1_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <MX_SPI1_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_SPI1_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <MX_SPI1_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_SPI1_Init+0x64>)
 80016f4:	220a      	movs	r2, #10
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <MX_SPI1_Init+0x64>)
 80016fa:	f005 f92d 	bl	8006958 <HAL_SPI_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001704:	f7ff ffc0 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000032c 	.word	0x2000032c
 8001710:	40013000 	.word	0x40013000

08001714 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_SPI_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12b      	bne.n	800178e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_SPI_MspInit+0x88>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_SPI_MspInit+0x88>)
 8001740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_SPI_MspInit+0x88>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_SPI_MspInit+0x88>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_SPI_MspInit+0x88>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_SPI_MspInit+0x88>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800176e:	23e0      	movs	r3, #224	; 0xe0
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800177e:	2305      	movs	r3, #5
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <HAL_SPI_MspInit+0x8c>)
 800178a:	f002 f903 	bl	8003994 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40013000 	.word	0x40013000
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_MspInit+0x4c>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_MspInit+0x4c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017e2:	2007      	movs	r0, #7
 80017e4:	f001 fb7a 	bl	8002edc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001840:	f000 fb1e 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <ADC_IRQHandler+0x10>)
 800184e:	f000 fcb9 	bl	80021c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000022c 	.word	0x2000022c

0800185c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <DMA2_Stream0_IRQHandler+0x10>)
 8001862:	f001 fe2d 	bl	80034c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000274 	.word	0x20000274

08001870 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <OTG_FS_IRQHandler+0x10>)
 8001876:	f002 fdd1 	bl	800441c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000800 	.word	0x20000800

08001884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	return 1;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_kill>:

int _kill(int pid, int sig)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800189e:	f00a f9a5 	bl	800bbec <__errno>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2216      	movs	r2, #22
 80018a6:	601a      	str	r2, [r3, #0]
	return -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_exit>:

void _exit (int status)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ffe7 	bl	8001894 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018c6:	e7fe      	b.n	80018c6 <_exit+0x12>

080018c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e00a      	b.n	80018f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018da:	f3af 8000 	nop.w
 80018de:	4601      	mov	r1, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf0      	blt.n	80018da <_read+0x12>
	}

return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e009      	b.n	8001928 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf1      	blt.n	8001914 <_write+0x12>
	}
	return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_close>:

int _close(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
	return -1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001962:	605a      	str	r2, [r3, #4]
	return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_isatty>:

int _isatty(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
	return 1;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
	return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f00a f90a 	bl	800bbec <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	220c      	movs	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20020000 	.word	0x20020000
 8001a04:	00000400 	.word	0x00000400
 8001a08:	2000021c 	.word	0x2000021c
 8001a0c:	20000b18 	.word	0x20000b18

08001a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <SystemInit+0x20>)
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <SystemInit+0x20>)
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <TEMT6000_Init>:
ADC_HandleTypeDef *temt6000_adc;

volatile uint16_t AdcValue[TEMT6000_ADC_SAMPLES];

TEMT6000_STATUS TEMT6000_Init(ADC_HandleTypeDef *hadc)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	temt6000_adc = hadc;
 8001a3c:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <TEMT6000_Init+0x30>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]

	if(HAL_OK == HAL_ADC_Start_DMA(temt6000_adc, (uint32_t*)AdcValue, TEMT6000_ADC_SAMPLES))
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <TEMT6000_Init+0x30>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2208      	movs	r2, #8
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <TEMT6000_Init+0x34>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fd2a 	bl	80024a4 <HAL_ADC_Start_DMA>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <TEMT6000_Init+0x26>
		return TEMT6000_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <TEMT6000_Init+0x28>

	return TEMT6000_ERROR;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000384 	.word	0x20000384
 8001a68:	20000388 	.word	0x20000388

08001a6c <TEMT6000_ReadLight>:

TEMT6000_STATUS TEMT6000_ReadLight(float *Result)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	uint32_t AdcAverage;
	uint8_t i;

	AdcAverage = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]

	if(HAL_OK !=HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcValue, TEMT6000_ADC_SAMPLES))return TEMT6000_ERROR;
 8001a78:	2208      	movs	r2, #8
 8001a7a:	491d      	ldr	r1, [pc, #116]	; (8001af0 <TEMT6000_ReadLight+0x84>)
 8001a7c:	481d      	ldr	r0, [pc, #116]	; (8001af4 <TEMT6000_ReadLight+0x88>)
 8001a7e:	f000 fd11 	bl	80024a4 <HAL_ADC_Start_DMA>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <TEMT6000_ReadLight+0x20>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e02d      	b.n	8001ae8 <TEMT6000_ReadLight+0x7c>


	for(i = 0; i < TEMT6000_ADC_SAMPLES; i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	72fb      	strb	r3, [r7, #11]
 8001a90:	e00b      	b.n	8001aaa <TEMT6000_ReadLight+0x3e>
	{
		AdcAverage += AdcValue[i];
 8001a92:	7afb      	ldrb	r3, [r7, #11]
 8001a94:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <TEMT6000_ReadLight+0x84>)
 8001a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < TEMT6000_ADC_SAMPLES; i++)
 8001aa4:	7afb      	ldrb	r3, [r7, #11]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	72fb      	strb	r3, [r7, #11]
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	2b07      	cmp	r3, #7
 8001aae:	d9f0      	bls.n	8001a92 <TEMT6000_ReadLight+0x26>
	}

	AdcAverage /= TEMT6000_ADC_SAMPLES;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	08db      	lsrs	r3, r3, #3
 8001ab4:	60fb      	str	r3, [r7, #12]

	*Result = ((((float)AdcAverage / (float)TEMT6000_ADC_MAX_VALUE) * (float)TEMT6000_POWER_SUPPLY) / TEMT6000_RESISTOR_OHMS) * 2000000.0;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ac0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001af8 <TEMT6000_ReadLight+0x8c>
 8001ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001afc <TEMT6000_ReadLight+0x90>
 8001acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ad0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001b00 <TEMT6000_ReadLight+0x94>
 8001ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001b04 <TEMT6000_ReadLight+0x98>
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	edc3 7a00 	vstr	s15, [r3]

	return TEMT6000_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000388 	.word	0x20000388
 8001af4:	2000022c 	.word	0x2000022c
 8001af8:	45800000 	.word	0x45800000
 8001afc:	40533333 	.word	0x40533333
 8001b00:	447a0000 	.word	0x447a0000
 8001b04:	49f42400 	.word	0x49f42400

08001b08 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08e      	sub	sp, #56	; 0x38
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	f107 0320 	add.w	r3, r7, #32
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b54:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001b5c:	2280      	movs	r2, #128	; 0x80
 8001b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b60:	4823      	ldr	r0, [pc, #140]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001b62:	f005 f895 	bl	8006c90 <HAL_TIM_Base_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b6c:	f7ff fd8c 	bl	8001688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	481c      	ldr	r0, [pc, #112]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001b7e:	f005 fbc3 	bl	8007308 <HAL_TIM_ConfigClockSource>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b88:	f7ff fd7e 	bl	8001688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b8c:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001b8e:	f005 f945 	bl	8006e1c <HAL_TIM_PWM_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b98:	f7ff fd76 	bl	8001688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ba4:	f107 0320 	add.w	r3, r7, #32
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4811      	ldr	r0, [pc, #68]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001bac:	f006 f9ec 	bl	8007f88 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001bb6:	f7ff fd67 	bl	8001688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bba:	2360      	movs	r3, #96	; 0x60
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4807      	ldr	r0, [pc, #28]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001bd2:	f005 f9f3 	bl	8006fbc <HAL_TIM_PWM_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001bdc:	f7ff fd54 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001be0:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <MX_TIM2_Init+0xe8>)
 8001be2:	f000 f827 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 8001be6:	bf00      	nop
 8001be8:	3738      	adds	r7, #56	; 0x38
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000398 	.word	0x20000398

08001bf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c04:	d10d      	bne.n	8001c22 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_TIM_Base_MspInit+0x3c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_TIM_Base_MspInit+0x3c>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_TIM_Base_MspInit+0x3c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c54:	d11e      	bne.n	8001c94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_TIM_MspPostInit+0x68>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_TIM_MspPostInit+0x68>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_TIM_MspPostInit+0x68>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c84:	2301      	movs	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <HAL_TIM_MspPostInit+0x6c>)
 8001c90:	f001 fe80 	bl	8003994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <MX_USART2_UART_Init+0x50>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cdc:	f006 fa12 	bl	8008104 <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ce6:	f7ff fccf 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200003e0 	.word	0x200003e0
 8001cf4:	40004400 	.word	0x40004400

08001cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_UART_MspInit+0x84>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12b      	bne.n	8001d72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_UART_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d52:	230c      	movs	r3, #12
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <HAL_UART_MspInit+0x8c>)
 8001d6e:	f001 fe11 	bl	8003994 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000

08001d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d8e:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d90:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d94:	e002      	b.n	8001d9c <LoopCopyDataInit>

08001d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9a:	3304      	adds	r3, #4

08001d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da0:	d3f9      	bcc.n	8001d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001da4:	4c0b      	ldr	r4, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da8:	e001      	b.n	8001dae <LoopFillZerobss>

08001daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dac:	3204      	adds	r2, #4

08001dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db0:	d3fb      	bcc.n	8001daa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001db2:	f7ff fe2d 	bl	8001a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db6:	f009 ff1f 	bl	800bbf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dba:	f7ff fba3 	bl	8001504 <main>
  bx  lr    
 8001dbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001dcc:	08010c54 	.word	0x08010c54
  ldr r2, =_sbss
 8001dd0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001dd4:	20000b14 	.word	0x20000b14

08001dd8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <DMA1_Stream0_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_Init+0x40>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_Init+0x40>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_Init+0x40>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f001 f869 	bl	8002edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 f808 	bl	8001e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fcc8 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x54>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_InitTick+0x58>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 f8b0 	bl	8002fa4 <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00e      	b.n	8001e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b0f      	cmp	r3, #15
 8001e52:	d80a      	bhi.n	8001e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e54:	2200      	movs	r2, #0
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f001 f85e 	bl	8002f1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e60:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <HAL_InitTick+0x5c>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000008 	.word	0x20000008
 8001ea4:	20000424 	.word	0x20000424

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000424 	.word	0x20000424

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff ffee 	bl	8001ea8 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_Delay+0x44>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffde 	bl	8001ea8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008

08001f08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e147      	b.n	80021ae <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4aa5      	ldr	r2, [pc, #660]	; (80021b8 <HAL_ADC_Init+0x2b0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d004      	beq.n	8001f32 <HAL_ADC_Init+0x2a>
 8001f28:	f240 1143 	movw	r1, #323	; 0x143
 8001f2c:	48a3      	ldr	r0, [pc, #652]	; (80021bc <HAL_ADC_Init+0x2b4>)
 8001f2e:	f7ff fbb0 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d013      	beq.n	8001f62 <HAL_ADC_Init+0x5a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d00e      	beq.n	8001f62 <HAL_ADC_Init+0x5a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f4c:	d009      	beq.n	8001f62 <HAL_ADC_Init+0x5a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001f56:	d004      	beq.n	8001f62 <HAL_ADC_Init+0x5a>
 8001f58:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001f5c:	4897      	ldr	r0, [pc, #604]	; (80021bc <HAL_ADC_Init+0x2b4>)
 8001f5e:	f7ff fb98 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d013      	beq.n	8001f92 <HAL_ADC_Init+0x8a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f72:	d00e      	beq.n	8001f92 <HAL_ADC_Init+0x8a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f7c:	d009      	beq.n	8001f92 <HAL_ADC_Init+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f86:	d004      	beq.n	8001f92 <HAL_ADC_Init+0x8a>
 8001f88:	f240 1145 	movw	r1, #325	; 0x145
 8001f8c:	488b      	ldr	r0, [pc, #556]	; (80021bc <HAL_ADC_Init+0x2b4>)
 8001f8e:	f7ff fb80 	bl	8001692 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_ADC_Init+0xa4>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d004      	beq.n	8001fac <HAL_ADC_Init+0xa4>
 8001fa2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001fa6:	4885      	ldr	r0, [pc, #532]	; (80021bc <HAL_ADC_Init+0x2b4>)
 8001fa8:	f7ff fb73 	bl	8001692 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7e1b      	ldrb	r3, [r3, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_ADC_Init+0xbe>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7e1b      	ldrb	r3, [r3, #24]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d004      	beq.n	8001fc6 <HAL_ADC_Init+0xbe>
 8001fbc:	f240 1147 	movw	r1, #327	; 0x147
 8001fc0:	487e      	ldr	r0, [pc, #504]	; (80021bc <HAL_ADC_Init+0x2b4>)
 8001fc2:	f7ff fb66 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d054      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd6:	d04f      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fe0:	d04a      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fea:	d045      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ff4:	d040      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001ffe:	d03b      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002008:	d036      	beq.n	8002078 <HAL_ADC_Init+0x170>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002012:	d031      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800201c:	d02c      	beq.n	8002078 <HAL_ADC_Init+0x170>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002026:	d027      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002030:	d022      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800203a:	d01d      	beq.n	8002078 <HAL_ADC_Init+0x170>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002044:	d018      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800204e:	d013      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002058:	d00e      	beq.n	8002078 <HAL_ADC_Init+0x170>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002062:	d009      	beq.n	8002078 <HAL_ADC_Init+0x170>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	4a55      	ldr	r2, [pc, #340]	; (80021c0 <HAL_ADC_Init+0x2b8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_ADC_Init+0x170>
 800206e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002072:	4852      	ldr	r0, [pc, #328]	; (80021bc <HAL_ADC_Init+0x2b4>)
 8002074:	f7ff fb0d 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <HAL_ADC_Init+0x18c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002088:	d004      	beq.n	8002094 <HAL_ADC_Init+0x18c>
 800208a:	f240 1149 	movw	r1, #329	; 0x149
 800208e:	484b      	ldr	r0, [pc, #300]	; (80021bc <HAL_ADC_Init+0x2b4>)
 8002090:	f7ff faff 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_ADC_Init+0x19c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d904      	bls.n	80020ae <HAL_ADC_Init+0x1a6>
 80020a4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80020a8:	4844      	ldr	r0, [pc, #272]	; (80021bc <HAL_ADC_Init+0x2b4>)
 80020aa:	f7ff faf2 	bl	8001692 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d009      	beq.n	80020cc <HAL_ADC_Init+0x1c4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d004      	beq.n	80020cc <HAL_ADC_Init+0x1c4>
 80020c2:	f240 114b 	movw	r1, #331	; 0x14b
 80020c6:	483d      	ldr	r0, [pc, #244]	; (80021bc <HAL_ADC_Init+0x2b4>)
 80020c8:	f7ff fae3 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d00c      	beq.n	80020ee <HAL_ADC_Init+0x1e6>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_ADC_Init+0x1e6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d004      	beq.n	80020ee <HAL_ADC_Init+0x1e6>
 80020e4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80020e8:	4834      	ldr	r0, [pc, #208]	; (80021bc <HAL_ADC_Init+0x2b4>)
 80020ea:	f7ff fad2 	bl	8001692 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <HAL_ADC_Init+0x204>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d004      	beq.n	800210c <HAL_ADC_Init+0x204>
 8002102:	f240 114d 	movw	r1, #333	; 0x14d
 8002106:	482d      	ldr	r0, [pc, #180]	; (80021bc <HAL_ADC_Init+0x2b4>)
 8002108:	f7ff fac3 	bl	8001692 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <HAL_ADC_Init+0x2b8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d017      	beq.n	8002146 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d013      	beq.n	8002146 <HAL_ADC_Init+0x23e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002126:	d00e      	beq.n	8002146 <HAL_ADC_Init+0x23e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002130:	d009      	beq.n	8002146 <HAL_ADC_Init+0x23e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800213a:	d004      	beq.n	8002146 <HAL_ADC_Init+0x23e>
 800213c:	f240 1151 	movw	r1, #337	; 0x151
 8002140:	481e      	ldr	r0, [pc, #120]	; (80021bc <HAL_ADC_Init+0x2b4>)
 8002142:	f7ff faa6 	bl	8001692 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe ffa6 	bl	80010a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	2b00      	cmp	r3, #0
 800216c:	d118      	bne.n	80021a0 <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002176:	f023 0302 	bic.w	r3, r3, #2
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fc44 	bl	8002a10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	f043 0201 	orr.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
 800219e:	e001      	b.n	80021a4 <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40012000 	.word	0x40012000
 80021bc:	080104f0 	.word	0x080104f0
 80021c0:	0f000001 	.word	0x0f000001

080021c4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7e1b      	ldrb	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_ADC_IRQHandler+0x2a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7e1b      	ldrb	r3, [r3, #24]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d004      	beq.n	80021ee <HAL_ADC_IRQHandler+0x2a>
 80021e4:	f240 41b5 	movw	r1, #1205	; 0x4b5
 80021e8:	4860      	ldr	r0, [pc, #384]	; (800236c <HAL_ADC_IRQHandler+0x1a8>)
 80021ea:	f7ff fa52 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_ADC_IRQHandler+0x3a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d904      	bls.n	8002208 <HAL_ADC_IRQHandler+0x44>
 80021fe:	f240 41b6 	movw	r1, #1206	; 0x4b6
 8002202:	485a      	ldr	r0, [pc, #360]	; (800236c <HAL_ADC_IRQHandler+0x1a8>)
 8002204:	f7ff fa45 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d00c      	beq.n	800222a <HAL_ADC_IRQHandler+0x66>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_ADC_IRQHandler+0x66>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d004      	beq.n	800222a <HAL_ADC_IRQHandler+0x66>
 8002220:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8002224:	4851      	ldr	r0, [pc, #324]	; (800236c <HAL_ADC_IRQHandler+0x1a8>)
 8002226:	f7ff fa34 	bl	8001692 <assert_failed>
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b02      	cmp	r3, #2
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b20      	cmp	r3, #32
 800224c:	bf0c      	ite	eq
 800224e:	2301      	moveq	r3, #1
 8002250:	2300      	movne	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d049      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x12c>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d046      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x12c>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <HAL_ADC_IRQHandler+0xb6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d12b      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x11c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d127      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x11c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <HAL_ADC_IRQHandler+0xe8>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d119      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x11c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0220 	bic.w	r2, r2, #32
 80022ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x11c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f9f7 	bl	80026d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f06f 0212 	mvn.w	r2, #18
 80022ee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	bf0c      	ite	eq
 80022fe:	2301      	moveq	r3, #1
 8002300:	2300      	movne	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b80      	cmp	r3, #128	; 0x80
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d05a      	beq.n	80023d8 <HAL_ADC_IRQHandler+0x214>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d057      	beq.n	80023d8 <HAL_ADC_IRQHandler+0x214>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d13c      	bne.n	80023c8 <HAL_ADC_IRQHandler+0x204>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HAL_ADC_IRQHandler+0x1ac>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002366:	2b00      	cmp	r3, #0
 8002368:	d12e      	bne.n	80023c8 <HAL_ADC_IRQHandler+0x204>
 800236a:	e001      	b.n	8002370 <HAL_ADC_IRQHandler+0x1ac>
 800236c:	080104f0 	.word	0x080104f0
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800237a:	2b00      	cmp	r3, #0
 800237c:	d124      	bne.n	80023c8 <HAL_ADC_IRQHandler+0x204>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002388:	2b00      	cmp	r3, #0
 800238a:	d11d      	bne.n	80023c8 <HAL_ADC_IRQHandler+0x204>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d119      	bne.n	80023c8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d105      	bne.n	80023c8 <HAL_ADC_IRQHandler+0x204>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fcad 	bl	8002d28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f06f 020c 	mvn.w	r2, #12
 80023d6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d017      	beq.n	800243a <HAL_ADC_IRQHandler+0x276>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d014      	beq.n	800243a <HAL_ADC_IRQHandler+0x276>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10d      	bne.n	800243a <HAL_ADC_IRQHandler+0x276>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f966 	bl	80026fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0201 	mvn.w	r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b20      	cmp	r3, #32
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800245a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <HAL_ADC_IRQHandler+0x2d6>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d012      	beq.n	800249a <HAL_ADC_IRQHandler+0x2d6>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	f043 0202 	orr.w	r2, r3, #2
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0220 	mvn.w	r2, #32
 8002488:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f940 	bl	8002710 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0220 	mvn.w	r2, #32
 8002498:	601a      	str	r2, [r3, #0]
  }
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop

080024a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	7e1b      	ldrb	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_ADC_Start_DMA+0x2a>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	7e1b      	ldrb	r3, [r3, #24]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d004      	beq.n	80024ce <HAL_ADC_Start_DMA+0x2a>
 80024c4:	f44f 61ab 	mov.w	r1, #1368	; 0x558
 80024c8:	487a      	ldr	r0, [pc, #488]	; (80026b4 <HAL_ADC_Start_DMA+0x210>)
 80024ca:	f7ff f8e2 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d013      	beq.n	80024fe <HAL_ADC_Start_DMA+0x5a>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024de:	d00e      	beq.n	80024fe <HAL_ADC_Start_DMA+0x5a>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e8:	d009      	beq.n	80024fe <HAL_ADC_Start_DMA+0x5a>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80024f2:	d004      	beq.n	80024fe <HAL_ADC_Start_DMA+0x5a>
 80024f4:	f240 5159 	movw	r1, #1369	; 0x559
 80024f8:	486e      	ldr	r0, [pc, #440]	; (80026b4 <HAL_ADC_Start_DMA+0x210>)
 80024fa:	f7ff f8ca 	bl	8001692 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_ADC_Start_DMA+0x68>
 8002508:	2302      	movs	r3, #2
 800250a:	e0ce      	b.n	80026aa <HAL_ADC_Start_DMA+0x206>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d018      	beq.n	8002554 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002532:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <HAL_ADC_Start_DMA+0x214>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a61      	ldr	r2, [pc, #388]	; (80026bc <HAL_ADC_Start_DMA+0x218>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	0c9a      	lsrs	r2, r3, #18
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002546:	e002      	b.n	800254e <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	3b01      	subs	r3, #1
 800254c:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f9      	bne.n	8002548 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002562:	d107      	bne.n	8002574 <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002572:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	f040 8086 	bne.w	8002690 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c2:	d106      	bne.n	80025d2 <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	f023 0206 	bic.w	r2, r3, #6
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44
 80025d0:	e002      	b.n	80025d8 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e0:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <HAL_ADC_Start_DMA+0x21c>)
 80025e2:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	4a36      	ldr	r2, [pc, #216]	; (80026c4 <HAL_ADC_Start_DMA+0x220>)
 80025ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	4a35      	ldr	r2, [pc, #212]	; (80026c8 <HAL_ADC_Start_DMA+0x224>)
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	4a34      	ldr	r2, [pc, #208]	; (80026cc <HAL_ADC_Start_DMA+0x228>)
 80025fa:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002604:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002614:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002624:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	334c      	adds	r3, #76	; 0x4c
 8002630:	4619      	mov	r1, r3
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f000 fedd 	bl	80033f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d129      	bne.n	80026a8 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	e020      	b.n	80026a8 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_ADC_Start_DMA+0x22c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d11b      	bne.n	80026a8 <HAL_ADC_Start_DMA+0x204>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d114      	bne.n	80026a8 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	e00b      	b.n	80026a8 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f043 0210 	orr.w	r2, r3, #16
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	080104f0 	.word	0x080104f0
 80026b8:	20000000 	.word	0x20000000
 80026bc:	431bde83 	.word	0x431bde83
 80026c0:	40012300 	.word	0x40012300
 80026c4:	08002c25 	.word	0x08002c25
 80026c8:	08002cdf 	.word	0x08002cdf
 80026cc:	08002cfb 	.word	0x08002cfb
 80026d0:	40012000 	.word	0x40012000

080026d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b12      	cmp	r3, #18
 8002738:	d909      	bls.n	800274e <HAL_ADC_ConfigChannel+0x2a>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a72      	ldr	r2, [pc, #456]	; (8002908 <HAL_ADC_ConfigChannel+0x1e4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d004      	beq.n	800274e <HAL_ADC_ConfigChannel+0x2a>
 8002744:	f240 6189 	movw	r1, #1673	; 0x689
 8002748:	4870      	ldr	r0, [pc, #448]	; (800290c <HAL_ADC_ConfigChannel+0x1e8>)
 800274a:	f7fe ffa2 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_ADC_ConfigChannel+0x3a>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b10      	cmp	r3, #16
 800275c:	d904      	bls.n	8002768 <HAL_ADC_ConfigChannel+0x44>
 800275e:	f240 618a 	movw	r1, #1674	; 0x68a
 8002762:	486a      	ldr	r0, [pc, #424]	; (800290c <HAL_ADC_ConfigChannel+0x1e8>)
 8002764:	f7fe ff95 	bl	8001692 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x8e>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d01c      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x8e>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d018      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x8e>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d014      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x8e>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d010      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x8e>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b05      	cmp	r3, #5
 8002796:	d00c      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x8e>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b06      	cmp	r3, #6
 800279e:	d008      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x8e>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b07      	cmp	r3, #7
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x8e>
 80027a8:	f240 618b 	movw	r1, #1675	; 0x68b
 80027ac:	4857      	ldr	r0, [pc, #348]	; (800290c <HAL_ADC_ConfigChannel+0x1e8>)
 80027ae:	f7fe ff70 	bl	8001692 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x9c>
 80027bc:	2302      	movs	r3, #2
 80027be:	e118      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x2ce>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	d925      	bls.n	800281c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68d9      	ldr	r1, [r3, #12]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	3b1e      	subs	r3, #30
 80027e6:	2207      	movs	r2, #7
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43da      	mvns	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	400a      	ands	r2, r1
 80027f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68d9      	ldr	r1, [r3, #12]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	4603      	mov	r3, r0
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4403      	add	r3, r0
 800280e:	3b1e      	subs	r3, #30
 8002810:	409a      	lsls	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	e022      	b.n	8002862 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6919      	ldr	r1, [r3, #16]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	2207      	movs	r2, #7
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	400a      	ands	r2, r1
 800283e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	4603      	mov	r3, r0
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4403      	add	r3, r0
 8002858:	409a      	lsls	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b06      	cmp	r3, #6
 8002868:	d824      	bhi.n	80028b4 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	3b05      	subs	r3, #5
 800287c:	221f      	movs	r2, #31
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	400a      	ands	r2, r1
 800288a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b05      	subs	r3, #5
 80028a6:	fa00 f203 	lsl.w	r2, r0, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
 80028b2:	e051      	b.n	8002958 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d829      	bhi.n	8002910 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	3b23      	subs	r3, #35	; 0x23
 80028ce:	221f      	movs	r2, #31
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43da      	mvns	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	400a      	ands	r2, r1
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	3b23      	subs	r3, #35	; 0x23
 80028f8:	fa00 f203 	lsl.w	r2, r0, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
 8002904:	e028      	b.n	8002958 <HAL_ADC_ConfigChannel+0x234>
 8002906:	bf00      	nop
 8002908:	10000012 	.word	0x10000012
 800290c:	080104f0 	.word	0x080104f0
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	3b41      	subs	r3, #65	; 0x41
 8002922:	221f      	movs	r2, #31
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43da      	mvns	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	400a      	ands	r2, r1
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3b41      	subs	r3, #65	; 0x41
 800294c:	fa00 f203 	lsl.w	r2, r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_ADC_ConfigChannel+0x2d8>)
 800295a:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <HAL_ADC_ConfigChannel+0x2dc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10f      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x262>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b12      	cmp	r3, #18
 800296c:	d10b      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <HAL_ADC_ConfigChannel+0x2dc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d12b      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x2c4>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_ADC_ConfigChannel+0x2e0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d003      	beq.n	80029a2 <HAL_ADC_ConfigChannel+0x27e>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b11      	cmp	r3, #17
 80029a0:	d122      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <HAL_ADC_ConfigChannel+0x2e0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d111      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029c4:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_ADC_ConfigChannel+0x2e4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <HAL_ADC_ConfigChannel+0x2e8>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0c9a      	lsrs	r2, r3, #18
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029da:	e002      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	3b01      	subs	r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f9      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40012300 	.word	0x40012300
 8002a00:	40012000 	.word	0x40012000
 8002a04:	10000012 	.word	0x10000012
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	431bde83 	.word	0x431bde83

08002a10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a18:	4b7f      	ldr	r3, [pc, #508]	; (8002c18 <ADC_Init+0x208>)
 8002a1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	021a      	lsls	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	4a5e      	ldr	r2, [pc, #376]	; (8002c1c <ADC_Init+0x20c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d022      	beq.n	8002aee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ab6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6899      	ldr	r1, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6899      	ldr	r1, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	e00f      	b.n	8002b0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0202 	bic.w	r2, r2, #2
 8002b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	7e1b      	ldrb	r3, [r3, #24]
 8002b28:	005a      	lsls	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d028      	beq.n	8002b8e <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <ADC_Init+0x13c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d904      	bls.n	8002b56 <ADC_Init+0x146>
 8002b4c:	f240 71a6 	movw	r1, #1958	; 0x7a6
 8002b50:	4833      	ldr	r0, [pc, #204]	; (8002c20 <ADC_Init+0x210>)
 8002b52:	f7fe fd9e 	bl	8001692 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b64:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b74:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	3b01      	subs	r3, #1
 8002b82:	035a      	lsls	r2, r3, #13
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	e007      	b.n	8002b9e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	051a      	lsls	r2, r3, #20
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6899      	ldr	r1, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002be0:	025a      	lsls	r2, r3, #9
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	029a      	lsls	r2, r3, #10
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40012300 	.word	0x40012300
 8002c1c:	0f000001 	.word	0x0f000001
 8002c20:	080104f0 	.word	0x080104f0

08002c24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d13c      	bne.n	8002cb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d12b      	bne.n	8002cb0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d127      	bne.n	8002cb0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d119      	bne.n	8002cb0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0220 	bic.w	r2, r2, #32
 8002c8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f7ff fd0f 	bl	80026d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cb6:	e00e      	b.n	8002cd6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7ff fd23 	bl	8002710 <HAL_ADC_ErrorCallback>
}
 8002cca:	e004      	b.n	8002cd6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f7ff fcfb 	bl	80026e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f043 0204 	orr.w	r2, r3, #4
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f7ff fcf8 	bl	8002710 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4907      	ldr	r1, [pc, #28]	; (8002dd8 <__NVIC_EnableIRQ+0x38>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	db0a      	blt.n	8002e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	490c      	ldr	r1, [pc, #48]	; (8002e28 <__NVIC_SetPriority+0x4c>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e04:	e00a      	b.n	8002e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4908      	ldr	r1, [pc, #32]	; (8002e2c <__NVIC_SetPriority+0x50>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	3b04      	subs	r3, #4
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	440b      	add	r3, r1
 8002e1a:	761a      	strb	r2, [r3, #24]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000e100 	.word	0xe000e100
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f1c3 0307 	rsb	r3, r3, #7
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	bf28      	it	cs
 8002e4e:	2304      	movcs	r3, #4
 8002e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d902      	bls.n	8002e60 <NVIC_EncodePriority+0x30>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3b03      	subs	r3, #3
 8002e5e:	e000      	b.n	8002e62 <NVIC_EncodePriority+0x32>
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	401a      	ands	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e78:	f04f 31ff 	mov.w	r1, #4294967295
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	4313      	orrs	r3, r2
         );
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea8:	d301      	bcc.n	8002eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00f      	b.n	8002ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <SysTick_Config+0x40>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	f7ff ff8e 	bl	8002ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000e010 	.word	0xe000e010

08002edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b07      	cmp	r3, #7
 8002ee8:	d00f      	beq.n	8002f0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b06      	cmp	r3, #6
 8002eee:	d00c      	beq.n	8002f0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d009      	beq.n	8002f0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d006      	beq.n	8002f0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d003      	beq.n	8002f0a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f02:	2192      	movs	r1, #146	; 0x92
 8002f04:	4804      	ldr	r0, [pc, #16]	; (8002f18 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002f06:	f7fe fbc4 	bl	8001692 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff16 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	08010528 	.word	0x08010528

08002f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d903      	bls.n	8002f3c <HAL_NVIC_SetPriority+0x20>
 8002f34:	21aa      	movs	r1, #170	; 0xaa
 8002f36:	480e      	ldr	r0, [pc, #56]	; (8002f70 <HAL_NVIC_SetPriority+0x54>)
 8002f38:	f7fe fbab 	bl	8001692 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b0f      	cmp	r3, #15
 8002f40:	d903      	bls.n	8002f4a <HAL_NVIC_SetPriority+0x2e>
 8002f42:	21ab      	movs	r1, #171	; 0xab
 8002f44:	480a      	ldr	r0, [pc, #40]	; (8002f70 <HAL_NVIC_SetPriority+0x54>)
 8002f46:	f7fe fba4 	bl	8001692 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f4a:	f7ff ff1b 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002f4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	6978      	ldr	r0, [r7, #20]
 8002f56:	f7ff ff6b 	bl	8002e30 <NVIC_EncodePriority>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff ff3a 	bl	8002ddc <__NVIC_SetPriority>
}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	08010528 	.word	0x08010528

08002f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	da03      	bge.n	8002f8e <HAL_NVIC_EnableIRQ+0x1a>
 8002f86:	21be      	movs	r1, #190	; 0xbe
 8002f88:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <HAL_NVIC_EnableIRQ+0x2c>)
 8002f8a:	f7fe fb82 	bl	8001692 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff04 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	08010528 	.word	0x08010528

08002fa4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ff73 	bl	8002e98 <SysTick_Config>
 8002fb2:	4603      	mov	r3, r0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7fe ff6e 	bl	8001ea8 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e204      	b.n	80033e2 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a97      	ldr	r2, [pc, #604]	; (800323c <HAL_DMA_Init+0x280>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d04e      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a96      	ldr	r2, [pc, #600]	; (8003240 <HAL_DMA_Init+0x284>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d049      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a94      	ldr	r2, [pc, #592]	; (8003244 <HAL_DMA_Init+0x288>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d044      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a93      	ldr	r2, [pc, #588]	; (8003248 <HAL_DMA_Init+0x28c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d03f      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a91      	ldr	r2, [pc, #580]	; (800324c <HAL_DMA_Init+0x290>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d03a      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a90      	ldr	r2, [pc, #576]	; (8003250 <HAL_DMA_Init+0x294>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d035      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a8e      	ldr	r2, [pc, #568]	; (8003254 <HAL_DMA_Init+0x298>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d030      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a8d      	ldr	r2, [pc, #564]	; (8003258 <HAL_DMA_Init+0x29c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d02b      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a8b      	ldr	r2, [pc, #556]	; (800325c <HAL_DMA_Init+0x2a0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d026      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a8a      	ldr	r2, [pc, #552]	; (8003260 <HAL_DMA_Init+0x2a4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d021      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a88      	ldr	r2, [pc, #544]	; (8003264 <HAL_DMA_Init+0x2a8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01c      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a87      	ldr	r2, [pc, #540]	; (8003268 <HAL_DMA_Init+0x2ac>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d017      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a85      	ldr	r2, [pc, #532]	; (800326c <HAL_DMA_Init+0x2b0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d012      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a84      	ldr	r2, [pc, #528]	; (8003270 <HAL_DMA_Init+0x2b4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00d      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a82      	ldr	r2, [pc, #520]	; (8003274 <HAL_DMA_Init+0x2b8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d008      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a81      	ldr	r2, [pc, #516]	; (8003278 <HAL_DMA_Init+0x2bc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <HAL_DMA_Init+0xc4>
 8003078:	21b8      	movs	r1, #184	; 0xb8
 800307a:	4880      	ldr	r0, [pc, #512]	; (800327c <HAL_DMA_Init+0x2c0>)
 800307c:	f7fe fb09 	bl	8001692 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d026      	beq.n	80030d6 <HAL_DMA_Init+0x11a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003090:	d021      	beq.n	80030d6 <HAL_DMA_Init+0x11a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800309a:	d01c      	beq.n	80030d6 <HAL_DMA_Init+0x11a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80030a4:	d017      	beq.n	80030d6 <HAL_DMA_Init+0x11a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ae:	d012      	beq.n	80030d6 <HAL_DMA_Init+0x11a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80030b8:	d00d      	beq.n	80030d6 <HAL_DMA_Init+0x11a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80030c2:	d008      	beq.n	80030d6 <HAL_DMA_Init+0x11a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80030cc:	d003      	beq.n	80030d6 <HAL_DMA_Init+0x11a>
 80030ce:	21b9      	movs	r1, #185	; 0xb9
 80030d0:	486a      	ldr	r0, [pc, #424]	; (800327c <HAL_DMA_Init+0x2c0>)
 80030d2:	f7fe fade 	bl	8001692 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <HAL_DMA_Init+0x13a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d007      	beq.n	80030f6 <HAL_DMA_Init+0x13a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b80      	cmp	r3, #128	; 0x80
 80030ec:	d003      	beq.n	80030f6 <HAL_DMA_Init+0x13a>
 80030ee:	21ba      	movs	r1, #186	; 0xba
 80030f0:	4862      	ldr	r0, [pc, #392]	; (800327c <HAL_DMA_Init+0x2c0>)
 80030f2:	f7fe face 	bl	8001692 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030fe:	d007      	beq.n	8003110 <HAL_DMA_Init+0x154>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_DMA_Init+0x154>
 8003108:	21bb      	movs	r1, #187	; 0xbb
 800310a:	485c      	ldr	r0, [pc, #368]	; (800327c <HAL_DMA_Init+0x2c0>)
 800310c:	f7fe fac1 	bl	8001692 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003118:	d007      	beq.n	800312a <HAL_DMA_Init+0x16e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_DMA_Init+0x16e>
 8003122:	21bc      	movs	r1, #188	; 0xbc
 8003124:	4855      	ldr	r0, [pc, #340]	; (800327c <HAL_DMA_Init+0x2c0>)
 8003126:	f7fe fab4 	bl	8001692 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <HAL_DMA_Init+0x192>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800313a:	d008      	beq.n	800314e <HAL_DMA_Init+0x192>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003144:	d003      	beq.n	800314e <HAL_DMA_Init+0x192>
 8003146:	21bd      	movs	r1, #189	; 0xbd
 8003148:	484c      	ldr	r0, [pc, #304]	; (800327c <HAL_DMA_Init+0x2c0>)
 800314a:	f7fe faa2 	bl	8001692 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_DMA_Init+0x1b6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315e:	d008      	beq.n	8003172 <HAL_DMA_Init+0x1b6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003168:	d003      	beq.n	8003172 <HAL_DMA_Init+0x1b6>
 800316a:	21be      	movs	r1, #190	; 0xbe
 800316c:	4843      	ldr	r0, [pc, #268]	; (800327c <HAL_DMA_Init+0x2c0>)
 800316e:	f7fe fa90 	bl	8001692 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_DMA_Init+0x1d8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003182:	d007      	beq.n	8003194 <HAL_DMA_Init+0x1d8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	2b20      	cmp	r3, #32
 800318a:	d003      	beq.n	8003194 <HAL_DMA_Init+0x1d8>
 800318c:	21bf      	movs	r1, #191	; 0xbf
 800318e:	483b      	ldr	r0, [pc, #236]	; (800327c <HAL_DMA_Init+0x2c0>)
 8003190:	f7fe fa7f 	bl	8001692 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <HAL_DMA_Init+0x206>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a4:	d00d      	beq.n	80031c2 <HAL_DMA_Init+0x206>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ae:	d008      	beq.n	80031c2 <HAL_DMA_Init+0x206>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031b8:	d003      	beq.n	80031c2 <HAL_DMA_Init+0x206>
 80031ba:	21c0      	movs	r1, #192	; 0xc0
 80031bc:	482f      	ldr	r0, [pc, #188]	; (800327c <HAL_DMA_Init+0x2c0>)
 80031be:	f7fe fa68 	bl	8001692 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <HAL_DMA_Init+0x21e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d003      	beq.n	80031da <HAL_DMA_Init+0x21e>
 80031d2:	21c1      	movs	r1, #193	; 0xc1
 80031d4:	4829      	ldr	r0, [pc, #164]	; (800327c <HAL_DMA_Init+0x2c0>)
 80031d6:	f7fe fa5c 	bl	8001692 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d065      	beq.n	80032ae <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00f      	beq.n	800320a <HAL_DMA_Init+0x24e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d00b      	beq.n	800320a <HAL_DMA_Init+0x24e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d007      	beq.n	800320a <HAL_DMA_Init+0x24e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d003      	beq.n	800320a <HAL_DMA_Init+0x24e>
 8003202:	21c6      	movs	r1, #198	; 0xc6
 8003204:	481d      	ldr	r0, [pc, #116]	; (800327c <HAL_DMA_Init+0x2c0>)
 8003206:	f7fe fa44 	bl	8001692 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d036      	beq.n	8003280 <HAL_DMA_Init+0x2c4>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800321a:	d031      	beq.n	8003280 <HAL_DMA_Init+0x2c4>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003224:	d02c      	beq.n	8003280 <HAL_DMA_Init+0x2c4>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800322e:	d027      	beq.n	8003280 <HAL_DMA_Init+0x2c4>
 8003230:	21c7      	movs	r1, #199	; 0xc7
 8003232:	4812      	ldr	r0, [pc, #72]	; (800327c <HAL_DMA_Init+0x2c0>)
 8003234:	f7fe fa2d 	bl	8001692 <assert_failed>
 8003238:	e022      	b.n	8003280 <HAL_DMA_Init+0x2c4>
 800323a:	bf00      	nop
 800323c:	40026010 	.word	0x40026010
 8003240:	40026028 	.word	0x40026028
 8003244:	40026040 	.word	0x40026040
 8003248:	40026058 	.word	0x40026058
 800324c:	40026070 	.word	0x40026070
 8003250:	40026088 	.word	0x40026088
 8003254:	400260a0 	.word	0x400260a0
 8003258:	400260b8 	.word	0x400260b8
 800325c:	40026410 	.word	0x40026410
 8003260:	40026428 	.word	0x40026428
 8003264:	40026440 	.word	0x40026440
 8003268:	40026458 	.word	0x40026458
 800326c:	40026470 	.word	0x40026470
 8003270:	40026488 	.word	0x40026488
 8003274:	400264a0 	.word	0x400264a0
 8003278:	400264b8 	.word	0x400264b8
 800327c:	08010564 	.word	0x08010564
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_DMA_Init+0x2f2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003290:	d00d      	beq.n	80032ae <HAL_DMA_Init+0x2f2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329a:	d008      	beq.n	80032ae <HAL_DMA_Init+0x2f2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032a4:	d003      	beq.n	80032ae <HAL_DMA_Init+0x2f2>
 80032a6:	21c8      	movs	r1, #200	; 0xc8
 80032a8:	4850      	ldr	r0, [pc, #320]	; (80033ec <HAL_DMA_Init+0x430>)
 80032aa:	f7fe f9f2 	bl	8001692 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ce:	e00f      	b.n	80032f0 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d0:	f7fe fdea 	bl	8001ea8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d908      	bls.n	80032f0 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2203      	movs	r2, #3
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e078      	b.n	80033e2 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e8      	bne.n	80032d0 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <HAL_DMA_Init+0x434>)
 800330a:	4013      	ands	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003328:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003334:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b04      	cmp	r3, #4
 8003348:	d107      	bne.n	800335a <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4313      	orrs	r3, r2
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 0307 	bic.w	r3, r3, #7
 8003370:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2b04      	cmp	r3, #4
 8003382:	d117      	bne.n	80033b4 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00e      	beq.n	80033b4 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fa80 	bl	800389c <DMA_CheckFifoParam>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2240      	movs	r2, #64	; 0x40
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033b0:	2301      	movs	r3, #1
 80033b2:	e016      	b.n	80033e2 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fa37 	bl	8003830 <DMA_CalcBaseAndBitshift>
 80033c2:	4603      	mov	r3, r0
 80033c4:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ca:	223f      	movs	r2, #63	; 0x3f
 80033cc:	409a      	lsls	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	08010564 	.word	0x08010564
 80033f0:	f010803f 	.word	0xf010803f

080033f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_DMA_Start_IT+0x26>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d304      	bcc.n	8003424 <HAL_DMA_Start_IT+0x30>
 800341a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800341e:	4827      	ldr	r0, [pc, #156]	; (80034bc <HAL_DMA_Start_IT+0xc8>)
 8003420:	f7fe f937 	bl	8001692 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_DMA_Start_IT+0x3e>
 800342e:	2302      	movs	r3, #2
 8003430:	e040      	b.n	80034b4 <HAL_DMA_Start_IT+0xc0>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d12f      	bne.n	80034a6 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f9ba 	bl	80037d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	223f      	movs	r2, #63	; 0x3f
 8003466:	409a      	lsls	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0216 	orr.w	r2, r2, #22
 800347a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0208 	orr.w	r2, r2, #8
 8003492:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e005      	b.n	80034b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
 80034b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	08010564 	.word	0x08010564

080034c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034cc:	4b92      	ldr	r3, [pc, #584]	; (8003718 <HAL_DMA_IRQHandler+0x258>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a92      	ldr	r2, [pc, #584]	; (800371c <HAL_DMA_IRQHandler+0x25c>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	0a9b      	lsrs	r3, r3, #10
 80034d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	2208      	movs	r2, #8
 80034ec:	409a      	lsls	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01a      	beq.n	800352c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0204 	bic.w	r2, r2, #4
 8003512:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	2208      	movs	r2, #8
 800351a:	409a      	lsls	r2, r3
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f043 0201 	orr.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003530:	2201      	movs	r2, #1
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d012      	beq.n	8003562 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	2201      	movs	r2, #1
 8003550:	409a      	lsls	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0202 	orr.w	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	2204      	movs	r2, #4
 8003568:	409a      	lsls	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d012      	beq.n	8003598 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2204      	movs	r2, #4
 8003586:	409a      	lsls	r2, r3
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	f043 0204 	orr.w	r2, r3, #4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	2210      	movs	r2, #16
 800359e:	409a      	lsls	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d043      	beq.n	8003630 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d03c      	beq.n	8003630 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	2210      	movs	r2, #16
 80035bc:	409a      	lsls	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d018      	beq.n	8003602 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d024      	beq.n	8003630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
 80035ee:	e01f      	b.n	8003630 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01b      	beq.n	8003630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
 8003600:	e016      	b.n	8003630 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d107      	bne.n	8003620 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0208 	bic.w	r2, r2, #8
 800361e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2220      	movs	r2, #32
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 808e 	beq.w	800375e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8086 	beq.w	800375e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	2220      	movs	r2, #32
 8003658:	409a      	lsls	r2, r3
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b05      	cmp	r3, #5
 8003668:	d136      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0216 	bic.w	r2, r2, #22
 8003678:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003688:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <HAL_DMA_IRQHandler+0x1da>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0208 	bic.w	r2, r2, #8
 80036a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	223f      	movs	r2, #63	; 0x3f
 80036b0:	409a      	lsls	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d07d      	beq.n	80037ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	4798      	blx	r3
        }
        return;
 80036d6:	e078      	b.n	80037ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01c      	beq.n	8003720 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d108      	bne.n	8003706 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d030      	beq.n	800375e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
 8003704:	e02b      	b.n	800375e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d027      	beq.n	800375e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
 8003716:	e022      	b.n	800375e <HAL_DMA_IRQHandler+0x29e>
 8003718:	20000000 	.word	0x20000000
 800371c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0210 	bic.w	r2, r2, #16
 800373c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003762:	2b00      	cmp	r3, #0
 8003764:	d032      	beq.n	80037cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d022      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2205      	movs	r2, #5
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	3301      	adds	r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	429a      	cmp	r2, r3
 8003794:	d307      	bcc.n	80037a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f2      	bne.n	800378a <HAL_DMA_IRQHandler+0x2ca>
 80037a4:	e000      	b.n	80037a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037a6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	4798      	blx	r3
 80037c8:	e000      	b.n	80037cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80037ca:	bf00      	nop
    }
  }
}
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop

080037d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d108      	bne.n	8003814 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003812:	e007      	b.n	8003824 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	60da      	str	r2, [r3, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	3b10      	subs	r3, #16
 8003840:	4a14      	ldr	r2, [pc, #80]	; (8003894 <DMA_CalcBaseAndBitshift+0x64>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800384a:	4a13      	ldr	r2, [pc, #76]	; (8003898 <DMA_CalcBaseAndBitshift+0x68>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d909      	bls.n	8003872 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	1d1a      	adds	r2, r3, #4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	659a      	str	r2, [r3, #88]	; 0x58
 8003870:	e007      	b.n	8003882 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800387a:	f023 0303 	bic.w	r3, r3, #3
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	aaaaaaab 	.word	0xaaaaaaab
 8003898:	08010784 	.word	0x08010784

0800389c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11f      	bne.n	80038f6 <DMA_CheckFifoParam+0x5a>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d856      	bhi.n	800396a <DMA_CheckFifoParam+0xce>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <DMA_CheckFifoParam+0x28>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038d5 	.word	0x080038d5
 80038c8:	080038e7 	.word	0x080038e7
 80038cc:	080038d5 	.word	0x080038d5
 80038d0:	0800396b 	.word	0x0800396b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d046      	beq.n	800396e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e4:	e043      	b.n	800396e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038ee:	d140      	bne.n	8003972 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f4:	e03d      	b.n	8003972 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fe:	d121      	bne.n	8003944 <DMA_CheckFifoParam+0xa8>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d837      	bhi.n	8003976 <DMA_CheckFifoParam+0xda>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <DMA_CheckFifoParam+0x70>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	0800391d 	.word	0x0800391d
 8003910:	08003923 	.word	0x08003923
 8003914:	0800391d 	.word	0x0800391d
 8003918:	08003935 	.word	0x08003935
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      break;
 8003920:	e030      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d025      	beq.n	800397a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003932:	e022      	b.n	800397a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800393c:	d11f      	bne.n	800397e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003942:	e01c      	b.n	800397e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d903      	bls.n	8003952 <DMA_CheckFifoParam+0xb6>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b03      	cmp	r3, #3
 800394e:	d003      	beq.n	8003958 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003950:	e018      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
      break;
 8003956:	e015      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      break;
 8003968:	e00b      	b.n	8003982 <DMA_CheckFifoParam+0xe6>
      break;
 800396a:	bf00      	nop
 800396c:	e00a      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;
 800396e:	bf00      	nop
 8003970:	e008      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;
 8003972:	bf00      	nop
 8003974:	e006      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;
 8003976:	bf00      	nop
 8003978:	e004      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;
 800397a:	bf00      	nop
 800397c:	e002      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;   
 800397e:	bf00      	nop
 8003980:	e000      	b.n	8003984 <DMA_CheckFifoParam+0xe8>
      break;
 8003982:	bf00      	nop
    }
  } 
  
  return status; 
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop

08003994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a33      	ldr	r2, [pc, #204]	; (8003a7c <HAL_GPIO_Init+0xe8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d017      	beq.n	80039e2 <HAL_GPIO_Init+0x4e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a32      	ldr	r2, [pc, #200]	; (8003a80 <HAL_GPIO_Init+0xec>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_GPIO_Init+0x4e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <HAL_GPIO_Init+0xf0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00f      	beq.n	80039e2 <HAL_GPIO_Init+0x4e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a30      	ldr	r2, [pc, #192]	; (8003a88 <HAL_GPIO_Init+0xf4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <HAL_GPIO_Init+0x4e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <HAL_GPIO_Init+0xf8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <HAL_GPIO_Init+0x4e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2e      	ldr	r2, [pc, #184]	; (8003a90 <HAL_GPIO_Init+0xfc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x4e>
 80039da:	21ac      	movs	r1, #172	; 0xac
 80039dc:	482d      	ldr	r0, [pc, #180]	; (8003a94 <HAL_GPIO_Init+0x100>)
 80039de:	f7fd fe58 	bl	8001692 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_GPIO_Init+0x64>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_GPIO_Init+0x6c>
 80039f8:	21ad      	movs	r1, #173	; 0xad
 80039fa:	4826      	ldr	r0, [pc, #152]	; (8003a94 <HAL_GPIO_Init+0x100>)
 80039fc:	f7fd fe49 	bl	8001692 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d035      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d031      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b11      	cmp	r3, #17
 8003a16:	d02d      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d029      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b12      	cmp	r3, #18
 8003a26:	d025      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003a30:	d020      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003a3a:	d01b      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003a44:	d016      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003a4e:	d011      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003a58:	d00c      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003a62:	d007      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0xe0>
 8003a6c:	21ae      	movs	r1, #174	; 0xae
 8003a6e:	4809      	ldr	r0, [pc, #36]	; (8003a94 <HAL_GPIO_Init+0x100>)
 8003a70:	f7fd fe0f 	bl	8001692 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	e211      	b.n	8003e9e <HAL_GPIO_Init+0x50a>
 8003a7a:	bf00      	nop
 8003a7c:	40020000 	.word	0x40020000
 8003a80:	40020400 	.word	0x40020400
 8003a84:	40020800 	.word	0x40020800
 8003a88:	40020c00 	.word	0x40020c00
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40021c00 	.word	0x40021c00
 8003a94:	0801059c 	.word	0x0801059c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a98:	2201      	movs	r2, #1
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	f040 81f1 	bne.w	8003e98 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d005      	beq.n	8003ace <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d144      	bne.n	8003b58 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00f      	beq.n	8003af6 <HAL_GPIO_Init+0x162>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d00b      	beq.n	8003af6 <HAL_GPIO_Init+0x162>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d007      	beq.n	8003af6 <HAL_GPIO_Init+0x162>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x162>
 8003aee:	21c0      	movs	r1, #192	; 0xc0
 8003af0:	489f      	ldr	r0, [pc, #636]	; (8003d70 <HAL_GPIO_Init+0x3dc>)
 8003af2:	f7fd fdce 	bl	8001692 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	2203      	movs	r2, #3
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 0201 	and.w	r2, r3, #1
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d027      	beq.n	8003bb4 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <HAL_GPIO_Init+0x1f0>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d007      	beq.n	8003b84 <HAL_GPIO_Init+0x1f0>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x1f0>
 8003b7c:	21d1      	movs	r1, #209	; 0xd1
 8003b7e:	487c      	ldr	r0, [pc, #496]	; (8003d70 <HAL_GPIO_Init+0x3dc>)
 8003b80:	f7fd fd87 	bl	8001692 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	f040 80a0 	bne.w	8003d02 <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d077      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b09      	cmp	r3, #9
 8003bd0:	d073      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d06f      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d06b      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d067      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d063      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d05f      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d05b      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d057      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d053      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d04f      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d04b      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d047      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d043      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b05      	cmp	r3, #5
 8003c38:	d03f      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d03b      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	d037      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d033      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d02f      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	d02b      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	d027      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b07      	cmp	r3, #7
 8003c70:	d023      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b07      	cmp	r3, #7
 8003c78:	d01f      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b07      	cmp	r3, #7
 8003c80:	d01b      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d017      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b0a      	cmp	r3, #10
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b09      	cmp	r3, #9
 8003c98:	d00f      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b09      	cmp	r3, #9
 8003ca0:	d00b      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d007      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b0f      	cmp	r3, #15
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x326>
 8003cb2:	21de      	movs	r1, #222	; 0xde
 8003cb4:	482e      	ldr	r0, [pc, #184]	; (8003d70 <HAL_GPIO_Init+0x3dc>)
 8003cb6:	f7fd fcec 	bl	8001692 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	08da      	lsrs	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3208      	adds	r2, #8
 8003cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	220f      	movs	r2, #15
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	08da      	lsrs	r2, r3, #3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3208      	adds	r2, #8
 8003cfc:	69b9      	ldr	r1, [r7, #24]
 8003cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0203 	and.w	r2, r3, #3
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80aa 	beq.w	8003e98 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <HAL_GPIO_Init+0x3e0>)
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <HAL_GPIO_Init+0x3e0>)
 8003d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d52:	6453      	str	r3, [r2, #68]	; 0x44
 8003d54:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <HAL_GPIO_Init+0x3e0>)
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d60:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <HAL_GPIO_Init+0x3e4>)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	3302      	adds	r3, #2
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	e006      	b.n	8003d7c <HAL_GPIO_Init+0x3e8>
 8003d6e:	bf00      	nop
 8003d70:	0801059c 	.word	0x0801059c
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40013800 	.word	0x40013800
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	220f      	movs	r2, #15
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a46      	ldr	r2, [pc, #280]	; (8003eb0 <HAL_GPIO_Init+0x51c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d019      	beq.n	8003dd0 <HAL_GPIO_Init+0x43c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a45      	ldr	r2, [pc, #276]	; (8003eb4 <HAL_GPIO_Init+0x520>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d013      	beq.n	8003dcc <HAL_GPIO_Init+0x438>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a44      	ldr	r2, [pc, #272]	; (8003eb8 <HAL_GPIO_Init+0x524>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00d      	beq.n	8003dc8 <HAL_GPIO_Init+0x434>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a43      	ldr	r2, [pc, #268]	; (8003ebc <HAL_GPIO_Init+0x528>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d007      	beq.n	8003dc4 <HAL_GPIO_Init+0x430>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a42      	ldr	r2, [pc, #264]	; (8003ec0 <HAL_GPIO_Init+0x52c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <HAL_GPIO_Init+0x42c>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	e008      	b.n	8003dd2 <HAL_GPIO_Init+0x43e>
 8003dc0:	2307      	movs	r3, #7
 8003dc2:	e006      	b.n	8003dd2 <HAL_GPIO_Init+0x43e>
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e004      	b.n	8003dd2 <HAL_GPIO_Init+0x43e>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e002      	b.n	8003dd2 <HAL_GPIO_Init+0x43e>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <HAL_GPIO_Init+0x43e>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	f002 0203 	and.w	r2, r2, #3
 8003dd8:	0092      	lsls	r2, r2, #2
 8003dda:	4093      	lsls	r3, r2
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de2:	4938      	ldr	r1, [pc, #224]	; (8003ec4 <HAL_GPIO_Init+0x530>)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	3302      	adds	r3, #2
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <HAL_GPIO_Init+0x534>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e14:	4a2c      	ldr	r2, [pc, #176]	; (8003ec8 <HAL_GPIO_Init+0x534>)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e1a:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <HAL_GPIO_Init+0x534>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e3e:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <HAL_GPIO_Init+0x534>)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e44:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_GPIO_Init+0x534>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <HAL_GPIO_Init+0x534>)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e6e:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <HAL_GPIO_Init+0x534>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e92:	4a0d      	ldr	r2, [pc, #52]	; (8003ec8 <HAL_GPIO_Init+0x534>)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b0f      	cmp	r3, #15
 8003ea2:	f67f adf9 	bls.w	8003a98 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40020000 	.word	0x40020000
 8003eb4:	40020400 	.word	0x40020400
 8003eb8:	40020800 	.word	0x40020800
 8003ebc:	40020c00 	.word	0x40020c00
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40013800 	.word	0x40013800
 8003ec8:	40013c00 	.word	0x40013c00

08003ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003edc:	887b      	ldrh	r3, [r7, #2]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <HAL_GPIO_WritePin+0x20>
 8003ee2:	887b      	ldrh	r3, [r7, #2]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <HAL_GPIO_WritePin+0x2a>
 8003eec:	f240 119d 	movw	r1, #413	; 0x19d
 8003ef0:	480e      	ldr	r0, [pc, #56]	; (8003f2c <HAL_GPIO_WritePin+0x60>)
 8003ef2:	f7fd fbce 	bl	8001692 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003ef6:	787b      	ldrb	r3, [r7, #1]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <HAL_GPIO_WritePin+0x40>
 8003efc:	787b      	ldrb	r3, [r7, #1]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d004      	beq.n	8003f0c <HAL_GPIO_WritePin+0x40>
 8003f02:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003f06:	4809      	ldr	r0, [pc, #36]	; (8003f2c <HAL_GPIO_WritePin+0x60>)
 8003f08:	f7fd fbc3 	bl	8001692 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003f0c:	787b      	ldrb	r3, [r7, #1]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f18:	e003      	b.n	8003f22 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	041a      	lsls	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	619a      	str	r2, [r3, #24]
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	0801059c 	.word	0x0801059c

08003f30 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	b08f      	sub	sp, #60	; 0x3c
 8003f34:	af0a      	add	r7, sp, #40	; 0x28
 8003f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e05d      	b.n	8003ffe <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f4a:	d003      	beq.n	8003f54 <HAL_HCD_Init+0x24>
 8003f4c:	2179      	movs	r1, #121	; 0x79
 8003f4e:	482e      	ldr	r0, [pc, #184]	; (8004008 <HAL_HCD_Init+0xd8>)
 8003f50:	f7fd fb9f 	bl	8001692 <assert_failed>

  USBx = hhcd->Instance;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f007 fb92 	bl	800b698 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2203      	movs	r2, #3
 8003f78:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f004 fce8 	bl	8008968 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	687e      	ldr	r6, [r7, #4]
 8003fa0:	466d      	mov	r5, sp
 8003fa2:	f106 0410 	add.w	r4, r6, #16
 8003fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fb6:	1d33      	adds	r3, r6, #4
 8003fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fba:	6838      	ldr	r0, [r7, #0]
 8003fbc:	f004 fc62 	bl	8008884 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f004 fcdf 	bl	800898a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	687e      	ldr	r6, [r7, #4]
 8003fd4:	466d      	mov	r5, sp
 8003fd6:	f106 0410 	add.w	r4, r6, #16
 8003fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fe6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fea:	1d33      	adds	r3, r6, #4
 8003fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fee:	6838      	ldr	r0, [r7, #0]
 8003ff0:	f004 fe46 	bl	8008c80 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004006:	bf00      	nop
 8004008:	080105d8 	.word	0x080105d8

0800400c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b089      	sub	sp, #36	; 0x24
 8004010:	af04      	add	r7, sp, #16
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	461a      	mov	r2, r3
 800401a:	4603      	mov	r3, r0
 800401c:	70fb      	strb	r3, [r7, #3]
 800401e:	460b      	mov	r3, r1
 8004020:	70bb      	strb	r3, [r7, #2]
 8004022:	4613      	mov	r3, r2
 8004024:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_HCD_HC_Init+0x28>
 8004030:	2302      	movs	r3, #2
 8004032:	e076      	b.n	8004122 <HAL_HCD_HC_Init+0x116>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	212c      	movs	r1, #44	; 0x2c
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	333d      	adds	r3, #61	; 0x3d
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	212c      	movs	r1, #44	; 0x2c
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	3338      	adds	r3, #56	; 0x38
 800405c:	787a      	ldrb	r2, [r7, #1]
 800405e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3340      	adds	r3, #64	; 0x40
 800406e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004070:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	3339      	adds	r3, #57	; 0x39
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	212c      	movs	r1, #44	; 0x2c
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	4413      	add	r3, r2
 8004090:	333f      	adds	r3, #63	; 0x3f
 8004092:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004096:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	78ba      	ldrb	r2, [r7, #2]
 800409c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040a0:	b2d0      	uxtb	r0, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	212c      	movs	r1, #44	; 0x2c
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	333a      	adds	r3, #58	; 0x3a
 80040ae:	4602      	mov	r2, r0
 80040b0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80040b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	da09      	bge.n	80040ce <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	212c      	movs	r1, #44	; 0x2c
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	333b      	adds	r3, #59	; 0x3b
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e008      	b.n	80040e0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	212c      	movs	r1, #44	; 0x2c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	333b      	adds	r3, #59	; 0x3b
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	333c      	adds	r3, #60	; 0x3c
 80040ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80040f2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	787c      	ldrb	r4, [r7, #1]
 80040fa:	78ba      	ldrb	r2, [r7, #2]
 80040fc:	78f9      	ldrb	r1, [r7, #3]
 80040fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004100:	9302      	str	r3, [sp, #8]
 8004102:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	f897 3020 	ldrb.w	r3, [r7, #32]
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	4623      	mov	r3, r4
 8004110:	f004 ff30 	bl	8008f74 <USB_HC_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bd90      	pop	{r4, r7, pc}

0800412a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_HCD_HC_Halt+0x1e>
 8004144:	2302      	movs	r3, #2
 8004146:	e00f      	b.n	8004168 <HAL_HCD_HC_Halt+0x3e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f005 f96c 	bl	8009436 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	461a      	mov	r2, r3
 800417e:	4603      	mov	r3, r0
 8004180:	70fb      	strb	r3, [r7, #3]
 8004182:	460b      	mov	r3, r1
 8004184:	70bb      	strb	r3, [r7, #2]
 8004186:	4613      	mov	r3, r2
 8004188:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	212c      	movs	r1, #44	; 0x2c
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	4413      	add	r3, r2
 8004196:	333b      	adds	r3, #59	; 0x3b
 8004198:	78ba      	ldrb	r2, [r7, #2]
 800419a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	333f      	adds	r3, #63	; 0x3f
 80041aa:	787a      	ldrb	r2, [r7, #1]
 80041ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80041ae:	7c3b      	ldrb	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d112      	bne.n	80041da <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	212c      	movs	r1, #44	; 0x2c
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	4413      	add	r3, r2
 80041c0:	3342      	adds	r3, #66	; 0x42
 80041c2:	2203      	movs	r2, #3
 80041c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	212c      	movs	r1, #44	; 0x2c
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	333d      	adds	r3, #61	; 0x3d
 80041d4:	7f3a      	ldrb	r2, [r7, #28]
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	e008      	b.n	80041ec <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	212c      	movs	r1, #44	; 0x2c
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	3342      	adds	r3, #66	; 0x42
 80041e8:	2202      	movs	r2, #2
 80041ea:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80041ec:	787b      	ldrb	r3, [r7, #1]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	f200 80c6 	bhi.w	8004380 <HAL_HCD_HC_SubmitRequest+0x210>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	0800420d 	.word	0x0800420d
 8004200:	0800436d 	.word	0x0800436d
 8004204:	08004271 	.word	0x08004271
 8004208:	080042ef 	.word	0x080042ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800420c:	7c3b      	ldrb	r3, [r7, #16]
 800420e:	2b01      	cmp	r3, #1
 8004210:	f040 80b8 	bne.w	8004384 <HAL_HCD_HC_SubmitRequest+0x214>
 8004214:	78bb      	ldrb	r3, [r7, #2]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f040 80b4 	bne.w	8004384 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800421c:	8b3b      	ldrh	r3, [r7, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	3355      	adds	r3, #85	; 0x55
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	212c      	movs	r1, #44	; 0x2c
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	4413      	add	r3, r2
 8004240:	3355      	adds	r3, #85	; 0x55
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	212c      	movs	r1, #44	; 0x2c
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	4413      	add	r3, r2
 8004254:	3342      	adds	r3, #66	; 0x42
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800425a:	e093      	b.n	8004384 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	3342      	adds	r3, #66	; 0x42
 800426a:	2202      	movs	r2, #2
 800426c:	701a      	strb	r2, [r3, #0]
      break;
 800426e:	e089      	b.n	8004384 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004270:	78bb      	ldrb	r3, [r7, #2]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11d      	bne.n	80042b2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	212c      	movs	r1, #44	; 0x2c
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	4413      	add	r3, r2
 8004282:	3355      	adds	r3, #85	; 0x55
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	212c      	movs	r1, #44	; 0x2c
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	4413      	add	r3, r2
 8004296:	3342      	adds	r3, #66	; 0x42
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800429c:	e073      	b.n	8004386 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	212c      	movs	r1, #44	; 0x2c
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	4413      	add	r3, r2
 80042aa:	3342      	adds	r3, #66	; 0x42
 80042ac:	2202      	movs	r2, #2
 80042ae:	701a      	strb	r2, [r3, #0]
      break;
 80042b0:	e069      	b.n	8004386 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	212c      	movs	r1, #44	; 0x2c
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	4413      	add	r3, r2
 80042be:	3354      	adds	r3, #84	; 0x54
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	3342      	adds	r3, #66	; 0x42
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
      break;
 80042d8:	e055      	b.n	8004386 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	212c      	movs	r1, #44	; 0x2c
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	3342      	adds	r3, #66	; 0x42
 80042e8:	2202      	movs	r2, #2
 80042ea:	701a      	strb	r2, [r3, #0]
      break;
 80042ec:	e04b      	b.n	8004386 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80042ee:	78bb      	ldrb	r3, [r7, #2]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d11d      	bne.n	8004330 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	212c      	movs	r1, #44	; 0x2c
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	3355      	adds	r3, #85	; 0x55
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	212c      	movs	r1, #44	; 0x2c
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	4413      	add	r3, r2
 8004314:	3342      	adds	r3, #66	; 0x42
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800431a:	e034      	b.n	8004386 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	3342      	adds	r3, #66	; 0x42
 800432a:	2202      	movs	r2, #2
 800432c:	701a      	strb	r2, [r3, #0]
      break;
 800432e:	e02a      	b.n	8004386 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	212c      	movs	r1, #44	; 0x2c
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	3354      	adds	r3, #84	; 0x54
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	212c      	movs	r1, #44	; 0x2c
 800434a:	fb01 f303 	mul.w	r3, r1, r3
 800434e:	4413      	add	r3, r2
 8004350:	3342      	adds	r3, #66	; 0x42
 8004352:	2200      	movs	r2, #0
 8004354:	701a      	strb	r2, [r3, #0]
      break;
 8004356:	e016      	b.n	8004386 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	212c      	movs	r1, #44	; 0x2c
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	4413      	add	r3, r2
 8004364:	3342      	adds	r3, #66	; 0x42
 8004366:	2202      	movs	r2, #2
 8004368:	701a      	strb	r2, [r3, #0]
      break;
 800436a:	e00c      	b.n	8004386 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	212c      	movs	r1, #44	; 0x2c
 8004372:	fb01 f303 	mul.w	r3, r1, r3
 8004376:	4413      	add	r3, r2
 8004378:	3342      	adds	r3, #66	; 0x42
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
      break;
 800437e:	e002      	b.n	8004386 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004380:	bf00      	nop
 8004382:	e000      	b.n	8004386 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004384:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	3344      	adds	r3, #68	; 0x44
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	8b3a      	ldrh	r2, [r7, #24]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	202c      	movs	r0, #44	; 0x2c
 80043a0:	fb00 f303 	mul.w	r3, r0, r3
 80043a4:	440b      	add	r3, r1
 80043a6:	334c      	adds	r3, #76	; 0x4c
 80043a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	212c      	movs	r1, #44	; 0x2c
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	3360      	adds	r3, #96	; 0x60
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	212c      	movs	r1, #44	; 0x2c
 80043c2:	fb01 f303 	mul.w	r3, r1, r3
 80043c6:	4413      	add	r3, r2
 80043c8:	3350      	adds	r3, #80	; 0x50
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3339      	adds	r3, #57	; 0x39
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	212c      	movs	r1, #44	; 0x2c
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	3361      	adds	r3, #97	; 0x61
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	222c      	movs	r2, #44	; 0x2c
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	3338      	adds	r3, #56	; 0x38
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	18d1      	adds	r1, r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	f004 fec0 	bl	8009190 <USB_HC_StartXfer>
 8004410:	4603      	mov	r3, r0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop

0800441c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f004 fbe3 	bl	8008bfe <USB_GetMode>
 8004438:	4603      	mov	r3, r0
 800443a:	2b01      	cmp	r3, #1
 800443c:	f040 80f6 	bne.w	800462c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f004 fbc7 	bl	8008bd8 <USB_ReadInterrupts>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80ec 	beq.w	800462a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f004 fbbe 	bl	8008bd8 <USB_ReadInterrupts>
 800445c:	4603      	mov	r3, r0
 800445e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004466:	d104      	bne.n	8004472 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004470:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f004 fbae 	bl	8008bd8 <USB_ReadInterrupts>
 800447c:	4603      	mov	r3, r0
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004486:	d104      	bne.n	8004492 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004490:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f004 fb9e 	bl	8008bd8 <USB_ReadInterrupts>
 800449c:	4603      	mov	r3, r0
 800449e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a6:	d104      	bne.n	80044b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f004 fb8e 	bl	8008bd8 <USB_ReadInterrupts>
 80044bc:	4603      	mov	r3, r0
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d103      	bne.n	80044ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2202      	movs	r2, #2
 80044cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f004 fb80 	bl	8008bd8 <USB_ReadInterrupts>
 80044d8:	4603      	mov	r3, r0
 80044da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e2:	d11c      	bne.n	800451e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80044ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80044fe:	2110      	movs	r1, #16
 8004500:	6938      	ldr	r0, [r7, #16]
 8004502:	f004 fa8f 	bl	8008a24 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004506:	6938      	ldr	r0, [r7, #16]
 8004508:	f004 fab0 	bl	8008a6c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f004 fc68 	bl	8008de8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f007 f93b 	bl	800b794 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f004 fb58 	bl	8008bd8 <USB_ReadInterrupts>
 8004528:	4603      	mov	r3, r0
 800452a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800452e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004532:	d102      	bne.n	800453a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f001 fa03 	bl	8005940 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f004 fb4a 	bl	8008bd8 <USB_ReadInterrupts>
 8004544:	4603      	mov	r3, r0
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b08      	cmp	r3, #8
 800454c:	d106      	bne.n	800455c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f007 f904 	bl	800b75c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2208      	movs	r2, #8
 800455a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f004 fb39 	bl	8008bd8 <USB_ReadInterrupts>
 8004566:	4603      	mov	r3, r0
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b10      	cmp	r3, #16
 800456e:	d101      	bne.n	8004574 <HAL_HCD_IRQHandler+0x158>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_HCD_IRQHandler+0x15a>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d012      	beq.n	80045a0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0210 	bic.w	r2, r2, #16
 8004588:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f001 f906 	bl	800579c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0210 	orr.w	r2, r2, #16
 800459e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f004 fb17 	bl	8008bd8 <USB_ReadInterrupts>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045b4:	d13a      	bne.n	800462c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f004 ff2a 	bl	8009414 <USB_HC_ReadInterrupt>
 80045c0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e025      	b.n	8004614 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d018      	beq.n	800460e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f2:	d106      	bne.n	8004602 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f8ab 	bl	8004756 <HCD_HC_IN_IRQHandler>
 8004600:	e005      	b.n	800460e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fcc6 	bl	8004f9a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	3301      	adds	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	429a      	cmp	r2, r3
 800461c:	d3d4      	bcc.n	80045c8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004626:	615a      	str	r2, [r3, #20]
 8004628:	e000      	b.n	800462c <HAL_HCD_IRQHandler+0x210>
      return;
 800462a:	bf00      	nop
    }
  }
}
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_HCD_Start+0x16>
 8004644:	2302      	movs	r3, #2
 8004646:	e013      	b.n	8004670 <HAL_HCD_Start+0x3e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f004 fc2a 	bl	8008eb0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f004 f970 	bl	8008946 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_HCD_Stop+0x16>
 800468a:	2302      	movs	r3, #2
 800468c:	e00d      	b.n	80046aa <HAL_HCD_Stop+0x32>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f005 f824 	bl	80096e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f004 fbcc 	bl	8008e5c <USB_ResetPort>
 80046c4:	4603      	mov	r3, r0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	212c      	movs	r1, #44	; 0x2c
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	3360      	adds	r3, #96	; 0x60
 80046e8:	781b      	ldrb	r3, [r3, #0]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	460b      	mov	r3, r1
 8004700:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	212c      	movs	r1, #44	; 0x2c
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	4413      	add	r3, r2
 800470e:	3350      	adds	r3, #80	; 0x50
 8004710:	681b      	ldr	r3, [r3, #0]
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f004 fc10 	bl	8008f50 <USB_GetCurrentFrame>
 8004730:	4603      	mov	r3, r0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f004 fbeb 	bl	8008f22 <USB_GetHostSpeed>
 800474c:	4603      	mov	r3, r0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b04      	cmp	r3, #4
 8004784:	d119      	bne.n	80047ba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4413      	add	r3, r2
 800478e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004792:	461a      	mov	r2, r3
 8004794:	2304      	movs	r3, #4
 8004796:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047b2:	f043 0302 	orr.w	r3, r3, #2
 80047b6:	60d3      	str	r3, [r2, #12]
 80047b8:	e101      	b.n	80049be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d0:	d12b      	bne.n	800482a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047de:	461a      	mov	r2, r3
 80047e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	212c      	movs	r1, #44	; 0x2c
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	4413      	add	r3, r2
 80047f2:	3361      	adds	r3, #97	; 0x61
 80047f4:	2207      	movs	r2, #7
 80047f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	440a      	add	r2, r1
 800480e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004812:	f043 0302 	orr.w	r3, r3, #2
 8004816:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f004 fe07 	bl	8009436 <USB_HC_Halt>
 8004828:	e0c9      	b.n	80049be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b20      	cmp	r3, #32
 800483e:	d109      	bne.n	8004854 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484c:	461a      	mov	r2, r3
 800484e:	2320      	movs	r3, #32
 8004850:	6093      	str	r3, [r2, #8]
 8004852:	e0b4      	b.n	80049be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b08      	cmp	r3, #8
 8004868:	d133      	bne.n	80048d2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4413      	add	r3, r2
 8004872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	0151      	lsls	r1, r2, #5
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	440a      	add	r2, r1
 8004880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	212c      	movs	r1, #44	; 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	3361      	adds	r3, #97	; 0x61
 8004898:	2205      	movs	r2, #5
 800489a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a8:	461a      	mov	r2, r3
 80048aa:	2310      	movs	r3, #16
 80048ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ba:	461a      	mov	r2, r3
 80048bc:	2308      	movs	r3, #8
 80048be:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f004 fdb3 	bl	8009436 <USB_HC_Halt>
 80048d0:	e075      	b.n	80049be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e8:	d134      	bne.n	8004954 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	212c      	movs	r1, #44	; 0x2c
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	4413      	add	r3, r2
 8004916:	3361      	adds	r3, #97	; 0x61
 8004918:	2208      	movs	r2, #8
 800491a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4413      	add	r3, r2
 8004924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004928:	461a      	mov	r2, r3
 800492a:	2310      	movs	r3, #16
 800492c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4413      	add	r3, r2
 8004936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493a:	461a      	mov	r2, r3
 800493c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004940:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f004 fd72 	bl	8009436 <USB_HC_Halt>
 8004952:	e034      	b.n	80049be <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4413      	add	r3, r2
 800495c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d129      	bne.n	80049be <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4413      	add	r3, r2
 8004972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	0151      	lsls	r1, r2, #5
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	440a      	add	r2, r1
 8004980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004984:	f043 0302 	orr.w	r3, r3, #2
 8004988:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	212c      	movs	r1, #44	; 0x2c
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	3361      	adds	r3, #97	; 0x61
 8004998:	2206      	movs	r2, #6
 800499a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f004 fd45 	bl	8009436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b8:	461a      	mov	r2, r3
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d4:	d122      	bne.n	8004a1c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049f0:	f043 0302 	orr.w	r3, r3, #2
 80049f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f004 fd18 	bl	8009436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a12:	461a      	mov	r2, r3
 8004a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a18:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a1a:	e2ba      	b.n	8004f92 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	f040 811b 	bne.w	8004c6a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d019      	beq.n	8004a70 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	212c      	movs	r1, #44	; 0x2c
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	3348      	adds	r3, #72	; 0x48
 8004a4a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	0159      	lsls	r1, r3, #5
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	440b      	add	r3, r1
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a5e:	1ad2      	subs	r2, r2, r3
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	202c      	movs	r0, #44	; 0x2c
 8004a66:	fb00 f303 	mul.w	r3, r0, r3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3350      	adds	r3, #80	; 0x50
 8004a6e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	212c      	movs	r1, #44	; 0x2c
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3361      	adds	r3, #97	; 0x61
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	212c      	movs	r1, #44	; 0x2c
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	335c      	adds	r3, #92	; 0x5c
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	212c      	movs	r1, #44	; 0x2c
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	333f      	adds	r3, #63	; 0x3f
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	212c      	movs	r1, #44	; 0x2c
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	333f      	adds	r3, #63	; 0x3f
 8004ac8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d121      	bne.n	8004b12 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	4611      	mov	r1, r2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f004 fc9c 	bl	8009436 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	6093      	str	r3, [r2, #8]
 8004b10:	e066      	b.n	8004be0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	212c      	movs	r1, #44	; 0x2c
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	333f      	adds	r3, #63	; 0x3f
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d127      	bne.n	8004b76 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b44:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	212c      	movs	r1, #44	; 0x2c
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	4413      	add	r3, r2
 8004b52:	3360      	adds	r3, #96	; 0x60
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	b2d9      	uxtb	r1, r3
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	202c      	movs	r0, #44	; 0x2c
 8004b62:	fb00 f303 	mul.w	r3, r0, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	3360      	adds	r3, #96	; 0x60
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f006 fe1e 	bl	800b7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b74:	e034      	b.n	8004be0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	212c      	movs	r1, #44	; 0x2c
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	333f      	adds	r3, #63	; 0x3f
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d12a      	bne.n	8004be0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	212c      	movs	r1, #44	; 0x2c
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	3360      	adds	r3, #96	; 0x60
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	212c      	movs	r1, #44	; 0x2c
 8004ba2:	fb01 f303 	mul.w	r3, r1, r3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3354      	adds	r3, #84	; 0x54
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f083 0301 	eor.w	r3, r3, #1
 8004bb0:	b2d8      	uxtb	r0, r3
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	212c      	movs	r1, #44	; 0x2c
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3354      	adds	r3, #84	; 0x54
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	b2d9      	uxtb	r1, r3
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	202c      	movs	r0, #44	; 0x2c
 8004bce:	fb00 f303 	mul.w	r3, r0, r3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3360      	adds	r3, #96	; 0x60
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f006 fde8 	bl	800b7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d12b      	bne.n	8004c40 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	212c      	movs	r1, #44	; 0x2c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3348      	adds	r3, #72	; 0x48
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	202c      	movs	r0, #44	; 0x2c
 8004bfe:	fb00 f202 	mul.w	r2, r0, r2
 8004c02:	440a      	add	r2, r1
 8004c04:	3240      	adds	r2, #64	; 0x40
 8004c06:	8812      	ldrh	r2, [r2, #0]
 8004c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 81be 	beq.w	8004f92 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	212c      	movs	r1, #44	; 0x2c
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	3354      	adds	r3, #84	; 0x54
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	f083 0301 	eor.w	r3, r3, #1
 8004c2a:	b2d8      	uxtb	r0, r3
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3354      	adds	r3, #84	; 0x54
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	701a      	strb	r2, [r3, #0]
}
 8004c3e:	e1a8      	b.n	8004f92 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	212c      	movs	r1, #44	; 0x2c
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3354      	adds	r3, #84	; 0x54
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	f083 0301 	eor.w	r3, r3, #1
 8004c54:	b2d8      	uxtb	r0, r3
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	212c      	movs	r1, #44	; 0x2c
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	3354      	adds	r3, #84	; 0x54
 8004c64:	4602      	mov	r2, r0
 8004c66:	701a      	strb	r2, [r3, #0]
}
 8004c68:	e193      	b.n	8004f92 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	f040 8106 	bne.w	8004e8e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c9c:	f023 0302 	bic.w	r3, r3, #2
 8004ca0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3361      	adds	r3, #97	; 0x61
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d109      	bne.n	8004cca <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	212c      	movs	r1, #44	; 0x2c
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	3360      	adds	r3, #96	; 0x60
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	e0c9      	b.n	8004e5e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3361      	adds	r3, #97	; 0x61
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d109      	bne.n	8004cf2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	212c      	movs	r1, #44	; 0x2c
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	4413      	add	r3, r2
 8004cea:	3360      	adds	r3, #96	; 0x60
 8004cec:	2205      	movs	r2, #5
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e0b5      	b.n	8004e5e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3361      	adds	r3, #97	; 0x61
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b06      	cmp	r3, #6
 8004d04:	d009      	beq.n	8004d1a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	212c      	movs	r1, #44	; 0x2c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	3361      	adds	r3, #97	; 0x61
 8004d14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d150      	bne.n	8004dbc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	335c      	adds	r3, #92	; 0x5c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	202c      	movs	r0, #44	; 0x2c
 8004d32:	fb00 f303 	mul.w	r3, r0, r3
 8004d36:	440b      	add	r3, r1
 8004d38:	335c      	adds	r3, #92	; 0x5c
 8004d3a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	212c      	movs	r1, #44	; 0x2c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	335c      	adds	r3, #92	; 0x5c
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d912      	bls.n	8004d76 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	212c      	movs	r1, #44	; 0x2c
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	335c      	adds	r3, #92	; 0x5c
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	212c      	movs	r1, #44	; 0x2c
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3360      	adds	r3, #96	; 0x60
 8004d70:	2204      	movs	r2, #4
 8004d72:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d74:	e073      	b.n	8004e5e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	212c      	movs	r1, #44	; 0x2c
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	4413      	add	r3, r2
 8004d82:	3360      	adds	r3, #96	; 0x60
 8004d84:	2202      	movs	r2, #2
 8004d86:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d9e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004da6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db4:	461a      	mov	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004dba:	e050      	b.n	8004e5e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	212c      	movs	r1, #44	; 0x2c
 8004dc2:	fb01 f303 	mul.w	r3, r1, r3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3361      	adds	r3, #97	; 0x61
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d122      	bne.n	8004e16 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	212c      	movs	r1, #44	; 0x2c
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	4413      	add	r3, r2
 8004ddc:	3360      	adds	r3, #96	; 0x60
 8004dde:	2202      	movs	r2, #2
 8004de0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004df8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e00:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	e023      	b.n	8004e5e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	212c      	movs	r1, #44	; 0x2c
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	4413      	add	r3, r2
 8004e22:	3361      	adds	r3, #97	; 0x61
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b07      	cmp	r3, #7
 8004e28:	d119      	bne.n	8004e5e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	212c      	movs	r1, #44	; 0x2c
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	335c      	adds	r3, #92	; 0x5c
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	202c      	movs	r0, #44	; 0x2c
 8004e42:	fb00 f303 	mul.w	r3, r0, r3
 8004e46:	440b      	add	r3, r1
 8004e48:	335c      	adds	r3, #92	; 0x5c
 8004e4a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	212c      	movs	r1, #44	; 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	3360      	adds	r3, #96	; 0x60
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	b2d9      	uxtb	r1, r3
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	202c      	movs	r0, #44	; 0x2c
 8004e7a:	fb00 f303 	mul.w	r3, r0, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	3360      	adds	r3, #96	; 0x60
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f006 fc92 	bl	800b7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e8c:	e081      	b.n	8004f92 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d176      	bne.n	8004f92 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	212c      	movs	r1, #44	; 0x2c
 8004eaa:	fb01 f303 	mul.w	r3, r1, r3
 8004eae:	4413      	add	r3, r2
 8004eb0:	333f      	adds	r3, #63	; 0x3f
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d121      	bne.n	8004efc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	212c      	movs	r1, #44	; 0x2c
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	335c      	adds	r3, #92	; 0x5c
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee4:	f043 0302 	orr.w	r3, r3, #2
 8004ee8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f004 fa9e 	bl	8009436 <USB_HC_Halt>
 8004efa:	e041      	b.n	8004f80 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	333f      	adds	r3, #63	; 0x3f
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	333f      	adds	r3, #63	; 0x3f
 8004f1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d12d      	bne.n	8004f80 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	212c      	movs	r1, #44	; 0x2c
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	335c      	adds	r3, #92	; 0x5c
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d120      	bne.n	8004f80 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	212c      	movs	r1, #44	; 0x2c
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	4413      	add	r3, r2
 8004f4a:	3361      	adds	r3, #97	; 0x61
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f6a:	f043 0302 	orr.w	r3, r3, #2
 8004f6e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f004 fa5b 	bl	8009436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	2310      	movs	r3, #16
 8004f90:	6093      	str	r3, [r2, #8]
}
 8004f92:	bf00      	nop
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b088      	sub	sp, #32
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d119      	bne.n	8004ffe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2304      	movs	r3, #4
 8004fda:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff6:	f043 0302 	orr.w	r3, r3, #2
 8004ffa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004ffc:	e3ca      	b.n	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	4413      	add	r3, r2
 8005006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b20      	cmp	r3, #32
 8005012:	d13e      	bne.n	8005092 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	4413      	add	r3, r2
 800501c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005020:	461a      	mov	r2, r3
 8005022:	2320      	movs	r3, #32
 8005024:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	212c      	movs	r1, #44	; 0x2c
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	4413      	add	r3, r2
 8005032:	333d      	adds	r3, #61	; 0x3d
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b01      	cmp	r3, #1
 8005038:	f040 83ac 	bne.w	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	212c      	movs	r1, #44	; 0x2c
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	333d      	adds	r3, #61	; 0x3d
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	212c      	movs	r1, #44	; 0x2c
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	4413      	add	r3, r2
 800505a:	3360      	adds	r3, #96	; 0x60
 800505c:	2202      	movs	r2, #2
 800505e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	4413      	add	r3, r2
 8005068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	440a      	add	r2, r1
 8005076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800507a:	f043 0302 	orr.w	r3, r3, #2
 800507e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f004 f9d3 	bl	8009436 <USB_HC_Halt>
}
 8005090:	e380      	b.n	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a8:	d122      	bne.n	80050f0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	0151      	lsls	r1, r2, #5
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	440a      	add	r2, r1
 80050c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f004 f9ae 	bl	8009436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e6:	461a      	mov	r2, r3
 80050e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ec:	6093      	str	r3, [r2, #8]
}
 80050ee:	e351      	b.n	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b01      	cmp	r3, #1
 8005104:	d150      	bne.n	80051a8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	212c      	movs	r1, #44	; 0x2c
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	335c      	adds	r3, #92	; 0x5c
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b40      	cmp	r3, #64	; 0x40
 800512c:	d111      	bne.n	8005152 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	212c      	movs	r1, #44	; 0x2c
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	4413      	add	r3, r2
 800513a:	333d      	adds	r3, #61	; 0x3d
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	4413      	add	r3, r2
 8005148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514c:	461a      	mov	r2, r3
 800514e:	2340      	movs	r3, #64	; 0x40
 8005150:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	440a      	add	r2, r1
 8005168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	4611      	mov	r1, r2
 800517c:	4618      	mov	r0, r3
 800517e:	f004 f95a 	bl	8009436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	4413      	add	r3, r2
 800518a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518e:	461a      	mov	r2, r3
 8005190:	2301      	movs	r3, #1
 8005192:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	212c      	movs	r1, #44	; 0x2c
 800519a:	fb01 f303 	mul.w	r3, r1, r3
 800519e:	4413      	add	r3, r2
 80051a0:	3361      	adds	r3, #97	; 0x61
 80051a2:	2201      	movs	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]
}
 80051a6:	e2f5      	b.n	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d13c      	bne.n	8005238 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	212c      	movs	r1, #44	; 0x2c
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	4413      	add	r3, r2
 80051ca:	3361      	adds	r3, #97	; 0x61
 80051cc:	2204      	movs	r2, #4
 80051ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	212c      	movs	r1, #44	; 0x2c
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	4413      	add	r3, r2
 80051dc:	333d      	adds	r3, #61	; 0x3d
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	212c      	movs	r1, #44	; 0x2c
 80051e8:	fb01 f303 	mul.w	r3, r1, r3
 80051ec:	4413      	add	r3, r2
 80051ee:	335c      	adds	r3, #92	; 0x5c
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	440a      	add	r2, r1
 800520a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520e:	f043 0302 	orr.w	r3, r3, #2
 8005212:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	4611      	mov	r1, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f004 f909 	bl	8009436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	461a      	mov	r2, r3
 8005232:	2340      	movs	r3, #64	; 0x40
 8005234:	6093      	str	r3, [r2, #8]
}
 8005236:	e2ad      	b.n	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b08      	cmp	r3, #8
 800524c:	d12a      	bne.n	80052a4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	461a      	mov	r2, r3
 800525c:	2308      	movs	r3, #8
 800525e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	4413      	add	r3, r2
 8005268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	440a      	add	r2, r1
 8005276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527a:	f043 0302 	orr.w	r3, r3, #2
 800527e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f004 f8d3 	bl	8009436 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	212c      	movs	r1, #44	; 0x2c
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	4413      	add	r3, r2
 800529c:	3361      	adds	r3, #97	; 0x61
 800529e:	2205      	movs	r2, #5
 80052a0:	701a      	strb	r2, [r3, #0]
}
 80052a2:	e277      	b.n	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d150      	bne.n	800535c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	212c      	movs	r1, #44	; 0x2c
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	335c      	adds	r3, #92	; 0x5c
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	212c      	movs	r1, #44	; 0x2c
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	4413      	add	r3, r2
 80052d8:	3361      	adds	r3, #97	; 0x61
 80052da:	2203      	movs	r2, #3
 80052dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	212c      	movs	r1, #44	; 0x2c
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	4413      	add	r3, r2
 80052ea:	333d      	adds	r3, #61	; 0x3d
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d112      	bne.n	8005318 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	212c      	movs	r1, #44	; 0x2c
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	4413      	add	r3, r2
 80052fe:	333c      	adds	r3, #60	; 0x3c
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d108      	bne.n	8005318 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	212c      	movs	r1, #44	; 0x2c
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	4413      	add	r3, r2
 8005312:	333d      	adds	r3, #61	; 0x3d
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	440a      	add	r2, r1
 800532e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005332:	f043 0302 	orr.w	r3, r3, #2
 8005336:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	4611      	mov	r1, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f004 f877 	bl	8009436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	4413      	add	r3, r2
 8005350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005354:	461a      	mov	r2, r3
 8005356:	2310      	movs	r3, #16
 8005358:	6093      	str	r3, [r2, #8]
}
 800535a:	e21b      	b.n	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b80      	cmp	r3, #128	; 0x80
 8005370:	d174      	bne.n	800545c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d121      	bne.n	80053be <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	212c      	movs	r1, #44	; 0x2c
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	4413      	add	r3, r2
 8005386:	3361      	adds	r3, #97	; 0x61
 8005388:	2206      	movs	r2, #6
 800538a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a6:	f043 0302 	orr.w	r3, r3, #2
 80053aa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	4611      	mov	r1, r2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f004 f83d 	bl	8009436 <USB_HC_Halt>
 80053bc:	e044      	b.n	8005448 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	212c      	movs	r1, #44	; 0x2c
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	335c      	adds	r3, #92	; 0x5c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	202c      	movs	r0, #44	; 0x2c
 80053d6:	fb00 f303 	mul.w	r3, r0, r3
 80053da:	440b      	add	r3, r1
 80053dc:	335c      	adds	r3, #92	; 0x5c
 80053de:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	212c      	movs	r1, #44	; 0x2c
 80053e6:	fb01 f303 	mul.w	r3, r1, r3
 80053ea:	4413      	add	r3, r2
 80053ec:	335c      	adds	r3, #92	; 0x5c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d920      	bls.n	8005436 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	212c      	movs	r1, #44	; 0x2c
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	4413      	add	r3, r2
 8005400:	335c      	adds	r3, #92	; 0x5c
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	212c      	movs	r1, #44	; 0x2c
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	4413      	add	r3, r2
 8005412:	3360      	adds	r3, #96	; 0x60
 8005414:	2204      	movs	r2, #4
 8005416:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	b2d9      	uxtb	r1, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	202c      	movs	r0, #44	; 0x2c
 8005422:	fb00 f303 	mul.w	r3, r0, r3
 8005426:	4413      	add	r3, r2
 8005428:	3360      	adds	r3, #96	; 0x60
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f006 f9be 	bl	800b7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005434:	e008      	b.n	8005448 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	212c      	movs	r1, #44	; 0x2c
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	4413      	add	r3, r2
 8005442:	3360      	adds	r3, #96	; 0x60
 8005444:	2202      	movs	r2, #2
 8005446:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005454:	461a      	mov	r2, r3
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	6093      	str	r3, [r2, #8]
}
 800545a:	e19b      	b.n	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005472:	d134      	bne.n	80054de <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	4413      	add	r3, r2
 800547c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	440a      	add	r2, r1
 800548a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800548e:	f043 0302 	orr.w	r3, r3, #2
 8005492:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	4611      	mov	r1, r2
 800549e:	4618      	mov	r0, r3
 80054a0:	f003 ffc9 	bl	8009436 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	461a      	mov	r2, r3
 80054b2:	2310      	movs	r3, #16
 80054b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c2:	461a      	mov	r2, r3
 80054c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	212c      	movs	r1, #44	; 0x2c
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	4413      	add	r3, r2
 80054d6:	3361      	adds	r3, #97	; 0x61
 80054d8:	2208      	movs	r2, #8
 80054da:	701a      	strb	r2, [r3, #0]
}
 80054dc:	e15a      	b.n	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	f040 814f 	bne.w	8005794 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	440a      	add	r2, r1
 800550c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005510:	f023 0302 	bic.w	r3, r3, #2
 8005514:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	212c      	movs	r1, #44	; 0x2c
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	4413      	add	r3, r2
 8005522:	3361      	adds	r3, #97	; 0x61
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d17d      	bne.n	8005626 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	212c      	movs	r1, #44	; 0x2c
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	3360      	adds	r3, #96	; 0x60
 8005538:	2201      	movs	r2, #1
 800553a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	212c      	movs	r1, #44	; 0x2c
 8005542:	fb01 f303 	mul.w	r3, r1, r3
 8005546:	4413      	add	r3, r2
 8005548:	333f      	adds	r3, #63	; 0x3f
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d00a      	beq.n	8005566 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	212c      	movs	r1, #44	; 0x2c
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	4413      	add	r3, r2
 800555c:	333f      	adds	r3, #63	; 0x3f
 800555e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005560:	2b03      	cmp	r3, #3
 8005562:	f040 8100 	bne.w	8005766 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d113      	bne.n	8005596 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	212c      	movs	r1, #44	; 0x2c
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	4413      	add	r3, r2
 800557a:	3355      	adds	r3, #85	; 0x55
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f083 0301 	eor.w	r3, r3, #1
 8005582:	b2d8      	uxtb	r0, r3
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	212c      	movs	r1, #44	; 0x2c
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	4413      	add	r3, r2
 8005590:	3355      	adds	r3, #85	; 0x55
 8005592:	4602      	mov	r2, r0
 8005594:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b01      	cmp	r3, #1
 800559c:	f040 80e3 	bne.w	8005766 <HCD_HC_OUT_IRQHandler+0x7cc>
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	212c      	movs	r1, #44	; 0x2c
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	334c      	adds	r3, #76	; 0x4c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80d8 	beq.w	8005766 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	212c      	movs	r1, #44	; 0x2c
 80055bc:	fb01 f303 	mul.w	r3, r1, r3
 80055c0:	4413      	add	r3, r2
 80055c2:	334c      	adds	r3, #76	; 0x4c
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	202c      	movs	r0, #44	; 0x2c
 80055cc:	fb00 f202 	mul.w	r2, r0, r2
 80055d0:	440a      	add	r2, r1
 80055d2:	3240      	adds	r2, #64	; 0x40
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	4413      	add	r3, r2
 80055d8:	3b01      	subs	r3, #1
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	202c      	movs	r0, #44	; 0x2c
 80055e0:	fb00 f202 	mul.w	r2, r0, r2
 80055e4:	440a      	add	r2, r1
 80055e6:	3240      	adds	r2, #64	; 0x40
 80055e8:	8812      	ldrh	r2, [r2, #0]
 80055ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80b5 	beq.w	8005766 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	212c      	movs	r1, #44	; 0x2c
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	4413      	add	r3, r2
 8005608:	3355      	adds	r3, #85	; 0x55
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f083 0301 	eor.w	r3, r3, #1
 8005610:	b2d8      	uxtb	r0, r3
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	212c      	movs	r1, #44	; 0x2c
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	4413      	add	r3, r2
 800561e:	3355      	adds	r3, #85	; 0x55
 8005620:	4602      	mov	r2, r0
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e09f      	b.n	8005766 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	212c      	movs	r1, #44	; 0x2c
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	3361      	adds	r3, #97	; 0x61
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d109      	bne.n	800564e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	212c      	movs	r1, #44	; 0x2c
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	4413      	add	r3, r2
 8005646:	3360      	adds	r3, #96	; 0x60
 8005648:	2202      	movs	r2, #2
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e08b      	b.n	8005766 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	212c      	movs	r1, #44	; 0x2c
 8005654:	fb01 f303 	mul.w	r3, r1, r3
 8005658:	4413      	add	r3, r2
 800565a:	3361      	adds	r3, #97	; 0x61
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b04      	cmp	r3, #4
 8005660:	d109      	bne.n	8005676 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	212c      	movs	r1, #44	; 0x2c
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	3360      	adds	r3, #96	; 0x60
 8005670:	2202      	movs	r2, #2
 8005672:	701a      	strb	r2, [r3, #0]
 8005674:	e077      	b.n	8005766 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	212c      	movs	r1, #44	; 0x2c
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	3361      	adds	r3, #97	; 0x61
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b05      	cmp	r3, #5
 8005688:	d109      	bne.n	800569e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	212c      	movs	r1, #44	; 0x2c
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	4413      	add	r3, r2
 8005696:	3360      	adds	r3, #96	; 0x60
 8005698:	2205      	movs	r2, #5
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	e063      	b.n	8005766 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	212c      	movs	r1, #44	; 0x2c
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	4413      	add	r3, r2
 80056aa:	3361      	adds	r3, #97	; 0x61
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b06      	cmp	r3, #6
 80056b0:	d009      	beq.n	80056c6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	212c      	movs	r1, #44	; 0x2c
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	4413      	add	r3, r2
 80056be:	3361      	adds	r3, #97	; 0x61
 80056c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d14f      	bne.n	8005766 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	212c      	movs	r1, #44	; 0x2c
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	4413      	add	r3, r2
 80056d2:	335c      	adds	r3, #92	; 0x5c
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	202c      	movs	r0, #44	; 0x2c
 80056de:	fb00 f303 	mul.w	r3, r0, r3
 80056e2:	440b      	add	r3, r1
 80056e4:	335c      	adds	r3, #92	; 0x5c
 80056e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	212c      	movs	r1, #44	; 0x2c
 80056ee:	fb01 f303 	mul.w	r3, r1, r3
 80056f2:	4413      	add	r3, r2
 80056f4:	335c      	adds	r3, #92	; 0x5c
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d912      	bls.n	8005722 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	212c      	movs	r1, #44	; 0x2c
 8005702:	fb01 f303 	mul.w	r3, r1, r3
 8005706:	4413      	add	r3, r2
 8005708:	335c      	adds	r3, #92	; 0x5c
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	212c      	movs	r1, #44	; 0x2c
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	4413      	add	r3, r2
 800571a:	3360      	adds	r3, #96	; 0x60
 800571c:	2204      	movs	r2, #4
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e021      	b.n	8005766 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	212c      	movs	r1, #44	; 0x2c
 8005728:	fb01 f303 	mul.w	r3, r1, r3
 800572c:	4413      	add	r3, r2
 800572e:	3360      	adds	r3, #96	; 0x60
 8005730:	2202      	movs	r2, #2
 8005732:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	4413      	add	r3, r2
 800573c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800574a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005752:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	4413      	add	r3, r2
 800575c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005760:	461a      	mov	r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	4413      	add	r3, r2
 800576e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005772:	461a      	mov	r2, r3
 8005774:	2302      	movs	r3, #2
 8005776:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	b2d9      	uxtb	r1, r3
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	202c      	movs	r0, #44	; 0x2c
 8005782:	fb00 f303 	mul.w	r3, r0, r3
 8005786:	4413      	add	r3, r2
 8005788:	3360      	adds	r3, #96	; 0x60
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f006 f80e 	bl	800b7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005794:	bf00      	nop
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	0c5b      	lsrs	r3, r3, #17
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d004      	beq.n	80057e2 <HCD_RXQLVL_IRQHandler+0x46>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b05      	cmp	r3, #5
 80057dc:	f000 80a9 	beq.w	8005932 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80057e0:	e0aa      	b.n	8005938 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a6 	beq.w	8005936 <HCD_RXQLVL_IRQHandler+0x19a>
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	212c      	movs	r1, #44	; 0x2c
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	4413      	add	r3, r2
 80057f6:	3344      	adds	r3, #68	; 0x44
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 809b 	beq.w	8005936 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	212c      	movs	r1, #44	; 0x2c
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	4413      	add	r3, r2
 800580c:	3350      	adds	r3, #80	; 0x50
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	441a      	add	r2, r3
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	202c      	movs	r0, #44	; 0x2c
 800581a:	fb00 f303 	mul.w	r3, r0, r3
 800581e:	440b      	add	r3, r1
 8005820:	334c      	adds	r3, #76	; 0x4c
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d87a      	bhi.n	800591e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	212c      	movs	r1, #44	; 0x2c
 8005832:	fb01 f303 	mul.w	r3, r1, r3
 8005836:	4413      	add	r3, r2
 8005838:	3344      	adds	r3, #68	; 0x44
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	b292      	uxth	r2, r2
 8005840:	4619      	mov	r1, r3
 8005842:	f003 f971 	bl	8008b28 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	212c      	movs	r1, #44	; 0x2c
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	3344      	adds	r3, #68	; 0x44
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	441a      	add	r2, r3
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	202c      	movs	r0, #44	; 0x2c
 8005860:	fb00 f303 	mul.w	r3, r0, r3
 8005864:	440b      	add	r3, r1
 8005866:	3344      	adds	r3, #68	; 0x44
 8005868:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	212c      	movs	r1, #44	; 0x2c
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	4413      	add	r3, r2
 8005876:	3350      	adds	r3, #80	; 0x50
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	441a      	add	r2, r3
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	202c      	movs	r0, #44	; 0x2c
 8005884:	fb00 f303 	mul.w	r3, r0, r3
 8005888:	440b      	add	r3, r1
 800588a:	3350      	adds	r3, #80	; 0x50
 800588c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	4413      	add	r3, r2
 8005896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	0cdb      	lsrs	r3, r3, #19
 800589e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	212c      	movs	r1, #44	; 0x2c
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	4413      	add	r3, r2
 80058b0:	3340      	adds	r3, #64	; 0x40
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d13c      	bne.n	8005936 <HCD_RXQLVL_IRQHandler+0x19a>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d039      	beq.n	8005936 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058d8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058e0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	461a      	mov	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	212c      	movs	r1, #44	; 0x2c
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	4413      	add	r3, r2
 8005900:	3354      	adds	r3, #84	; 0x54
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	f083 0301 	eor.w	r3, r3, #1
 8005908:	b2d8      	uxtb	r0, r3
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	212c      	movs	r1, #44	; 0x2c
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	4413      	add	r3, r2
 8005916:	3354      	adds	r3, #84	; 0x54
 8005918:	4602      	mov	r2, r0
 800591a:	701a      	strb	r2, [r3, #0]
      break;
 800591c:	e00b      	b.n	8005936 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	212c      	movs	r1, #44	; 0x2c
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	4413      	add	r3, r2
 800592a:	3360      	adds	r3, #96	; 0x60
 800592c:	2204      	movs	r2, #4
 800592e:	701a      	strb	r2, [r3, #0]
      break;
 8005930:	e001      	b.n	8005936 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005936:	bf00      	nop
  }
}
 8005938:	bf00      	nop
 800593a:	3728      	adds	r7, #40	; 0x28
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800596c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b02      	cmp	r3, #2
 8005976:	d10b      	bne.n	8005990 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b01      	cmp	r3, #1
 8005980:	d102      	bne.n	8005988 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f005 fef8 	bl	800b778 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f043 0302 	orr.w	r3, r3, #2
 800598e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b08      	cmp	r3, #8
 8005998:	d132      	bne.n	8005a00 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f043 0308 	orr.w	r3, r3, #8
 80059a0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d126      	bne.n	80059fa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d113      	bne.n	80059dc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80059ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059be:	d106      	bne.n	80059ce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2102      	movs	r1, #2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f003 fa0e 	bl	8008de8 <USB_InitFSLSPClkSel>
 80059cc:	e011      	b.n	80059f2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2101      	movs	r1, #1
 80059d4:	4618      	mov	r0, r3
 80059d6:	f003 fa07 	bl	8008de8 <USB_InitFSLSPClkSel>
 80059da:	e00a      	b.n	80059f2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d106      	bne.n	80059f2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ea:	461a      	mov	r2, r3
 80059ec:	f64e 2360 	movw	r3, #60000	; 0xea60
 80059f0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f005 feea 	bl	800b7cc <HAL_HCD_PortEnabled_Callback>
 80059f8:	e002      	b.n	8005a00 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f005 fef4 	bl	800b7e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d103      	bne.n	8005a12 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f043 0320 	orr.w	r3, r3, #32
 8005a10:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a18:	461a      	mov	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6013      	str	r3, [r2, #0]
}
 8005a1e:	bf00      	nop
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e1be      	b.n	8005db8 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a9f      	ldr	r2, [pc, #636]	; (8005cbc <HAL_I2C_Init+0x294>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00e      	beq.n	8005a62 <HAL_I2C_Init+0x3a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a9d      	ldr	r2, [pc, #628]	; (8005cc0 <HAL_I2C_Init+0x298>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d009      	beq.n	8005a62 <HAL_I2C_Init+0x3a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a9c      	ldr	r2, [pc, #624]	; (8005cc4 <HAL_I2C_Init+0x29c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <HAL_I2C_Init+0x3a>
 8005a58:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005a5c:	489a      	ldr	r0, [pc, #616]	; (8005cc8 <HAL_I2C_Init+0x2a0>)
 8005a5e:	f7fb fe18 	bl	8001692 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <HAL_I2C_Init+0x4c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	4a97      	ldr	r2, [pc, #604]	; (8005ccc <HAL_I2C_Init+0x2a4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d904      	bls.n	8005a7e <HAL_I2C_Init+0x56>
 8005a74:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005a78:	4893      	ldr	r0, [pc, #588]	; (8005cc8 <HAL_I2C_Init+0x2a0>)
 8005a7a:	f7fb fe0a 	bl	8001692 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <HAL_I2C_Init+0x72>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a8e:	d004      	beq.n	8005a9a <HAL_I2C_Init+0x72>
 8005a90:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005a94:	488c      	ldr	r0, [pc, #560]	; (8005cc8 <HAL_I2C_Init+0x2a0>)
 8005a96:	f7fb fdfc 	bl	8001692 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <HAL_I2C_Init+0x8c>
 8005aaa:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8005aae:	4886      	ldr	r0, [pc, #536]	; (8005cc8 <HAL_I2C_Init+0x2a0>)
 8005ab0:	f7fb fdef 	bl	8001692 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005abc:	d009      	beq.n	8005ad2 <HAL_I2C_Init+0xaa>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ac6:	d004      	beq.n	8005ad2 <HAL_I2C_Init+0xaa>
 8005ac8:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005acc:	487e      	ldr	r0, [pc, #504]	; (8005cc8 <HAL_I2C_Init+0x2a0>)
 8005ace:	f7fb fde0 	bl	8001692 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_I2C_Init+0xc4>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d004      	beq.n	8005aec <HAL_I2C_Init+0xc4>
 8005ae2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005ae6:	4878      	ldr	r0, [pc, #480]	; (8005cc8 <HAL_I2C_Init+0x2a0>)
 8005ae8:	f7fb fdd3 	bl	8001692 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <HAL_I2C_Init+0xda>
 8005af8:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005afc:	4872      	ldr	r0, [pc, #456]	; (8005cc8 <HAL_I2C_Init+0x2a0>)
 8005afe:	f7fb fdc8 	bl	8001692 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <HAL_I2C_Init+0xf4>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	2b40      	cmp	r3, #64	; 0x40
 8005b10:	d004      	beq.n	8005b1c <HAL_I2C_Init+0xf4>
 8005b12:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005b16:	486c      	ldr	r0, [pc, #432]	; (8005cc8 <HAL_I2C_Init+0x2a0>)
 8005b18:	f7fb fdbb 	bl	8001692 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_I2C_Init+0x10e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d004      	beq.n	8005b36 <HAL_I2C_Init+0x10e>
 8005b2c:	f240 11c7 	movw	r1, #455	; 0x1c7
 8005b30:	4865      	ldr	r0, [pc, #404]	; (8005cc8 <HAL_I2C_Init+0x2a0>)
 8005b32:	f7fb fdae 	bl	8001692 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fb fc92 	bl	8001474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2224      	movs	r2, #36	; 0x24
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b88:	f000 febe 	bl	8006908 <HAL_RCC_GetPCLK1Freq>
 8005b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4a4f      	ldr	r2, [pc, #316]	; (8005cd0 <HAL_I2C_Init+0x2a8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d807      	bhi.n	8005ba8 <HAL_I2C_Init+0x180>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a4e      	ldr	r2, [pc, #312]	; (8005cd4 <HAL_I2C_Init+0x2ac>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	bf94      	ite	ls
 8005ba0:	2301      	movls	r3, #1
 8005ba2:	2300      	movhi	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	e006      	b.n	8005bb6 <HAL_I2C_Init+0x18e>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a4b      	ldr	r2, [pc, #300]	; (8005cd8 <HAL_I2C_Init+0x2b0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	bf94      	ite	ls
 8005bb0:	2301      	movls	r3, #1
 8005bb2:	2300      	movhi	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e0fc      	b.n	8005db8 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4a46      	ldr	r2, [pc, #280]	; (8005cdc <HAL_I2C_Init+0x2b4>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	0c9b      	lsrs	r3, r3, #18
 8005bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	4a38      	ldr	r2, [pc, #224]	; (8005cd0 <HAL_I2C_Init+0x2a8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d802      	bhi.n	8005bf8 <HAL_I2C_Init+0x1d0>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	e009      	b.n	8005c0c <HAL_I2C_Init+0x1e4>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	4a37      	ldr	r2, [pc, #220]	; (8005ce0 <HAL_I2C_Init+0x2b8>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	099b      	lsrs	r3, r3, #6
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	430b      	orrs	r3, r1
 8005c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	492a      	ldr	r1, [pc, #168]	; (8005cd0 <HAL_I2C_Init+0x2a8>)
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	d819      	bhi.n	8005c60 <HAL_I2C_Init+0x238>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1e59      	subs	r1, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c40:	400b      	ands	r3, r1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_I2C_Init+0x234>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1e59      	subs	r1, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c54:	3301      	adds	r3, #1
 8005c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c5a:	e066      	b.n	8005d2a <HAL_I2C_Init+0x302>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	e064      	b.n	8005d2a <HAL_I2C_Init+0x302>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d111      	bne.n	8005c8c <HAL_I2C_Init+0x264>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	1e58      	subs	r0, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6859      	ldr	r1, [r3, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	440b      	add	r3, r1
 8005c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	e012      	b.n	8005cb2 <HAL_I2C_Init+0x28a>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1e58      	subs	r0, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6859      	ldr	r1, [r3, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	0099      	lsls	r1, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <HAL_I2C_Init+0x2bc>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e037      	b.n	8005d2a <HAL_I2C_Init+0x302>
 8005cba:	bf00      	nop
 8005cbc:	40005400 	.word	0x40005400
 8005cc0:	40005800 	.word	0x40005800
 8005cc4:	40005c00 	.word	0x40005c00
 8005cc8:	08010610 	.word	0x08010610
 8005ccc:	00061a80 	.word	0x00061a80
 8005cd0:	000186a0 	.word	0x000186a0
 8005cd4:	001e847f 	.word	0x001e847f
 8005cd8:	003d08ff 	.word	0x003d08ff
 8005cdc:	431bde83 	.word	0x431bde83
 8005ce0:	10624dd3 	.word	0x10624dd3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10e      	bne.n	8005d0a <HAL_I2C_Init+0x2e2>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1e58      	subs	r0, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	440b      	add	r3, r1
 8005cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cfe:	3301      	adds	r3, #1
 8005d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d08:	e00f      	b.n	8005d2a <HAL_I2C_Init+0x302>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1e58      	subs	r0, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6859      	ldr	r1, [r3, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	0099      	lsls	r1, r3, #2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d20:	3301      	adds	r3, #1
 8005d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	6809      	ldr	r1, [r1, #0]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6911      	ldr	r1, [r2, #16]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	68d2      	ldr	r2, [r2, #12]
 8005d64:	4311      	orrs	r1, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695a      	ldr	r2, [r3, #20]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0201 	orr.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e316      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	d903      	bls.n	8005de2 <HAL_RCC_OscConfig+0x22>
 8005dda:	21e8      	movs	r1, #232	; 0xe8
 8005ddc:	48a3      	ldr	r0, [pc, #652]	; (800606c <HAL_RCC_OscConfig+0x2ac>)
 8005dde:	f7fb fc58 	bl	8001692 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 8088 	beq.w	8005f00 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00d      	beq.n	8005e14 <HAL_RCC_OscConfig+0x54>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e00:	d008      	beq.n	8005e14 <HAL_RCC_OscConfig+0x54>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e0a:	d003      	beq.n	8005e14 <HAL_RCC_OscConfig+0x54>
 8005e0c:	21ed      	movs	r1, #237	; 0xed
 8005e0e:	4897      	ldr	r0, [pc, #604]	; (800606c <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	f7fb fc3f 	bl	8001692 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e14:	4b96      	ldr	r3, [pc, #600]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 030c 	and.w	r3, r3, #12
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d00c      	beq.n	8005e3a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e20:	4b93      	ldr	r3, [pc, #588]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e28:	2b08      	cmp	r3, #8
 8005e2a:	d112      	bne.n	8005e52 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e2c:	4b90      	ldr	r3, [pc, #576]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e38:	d10b      	bne.n	8005e52 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e3a:	4b8d      	ldr	r3, [pc, #564]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d05b      	beq.n	8005efe <HAL_RCC_OscConfig+0x13e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d157      	bne.n	8005efe <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e2d6      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5a:	d106      	bne.n	8005e6a <HAL_RCC_OscConfig+0xaa>
 8005e5c:	4b84      	ldr	r3, [pc, #528]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a83      	ldr	r2, [pc, #524]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	e01d      	b.n	8005ea6 <HAL_RCC_OscConfig+0xe6>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e72:	d10c      	bne.n	8005e8e <HAL_RCC_OscConfig+0xce>
 8005e74:	4b7e      	ldr	r3, [pc, #504]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a7d      	ldr	r2, [pc, #500]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4b7b      	ldr	r3, [pc, #492]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a7a      	ldr	r2, [pc, #488]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	e00b      	b.n	8005ea6 <HAL_RCC_OscConfig+0xe6>
 8005e8e:	4b78      	ldr	r3, [pc, #480]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a77      	ldr	r2, [pc, #476]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	4b75      	ldr	r3, [pc, #468]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a74      	ldr	r2, [pc, #464]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ea4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d013      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eae:	f7fb fffb 	bl	8001ea8 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eb6:	f7fb fff7 	bl	8001ea8 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b64      	cmp	r3, #100	; 0x64
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e29b      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec8:	4b69      	ldr	r3, [pc, #420]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <HAL_RCC_OscConfig+0xf6>
 8005ed4:	e014      	b.n	8005f00 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed6:	f7fb ffe7 	bl	8001ea8 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ede:	f7fb ffe3 	bl	8001ea8 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b64      	cmp	r3, #100	; 0x64
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e287      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ef0:	4b5f      	ldr	r3, [pc, #380]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f0      	bne.n	8005ede <HAL_RCC_OscConfig+0x11e>
 8005efc:	e000      	b.n	8005f00 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005efe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d079      	beq.n	8006000 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <HAL_RCC_OscConfig+0x166>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d004      	beq.n	8005f26 <HAL_RCC_OscConfig+0x166>
 8005f1c:	f240 111f 	movw	r1, #287	; 0x11f
 8005f20:	4852      	ldr	r0, [pc, #328]	; (800606c <HAL_RCC_OscConfig+0x2ac>)
 8005f22:	f7fb fbb6 	bl	8001692 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b1f      	cmp	r3, #31
 8005f2c:	d904      	bls.n	8005f38 <HAL_RCC_OscConfig+0x178>
 8005f2e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8005f32:	484e      	ldr	r0, [pc, #312]	; (800606c <HAL_RCC_OscConfig+0x2ac>)
 8005f34:	f7fb fbad 	bl	8001692 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f38:	4b4d      	ldr	r3, [pc, #308]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 030c 	and.w	r3, r3, #12
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f44:	4b4a      	ldr	r3, [pc, #296]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d11c      	bne.n	8005f8a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f50:	4b47      	ldr	r3, [pc, #284]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d116      	bne.n	8005f8a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f5c:	4b44      	ldr	r3, [pc, #272]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_RCC_OscConfig+0x1b4>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d001      	beq.n	8005f74 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e245      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f74:	4b3e      	ldr	r3, [pc, #248]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	493b      	ldr	r1, [pc, #236]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f88:	e03a      	b.n	8006000 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d020      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f92:	4b38      	ldr	r3, [pc, #224]	; (8006074 <HAL_RCC_OscConfig+0x2b4>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fb ff86 	bl	8001ea8 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa0:	f7fb ff82 	bl	8001ea8 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e226      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb2:	4b2f      	ldr	r3, [pc, #188]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fbe:	4b2c      	ldr	r3, [pc, #176]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4928      	ldr	r1, [pc, #160]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	600b      	str	r3, [r1, #0]
 8005fd2:	e015      	b.n	8006000 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fd4:	4b27      	ldr	r3, [pc, #156]	; (8006074 <HAL_RCC_OscConfig+0x2b4>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fda:	f7fb ff65 	bl	8001ea8 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fe2:	f7fb ff61 	bl	8001ea8 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e205      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ff4:	4b1e      	ldr	r3, [pc, #120]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f0      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0308 	and.w	r3, r3, #8
 8006008:	2b00      	cmp	r3, #0
 800600a:	d046      	beq.n	800609a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_RCC_OscConfig+0x266>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d004      	beq.n	8006026 <HAL_RCC_OscConfig+0x266>
 800601c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006020:	4812      	ldr	r0, [pc, #72]	; (800606c <HAL_RCC_OscConfig+0x2ac>)
 8006022:	f7fb fb36 	bl	8001692 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d016      	beq.n	800605c <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800602e:	4b12      	ldr	r3, [pc, #72]	; (8006078 <HAL_RCC_OscConfig+0x2b8>)
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006034:	f7fb ff38 	bl	8001ea8 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800603c:	f7fb ff34 	bl	8001ea8 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e1d8      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <HAL_RCC_OscConfig+0x2b0>)
 8006050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCC_OscConfig+0x27c>
 800605a:	e01e      	b.n	800609a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <HAL_RCC_OscConfig+0x2b8>)
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006062:	f7fb ff21 	bl	8001ea8 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006068:	e011      	b.n	800608e <HAL_RCC_OscConfig+0x2ce>
 800606a:	bf00      	nop
 800606c:	08010648 	.word	0x08010648
 8006070:	40023800 	.word	0x40023800
 8006074:	42470000 	.word	0x42470000
 8006078:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800607c:	f7fb ff14 	bl	8001ea8 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e1b8      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800608e:	4b97      	ldr	r3, [pc, #604]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 8006090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 80a8 	beq.w	80061f8 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060a8:	2300      	movs	r3, #0
 80060aa:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00c      	beq.n	80060ce <HAL_RCC_OscConfig+0x30e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d008      	beq.n	80060ce <HAL_RCC_OscConfig+0x30e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b05      	cmp	r3, #5
 80060c2:	d004      	beq.n	80060ce <HAL_RCC_OscConfig+0x30e>
 80060c4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80060c8:	4889      	ldr	r0, [pc, #548]	; (80062f0 <HAL_RCC_OscConfig+0x530>)
 80060ca:	f7fb fae2 	bl	8001692 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ce:	4b87      	ldr	r3, [pc, #540]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10f      	bne.n	80060fa <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	4b83      	ldr	r3, [pc, #524]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	4a82      	ldr	r2, [pc, #520]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 80060e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e8:	6413      	str	r3, [r2, #64]	; 0x40
 80060ea:	4b80      	ldr	r3, [pc, #512]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f2:	60bb      	str	r3, [r7, #8]
 80060f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fa:	4b7e      	ldr	r3, [pc, #504]	; (80062f4 <HAL_RCC_OscConfig+0x534>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d118      	bne.n	8006138 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006106:	4b7b      	ldr	r3, [pc, #492]	; (80062f4 <HAL_RCC_OscConfig+0x534>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a7a      	ldr	r2, [pc, #488]	; (80062f4 <HAL_RCC_OscConfig+0x534>)
 800610c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006112:	f7fb fec9 	bl	8001ea8 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800611a:	f7fb fec5 	bl	8001ea8 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e169      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612c:	4b71      	ldr	r3, [pc, #452]	; (80062f4 <HAL_RCC_OscConfig+0x534>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f0      	beq.n	800611a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d106      	bne.n	800614e <HAL_RCC_OscConfig+0x38e>
 8006140:	4b6a      	ldr	r3, [pc, #424]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	4a69      	ldr	r2, [pc, #420]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	6713      	str	r3, [r2, #112]	; 0x70
 800614c:	e01c      	b.n	8006188 <HAL_RCC_OscConfig+0x3c8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b05      	cmp	r3, #5
 8006154:	d10c      	bne.n	8006170 <HAL_RCC_OscConfig+0x3b0>
 8006156:	4b65      	ldr	r3, [pc, #404]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	4a64      	ldr	r2, [pc, #400]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 800615c:	f043 0304 	orr.w	r3, r3, #4
 8006160:	6713      	str	r3, [r2, #112]	; 0x70
 8006162:	4b62      	ldr	r3, [pc, #392]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006166:	4a61      	ldr	r2, [pc, #388]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 8006168:	f043 0301 	orr.w	r3, r3, #1
 800616c:	6713      	str	r3, [r2, #112]	; 0x70
 800616e:	e00b      	b.n	8006188 <HAL_RCC_OscConfig+0x3c8>
 8006170:	4b5e      	ldr	r3, [pc, #376]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006174:	4a5d      	ldr	r2, [pc, #372]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	; 0x70
 800617c:	4b5b      	ldr	r3, [pc, #364]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 800617e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006180:	4a5a      	ldr	r2, [pc, #360]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 8006182:	f023 0304 	bic.w	r3, r3, #4
 8006186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d015      	beq.n	80061bc <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006190:	f7fb fe8a 	bl	8001ea8 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006196:	e00a      	b.n	80061ae <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006198:	f7fb fe86 	bl	8001ea8 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e128      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ae:	4b4f      	ldr	r3, [pc, #316]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0ee      	beq.n	8006198 <HAL_RCC_OscConfig+0x3d8>
 80061ba:	e014      	b.n	80061e6 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061bc:	f7fb fe74 	bl	8001ea8 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061c2:	e00a      	b.n	80061da <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061c4:	f7fb fe70 	bl	8001ea8 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e112      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061da:	4b44      	ldr	r3, [pc, #272]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1ee      	bne.n	80061c4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d105      	bne.n	80061f8 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ec:	4b3f      	ldr	r3, [pc, #252]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	4a3e      	ldr	r2, [pc, #248]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 80061f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00c      	beq.n	800621a <HAL_RCC_OscConfig+0x45a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d008      	beq.n	800621a <HAL_RCC_OscConfig+0x45a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d004      	beq.n	800621a <HAL_RCC_OscConfig+0x45a>
 8006210:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006214:	4836      	ldr	r0, [pc, #216]	; (80062f0 <HAL_RCC_OscConfig+0x530>)
 8006216:	f7fb fa3c 	bl	8001692 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80ed 	beq.w	80063fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006224:	4b31      	ldr	r3, [pc, #196]	; (80062ec <HAL_RCC_OscConfig+0x52c>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 030c 	and.w	r3, r3, #12
 800622c:	2b08      	cmp	r3, #8
 800622e:	f000 80ae 	beq.w	800638e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b02      	cmp	r3, #2
 8006238:	f040 8092 	bne.w	8006360 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <HAL_RCC_OscConfig+0x498>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800624c:	d004      	beq.n	8006258 <HAL_RCC_OscConfig+0x498>
 800624e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8006252:	4827      	ldr	r0, [pc, #156]	; (80062f0 <HAL_RCC_OscConfig+0x530>)
 8006254:	f7fb fa1d 	bl	8001692 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	2b3f      	cmp	r3, #63	; 0x3f
 800625e:	d904      	bls.n	800626a <HAL_RCC_OscConfig+0x4aa>
 8006260:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006264:	4822      	ldr	r0, [pc, #136]	; (80062f0 <HAL_RCC_OscConfig+0x530>)
 8006266:	f7fb fa14 	bl	8001692 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b31      	cmp	r3, #49	; 0x31
 8006270:	d904      	bls.n	800627c <HAL_RCC_OscConfig+0x4bc>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800627a:	d904      	bls.n	8006286 <HAL_RCC_OscConfig+0x4c6>
 800627c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006280:	481b      	ldr	r0, [pc, #108]	; (80062f0 <HAL_RCC_OscConfig+0x530>)
 8006282:	f7fb fa06 	bl	8001692 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	2b02      	cmp	r3, #2
 800628c:	d010      	beq.n	80062b0 <HAL_RCC_OscConfig+0x4f0>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	2b04      	cmp	r3, #4
 8006294:	d00c      	beq.n	80062b0 <HAL_RCC_OscConfig+0x4f0>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	2b06      	cmp	r3, #6
 800629c:	d008      	beq.n	80062b0 <HAL_RCC_OscConfig+0x4f0>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d004      	beq.n	80062b0 <HAL_RCC_OscConfig+0x4f0>
 80062a6:	f240 11db 	movw	r1, #475	; 0x1db
 80062aa:	4811      	ldr	r0, [pc, #68]	; (80062f0 <HAL_RCC_OscConfig+0x530>)
 80062ac:	f7fb f9f1 	bl	8001692 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d903      	bls.n	80062c0 <HAL_RCC_OscConfig+0x500>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	2b0f      	cmp	r3, #15
 80062be:	d904      	bls.n	80062ca <HAL_RCC_OscConfig+0x50a>
 80062c0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80062c4:	480a      	ldr	r0, [pc, #40]	; (80062f0 <HAL_RCC_OscConfig+0x530>)
 80062c6:	f7fb f9e4 	bl	8001692 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ca:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <HAL_RCC_OscConfig+0x538>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d0:	f7fb fdea 	bl	8001ea8 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d6:	e011      	b.n	80062fc <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062d8:	f7fb fde6 	bl	8001ea8 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d90a      	bls.n	80062fc <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e08a      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
 80062ea:	bf00      	nop
 80062ec:	40023800 	.word	0x40023800
 80062f0:	08010648 	.word	0x08010648
 80062f4:	40007000 	.word	0x40007000
 80062f8:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062fc:	4b42      	ldr	r3, [pc, #264]	; (8006408 <HAL_RCC_OscConfig+0x648>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e7      	bne.n	80062d8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	019b      	lsls	r3, r3, #6
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	3b01      	subs	r3, #1
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	061b      	lsls	r3, r3, #24
 800632c:	4936      	ldr	r1, [pc, #216]	; (8006408 <HAL_RCC_OscConfig+0x648>)
 800632e:	4313      	orrs	r3, r2
 8006330:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006332:	4b36      	ldr	r3, [pc, #216]	; (800640c <HAL_RCC_OscConfig+0x64c>)
 8006334:	2201      	movs	r2, #1
 8006336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006338:	f7fb fdb6 	bl	8001ea8 <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006340:	f7fb fdb2 	bl	8001ea8 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e056      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006352:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <HAL_RCC_OscConfig+0x648>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f0      	beq.n	8006340 <HAL_RCC_OscConfig+0x580>
 800635e:	e04e      	b.n	80063fe <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006360:	4b2a      	ldr	r3, [pc, #168]	; (800640c <HAL_RCC_OscConfig+0x64c>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006366:	f7fb fd9f 	bl	8001ea8 <HAL_GetTick>
 800636a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800636c:	e008      	b.n	8006380 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800636e:	f7fb fd9b 	bl	8001ea8 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e03f      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006380:	4b21      	ldr	r3, [pc, #132]	; (8006408 <HAL_RCC_OscConfig+0x648>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1f0      	bne.n	800636e <HAL_RCC_OscConfig+0x5ae>
 800638c:	e037      	b.n	80063fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e032      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800639a:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <HAL_RCC_OscConfig+0x648>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d028      	beq.n	80063fa <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d121      	bne.n	80063fa <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d11a      	bne.n	80063fa <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063ca:	4013      	ands	r3, r2
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d111      	bne.n	80063fa <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	085b      	lsrs	r3, r3, #1
 80063e2:	3b01      	subs	r3, #1
 80063e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d107      	bne.n	80063fa <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d001      	beq.n	80063fe <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40023800 	.word	0x40023800
 800640c:	42470060 	.word	0x42470060

08006410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e174      	b.n	800670e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_RCC_ClockConfig+0x24>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b0f      	cmp	r3, #15
 8006432:	d904      	bls.n	800643e <HAL_RCC_ClockConfig+0x2e>
 8006434:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8006438:	487b      	ldr	r0, [pc, #492]	; (8006628 <HAL_RCC_ClockConfig+0x218>)
 800643a:	f7fb f92a 	bl	8001692 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d019      	beq.n	8006478 <HAL_RCC_ClockConfig+0x68>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d016      	beq.n	8006478 <HAL_RCC_ClockConfig+0x68>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d013      	beq.n	8006478 <HAL_RCC_ClockConfig+0x68>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b03      	cmp	r3, #3
 8006454:	d010      	beq.n	8006478 <HAL_RCC_ClockConfig+0x68>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b04      	cmp	r3, #4
 800645a:	d00d      	beq.n	8006478 <HAL_RCC_ClockConfig+0x68>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b05      	cmp	r3, #5
 8006460:	d00a      	beq.n	8006478 <HAL_RCC_ClockConfig+0x68>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b06      	cmp	r3, #6
 8006466:	d007      	beq.n	8006478 <HAL_RCC_ClockConfig+0x68>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b07      	cmp	r3, #7
 800646c:	d004      	beq.n	8006478 <HAL_RCC_ClockConfig+0x68>
 800646e:	f240 215d 	movw	r1, #605	; 0x25d
 8006472:	486d      	ldr	r0, [pc, #436]	; (8006628 <HAL_RCC_ClockConfig+0x218>)
 8006474:	f7fb f90d 	bl	8001692 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006478:	4b6c      	ldr	r3, [pc, #432]	; (800662c <HAL_RCC_ClockConfig+0x21c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d90c      	bls.n	80064a0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006486:	4b69      	ldr	r3, [pc, #420]	; (800662c <HAL_RCC_ClockConfig+0x21c>)
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800648e:	4b67      	ldr	r3, [pc, #412]	; (800662c <HAL_RCC_ClockConfig+0x21c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d001      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e136      	b.n	800670e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d049      	beq.n	8006540 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064b8:	4b5d      	ldr	r3, [pc, #372]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4a5c      	ldr	r2, [pc, #368]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 80064be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d0:	4b57      	ldr	r3, [pc, #348]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	4a56      	ldr	r2, [pc, #344]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 80064d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d024      	beq.n	800652e <HAL_RCC_ClockConfig+0x11e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b80      	cmp	r3, #128	; 0x80
 80064ea:	d020      	beq.n	800652e <HAL_RCC_ClockConfig+0x11e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2b90      	cmp	r3, #144	; 0x90
 80064f2:	d01c      	beq.n	800652e <HAL_RCC_ClockConfig+0x11e>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	2ba0      	cmp	r3, #160	; 0xa0
 80064fa:	d018      	beq.n	800652e <HAL_RCC_ClockConfig+0x11e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2bb0      	cmp	r3, #176	; 0xb0
 8006502:	d014      	beq.n	800652e <HAL_RCC_ClockConfig+0x11e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2bc0      	cmp	r3, #192	; 0xc0
 800650a:	d010      	beq.n	800652e <HAL_RCC_ClockConfig+0x11e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2bd0      	cmp	r3, #208	; 0xd0
 8006512:	d00c      	beq.n	800652e <HAL_RCC_ClockConfig+0x11e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2be0      	cmp	r3, #224	; 0xe0
 800651a:	d008      	beq.n	800652e <HAL_RCC_ClockConfig+0x11e>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	2bf0      	cmp	r3, #240	; 0xf0
 8006522:	d004      	beq.n	800652e <HAL_RCC_ClockConfig+0x11e>
 8006524:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006528:	483f      	ldr	r0, [pc, #252]	; (8006628 <HAL_RCC_ClockConfig+0x218>)
 800652a:	f7fb f8b2 	bl	8001692 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800652e:	4b40      	ldr	r3, [pc, #256]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	493d      	ldr	r1, [pc, #244]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 800653c:	4313      	orrs	r3, r2
 800653e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d059      	beq.n	8006600 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d010      	beq.n	8006576 <HAL_RCC_ClockConfig+0x166>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d00c      	beq.n	8006576 <HAL_RCC_ClockConfig+0x166>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d008      	beq.n	8006576 <HAL_RCC_ClockConfig+0x166>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2b03      	cmp	r3, #3
 800656a:	d004      	beq.n	8006576 <HAL_RCC_ClockConfig+0x166>
 800656c:	f240 2187 	movw	r1, #647	; 0x287
 8006570:	482d      	ldr	r0, [pc, #180]	; (8006628 <HAL_RCC_ClockConfig+0x218>)
 8006572:	f7fb f88e 	bl	8001692 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d107      	bne.n	800658e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800657e:	4b2c      	ldr	r3, [pc, #176]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d119      	bne.n	80065be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e0bf      	b.n	800670e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d003      	beq.n	800659e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800659a:	2b03      	cmp	r3, #3
 800659c:	d107      	bne.n	80065ae <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d109      	bne.n	80065be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e0af      	b.n	800670e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ae:	4b20      	ldr	r3, [pc, #128]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e0a7      	b.n	800670e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065be:	4b1c      	ldr	r3, [pc, #112]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f023 0203 	bic.w	r2, r3, #3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	4919      	ldr	r1, [pc, #100]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d0:	f7fb fc6a 	bl	8001ea8 <HAL_GetTick>
 80065d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d6:	e00a      	b.n	80065ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d8:	f7fb fc66 	bl	8001ea8 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e08f      	b.n	800670e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ee:	4b10      	ldr	r3, [pc, #64]	; (8006630 <HAL_RCC_ClockConfig+0x220>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 020c 	and.w	r2, r3, #12
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d1eb      	bne.n	80065d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006600:	4b0a      	ldr	r3, [pc, #40]	; (800662c <HAL_RCC_ClockConfig+0x21c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d212      	bcs.n	8006634 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <HAL_RCC_ClockConfig+0x21c>)
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006616:	4b05      	ldr	r3, [pc, #20]	; (800662c <HAL_RCC_ClockConfig+0x21c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d007      	beq.n	8006634 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e072      	b.n	800670e <HAL_RCC_ClockConfig+0x2fe>
 8006628:	08010648 	.word	0x08010648
 800662c:	40023c00 	.word	0x40023c00
 8006630:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d025      	beq.n	800668c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d018      	beq.n	800667a <HAL_RCC_ClockConfig+0x26a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006650:	d013      	beq.n	800667a <HAL_RCC_ClockConfig+0x26a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800665a:	d00e      	beq.n	800667a <HAL_RCC_ClockConfig+0x26a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006664:	d009      	beq.n	800667a <HAL_RCC_ClockConfig+0x26a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800666e:	d004      	beq.n	800667a <HAL_RCC_ClockConfig+0x26a>
 8006670:	f240 21c5 	movw	r1, #709	; 0x2c5
 8006674:	4828      	ldr	r0, [pc, #160]	; (8006718 <HAL_RCC_ClockConfig+0x308>)
 8006676:	f7fb f80c 	bl	8001692 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800667a:	4b28      	ldr	r3, [pc, #160]	; (800671c <HAL_RCC_ClockConfig+0x30c>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	4925      	ldr	r1, [pc, #148]	; (800671c <HAL_RCC_ClockConfig+0x30c>)
 8006688:	4313      	orrs	r3, r2
 800668a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d026      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d018      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x2c2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a8:	d013      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x2c2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066b2:	d00e      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x2c2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80066bc:	d009      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x2c2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80066c6:	d004      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x2c2>
 80066c8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80066cc:	4812      	ldr	r0, [pc, #72]	; (8006718 <HAL_RCC_ClockConfig+0x308>)
 80066ce:	f7fa ffe0 	bl	8001692 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066d2:	4b12      	ldr	r3, [pc, #72]	; (800671c <HAL_RCC_ClockConfig+0x30c>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	490e      	ldr	r1, [pc, #56]	; (800671c <HAL_RCC_ClockConfig+0x30c>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066e6:	f000 f821 	bl	800672c <HAL_RCC_GetSysClockFreq>
 80066ea:	4602      	mov	r2, r0
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <HAL_RCC_ClockConfig+0x30c>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	091b      	lsrs	r3, r3, #4
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	490a      	ldr	r1, [pc, #40]	; (8006720 <HAL_RCC_ClockConfig+0x310>)
 80066f8:	5ccb      	ldrb	r3, [r1, r3]
 80066fa:	fa22 f303 	lsr.w	r3, r2, r3
 80066fe:	4a09      	ldr	r2, [pc, #36]	; (8006724 <HAL_RCC_ClockConfig+0x314>)
 8006700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006702:	4b09      	ldr	r3, [pc, #36]	; (8006728 <HAL_RCC_ClockConfig+0x318>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f7fb fb8a 	bl	8001e20 <HAL_InitTick>

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	08010648 	.word	0x08010648
 800671c:	40023800 	.word	0x40023800
 8006720:	0801076c 	.word	0x0801076c
 8006724:	20000000 	.word	0x20000000
 8006728:	20000004 	.word	0x20000004

0800672c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800672c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	2300      	movs	r3, #0
 800673e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006744:	4b67      	ldr	r3, [pc, #412]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 030c 	and.w	r3, r3, #12
 800674c:	2b08      	cmp	r3, #8
 800674e:	d00d      	beq.n	800676c <HAL_RCC_GetSysClockFreq+0x40>
 8006750:	2b08      	cmp	r3, #8
 8006752:	f200 80bd 	bhi.w	80068d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <HAL_RCC_GetSysClockFreq+0x34>
 800675a:	2b04      	cmp	r3, #4
 800675c:	d003      	beq.n	8006766 <HAL_RCC_GetSysClockFreq+0x3a>
 800675e:	e0b7      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006760:	4b61      	ldr	r3, [pc, #388]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006762:	60bb      	str	r3, [r7, #8]
       break;
 8006764:	e0b7      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006766:	4b61      	ldr	r3, [pc, #388]	; (80068ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006768:	60bb      	str	r3, [r7, #8]
      break;
 800676a:	e0b4      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800676c:	4b5d      	ldr	r3, [pc, #372]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006774:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006776:	4b5b      	ldr	r3, [pc, #364]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d04d      	beq.n	800681e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006782:	4b58      	ldr	r3, [pc, #352]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	099b      	lsrs	r3, r3, #6
 8006788:	461a      	mov	r2, r3
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006792:	f04f 0100 	mov.w	r1, #0
 8006796:	ea02 0800 	and.w	r8, r2, r0
 800679a:	ea03 0901 	and.w	r9, r3, r1
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	014b      	lsls	r3, r1, #5
 80067ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80067b0:	0142      	lsls	r2, r0, #5
 80067b2:	4610      	mov	r0, r2
 80067b4:	4619      	mov	r1, r3
 80067b6:	ebb0 0008 	subs.w	r0, r0, r8
 80067ba:	eb61 0109 	sbc.w	r1, r1, r9
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	018b      	lsls	r3, r1, #6
 80067c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067cc:	0182      	lsls	r2, r0, #6
 80067ce:	1a12      	subs	r2, r2, r0
 80067d0:	eb63 0301 	sbc.w	r3, r3, r1
 80067d4:	f04f 0000 	mov.w	r0, #0
 80067d8:	f04f 0100 	mov.w	r1, #0
 80067dc:	00d9      	lsls	r1, r3, #3
 80067de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067e2:	00d0      	lsls	r0, r2, #3
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	eb12 0208 	adds.w	r2, r2, r8
 80067ec:	eb43 0309 	adc.w	r3, r3, r9
 80067f0:	f04f 0000 	mov.w	r0, #0
 80067f4:	f04f 0100 	mov.w	r1, #0
 80067f8:	0259      	lsls	r1, r3, #9
 80067fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80067fe:	0250      	lsls	r0, r2, #9
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4610      	mov	r0, r2
 8006806:	4619      	mov	r1, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	461a      	mov	r2, r3
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	f7fa fa42 	bl	8000c98 <__aeabi_uldivmod>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4613      	mov	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	e04a      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800681e:	4b31      	ldr	r3, [pc, #196]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	099b      	lsrs	r3, r3, #6
 8006824:	461a      	mov	r2, r3
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800682e:	f04f 0100 	mov.w	r1, #0
 8006832:	ea02 0400 	and.w	r4, r2, r0
 8006836:	ea03 0501 	and.w	r5, r3, r1
 800683a:	4620      	mov	r0, r4
 800683c:	4629      	mov	r1, r5
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	f04f 0300 	mov.w	r3, #0
 8006846:	014b      	lsls	r3, r1, #5
 8006848:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800684c:	0142      	lsls	r2, r0, #5
 800684e:	4610      	mov	r0, r2
 8006850:	4619      	mov	r1, r3
 8006852:	1b00      	subs	r0, r0, r4
 8006854:	eb61 0105 	sbc.w	r1, r1, r5
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	018b      	lsls	r3, r1, #6
 8006862:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006866:	0182      	lsls	r2, r0, #6
 8006868:	1a12      	subs	r2, r2, r0
 800686a:	eb63 0301 	sbc.w	r3, r3, r1
 800686e:	f04f 0000 	mov.w	r0, #0
 8006872:	f04f 0100 	mov.w	r1, #0
 8006876:	00d9      	lsls	r1, r3, #3
 8006878:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800687c:	00d0      	lsls	r0, r2, #3
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	1912      	adds	r2, r2, r4
 8006884:	eb45 0303 	adc.w	r3, r5, r3
 8006888:	f04f 0000 	mov.w	r0, #0
 800688c:	f04f 0100 	mov.w	r1, #0
 8006890:	0299      	lsls	r1, r3, #10
 8006892:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006896:	0290      	lsls	r0, r2, #10
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4610      	mov	r0, r2
 800689e:	4619      	mov	r1, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	f7fa f9f6 	bl	8000c98 <__aeabi_uldivmod>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4613      	mov	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	0c1b      	lsrs	r3, r3, #16
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	3301      	adds	r3, #1
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	60bb      	str	r3, [r7, #8]
      break;
 80068ce:	e002      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068d0:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068d2:	60bb      	str	r3, [r7, #8]
      break;
 80068d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068d6:	68bb      	ldr	r3, [r7, #8]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068e2:	bf00      	nop
 80068e4:	40023800 	.word	0x40023800
 80068e8:	00f42400 	.word	0x00f42400
 80068ec:	007a1200 	.word	0x007a1200

080068f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f4:	4b03      	ldr	r3, [pc, #12]	; (8006904 <HAL_RCC_GetHCLKFreq+0x14>)
 80068f6:	681b      	ldr	r3, [r3, #0]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000000 	.word	0x20000000

08006908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800690c:	f7ff fff0 	bl	80068f0 <HAL_RCC_GetHCLKFreq>
 8006910:	4602      	mov	r2, r0
 8006912:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	0a9b      	lsrs	r3, r3, #10
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	4903      	ldr	r1, [pc, #12]	; (800692c <HAL_RCC_GetPCLK1Freq+0x24>)
 800691e:	5ccb      	ldrb	r3, [r1, r3]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006924:	4618      	mov	r0, r3
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40023800 	.word	0x40023800
 800692c:	0801077c 	.word	0x0801077c

08006930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006934:	f7ff ffdc 	bl	80068f0 <HAL_RCC_GetHCLKFreq>
 8006938:	4602      	mov	r2, r0
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	0b5b      	lsrs	r3, r3, #13
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	4903      	ldr	r1, [pc, #12]	; (8006954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006946:	5ccb      	ldrb	r3, [r1, r3]
 8006948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800694c:	4618      	mov	r0, r3
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40023800 	.word	0x40023800
 8006954:	0801077c 	.word	0x0801077c

08006958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e18c      	b.n	8006c84 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a75      	ldr	r2, [pc, #468]	; (8006b44 <HAL_SPI_Init+0x1ec>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d018      	beq.n	80069a6 <HAL_SPI_Init+0x4e>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a73      	ldr	r2, [pc, #460]	; (8006b48 <HAL_SPI_Init+0x1f0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <HAL_SPI_Init+0x4e>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a72      	ldr	r2, [pc, #456]	; (8006b4c <HAL_SPI_Init+0x1f4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00e      	beq.n	80069a6 <HAL_SPI_Init+0x4e>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a70      	ldr	r2, [pc, #448]	; (8006b50 <HAL_SPI_Init+0x1f8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d009      	beq.n	80069a6 <HAL_SPI_Init+0x4e>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a6f      	ldr	r2, [pc, #444]	; (8006b54 <HAL_SPI_Init+0x1fc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_SPI_Init+0x4e>
 800699c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80069a0:	486d      	ldr	r0, [pc, #436]	; (8006b58 <HAL_SPI_Init+0x200>)
 80069a2:	f7fa fe76 	bl	8001692 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <HAL_SPI_Init+0x6a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069b6:	d004      	beq.n	80069c2 <HAL_SPI_Init+0x6a>
 80069b8:	f240 1143 	movw	r1, #323	; 0x143
 80069bc:	4866      	ldr	r0, [pc, #408]	; (8006b58 <HAL_SPI_Init+0x200>)
 80069be:	f7fa fe68 	bl	8001692 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00e      	beq.n	80069e8 <HAL_SPI_Init+0x90>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d2:	d009      	beq.n	80069e8 <HAL_SPI_Init+0x90>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069dc:	d004      	beq.n	80069e8 <HAL_SPI_Init+0x90>
 80069de:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80069e2:	485d      	ldr	r0, [pc, #372]	; (8006b58 <HAL_SPI_Init+0x200>)
 80069e4:	f7fa fe55 	bl	8001692 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f0:	d008      	beq.n	8006a04 <HAL_SPI_Init+0xac>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <HAL_SPI_Init+0xac>
 80069fa:	f240 1145 	movw	r1, #325	; 0x145
 80069fe:	4856      	ldr	r0, [pc, #344]	; (8006b58 <HAL_SPI_Init+0x200>)
 8006a00:	f7fa fe47 	bl	8001692 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0c:	d00d      	beq.n	8006a2a <HAL_SPI_Init+0xd2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d009      	beq.n	8006a2a <HAL_SPI_Init+0xd2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a1e:	d004      	beq.n	8006a2a <HAL_SPI_Init+0xd2>
 8006a20:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006a24:	484c      	ldr	r0, [pc, #304]	; (8006b58 <HAL_SPI_Init+0x200>)
 8006a26:	f7fa fe34 	bl	8001692 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d020      	beq.n	8006a74 <HAL_SPI_Init+0x11c>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d01c      	beq.n	8006a74 <HAL_SPI_Init+0x11c>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	2b10      	cmp	r3, #16
 8006a40:	d018      	beq.n	8006a74 <HAL_SPI_Init+0x11c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	2b18      	cmp	r3, #24
 8006a48:	d014      	beq.n	8006a74 <HAL_SPI_Init+0x11c>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d010      	beq.n	8006a74 <HAL_SPI_Init+0x11c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	2b28      	cmp	r3, #40	; 0x28
 8006a58:	d00c      	beq.n	8006a74 <HAL_SPI_Init+0x11c>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	2b30      	cmp	r3, #48	; 0x30
 8006a60:	d008      	beq.n	8006a74 <HAL_SPI_Init+0x11c>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	2b38      	cmp	r3, #56	; 0x38
 8006a68:	d004      	beq.n	8006a74 <HAL_SPI_Init+0x11c>
 8006a6a:	f240 1147 	movw	r1, #327	; 0x147
 8006a6e:	483a      	ldr	r0, [pc, #232]	; (8006b58 <HAL_SPI_Init+0x200>)
 8006a70:	f7fa fe0f 	bl	8001692 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <HAL_SPI_Init+0x136>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d004      	beq.n	8006a8e <HAL_SPI_Init+0x136>
 8006a84:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006a88:	4833      	ldr	r0, [pc, #204]	; (8006b58 <HAL_SPI_Init+0x200>)
 8006a8a:	f7fa fe02 	bl	8001692 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <HAL_SPI_Init+0x150>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	d004      	beq.n	8006aa8 <HAL_SPI_Init+0x150>
 8006a9e:	f240 1149 	movw	r1, #329	; 0x149
 8006aa2:	482d      	ldr	r0, [pc, #180]	; (8006b58 <HAL_SPI_Init+0x200>)
 8006aa4:	f7fa fdf5 	bl	8001692 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d155      	bne.n	8006b5c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d008      	beq.n	8006aca <HAL_SPI_Init+0x172>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d004      	beq.n	8006aca <HAL_SPI_Init+0x172>
 8006ac0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006ac4:	4824      	ldr	r0, [pc, #144]	; (8006b58 <HAL_SPI_Init+0x200>)
 8006ac6:	f7fa fde4 	bl	8001692 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d008      	beq.n	8006ae4 <HAL_SPI_Init+0x18c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d004      	beq.n	8006ae4 <HAL_SPI_Init+0x18c>
 8006ada:	f240 114d 	movw	r1, #333	; 0x14d
 8006ade:	481e      	ldr	r0, [pc, #120]	; (8006b58 <HAL_SPI_Init+0x200>)
 8006ae0:	f7fa fdd7 	bl	8001692 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aec:	d125      	bne.n	8006b3a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d05d      	beq.n	8006bb2 <HAL_SPI_Init+0x25a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d059      	beq.n	8006bb2 <HAL_SPI_Init+0x25a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	2b10      	cmp	r3, #16
 8006b04:	d055      	beq.n	8006bb2 <HAL_SPI_Init+0x25a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	2b18      	cmp	r3, #24
 8006b0c:	d051      	beq.n	8006bb2 <HAL_SPI_Init+0x25a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d04d      	beq.n	8006bb2 <HAL_SPI_Init+0x25a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	2b28      	cmp	r3, #40	; 0x28
 8006b1c:	d049      	beq.n	8006bb2 <HAL_SPI_Init+0x25a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	2b30      	cmp	r3, #48	; 0x30
 8006b24:	d045      	beq.n	8006bb2 <HAL_SPI_Init+0x25a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	2b38      	cmp	r3, #56	; 0x38
 8006b2c:	d041      	beq.n	8006bb2 <HAL_SPI_Init+0x25a>
 8006b2e:	f240 1151 	movw	r1, #337	; 0x151
 8006b32:	4809      	ldr	r0, [pc, #36]	; (8006b58 <HAL_SPI_Init+0x200>)
 8006b34:	f7fa fdad 	bl	8001692 <assert_failed>
 8006b38:	e03b      	b.n	8006bb2 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	61da      	str	r2, [r3, #28]
 8006b40:	e037      	b.n	8006bb2 <HAL_SPI_Init+0x25a>
 8006b42:	bf00      	nop
 8006b44:	40013000 	.word	0x40013000
 8006b48:	40003800 	.word	0x40003800
 8006b4c:	40003c00 	.word	0x40003c00
 8006b50:	40013400 	.word	0x40013400
 8006b54:	40015000 	.word	0x40015000
 8006b58:	08010680 	.word	0x08010680
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d020      	beq.n	8006ba6 <HAL_SPI_Init+0x24e>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d01c      	beq.n	8006ba6 <HAL_SPI_Init+0x24e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	2b10      	cmp	r3, #16
 8006b72:	d018      	beq.n	8006ba6 <HAL_SPI_Init+0x24e>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	2b18      	cmp	r3, #24
 8006b7a:	d014      	beq.n	8006ba6 <HAL_SPI_Init+0x24e>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d010      	beq.n	8006ba6 <HAL_SPI_Init+0x24e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	2b28      	cmp	r3, #40	; 0x28
 8006b8a:	d00c      	beq.n	8006ba6 <HAL_SPI_Init+0x24e>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	2b30      	cmp	r3, #48	; 0x30
 8006b92:	d008      	beq.n	8006ba6 <HAL_SPI_Init+0x24e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2b38      	cmp	r3, #56	; 0x38
 8006b9a:	d004      	beq.n	8006ba6 <HAL_SPI_Init+0x24e>
 8006b9c:	f240 115b 	movw	r1, #347	; 0x15b
 8006ba0:	483a      	ldr	r0, [pc, #232]	; (8006c8c <HAL_SPI_Init+0x334>)
 8006ba2:	f7fa fd76 	bl	8001692 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fa fda1 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c36:	ea42 0103 	orr.w	r1, r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	0c1b      	lsrs	r3, r3, #16
 8006c50:	f003 0104 	and.w	r1, r3, #4
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	f003 0210 	and.w	r2, r3, #16
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69da      	ldr	r2, [r3, #28]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	08010680 	.word	0x08010680

08006c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e0a7      	b.n	8006df2 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a55      	ldr	r2, [pc, #340]	; (8006dfc <HAL_TIM_Base_Init+0x16c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d027      	beq.n	8006cfc <HAL_TIM_Base_Init+0x6c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb4:	d022      	beq.n	8006cfc <HAL_TIM_Base_Init+0x6c>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a51      	ldr	r2, [pc, #324]	; (8006e00 <HAL_TIM_Base_Init+0x170>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d01d      	beq.n	8006cfc <HAL_TIM_Base_Init+0x6c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a4f      	ldr	r2, [pc, #316]	; (8006e04 <HAL_TIM_Base_Init+0x174>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d018      	beq.n	8006cfc <HAL_TIM_Base_Init+0x6c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a4e      	ldr	r2, [pc, #312]	; (8006e08 <HAL_TIM_Base_Init+0x178>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d013      	beq.n	8006cfc <HAL_TIM_Base_Init+0x6c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a4c      	ldr	r2, [pc, #304]	; (8006e0c <HAL_TIM_Base_Init+0x17c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00e      	beq.n	8006cfc <HAL_TIM_Base_Init+0x6c>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a4b      	ldr	r2, [pc, #300]	; (8006e10 <HAL_TIM_Base_Init+0x180>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <HAL_TIM_Base_Init+0x6c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a49      	ldr	r2, [pc, #292]	; (8006e14 <HAL_TIM_Base_Init+0x184>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d004      	beq.n	8006cfc <HAL_TIM_Base_Init+0x6c>
 8006cf2:	f240 1113 	movw	r1, #275	; 0x113
 8006cf6:	4848      	ldr	r0, [pc, #288]	; (8006e18 <HAL_TIM_Base_Init+0x188>)
 8006cf8:	f7fa fccb 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d014      	beq.n	8006d2e <HAL_TIM_Base_Init+0x9e>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d010      	beq.n	8006d2e <HAL_TIM_Base_Init+0x9e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d00c      	beq.n	8006d2e <HAL_TIM_Base_Init+0x9e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b40      	cmp	r3, #64	; 0x40
 8006d1a:	d008      	beq.n	8006d2e <HAL_TIM_Base_Init+0x9e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b60      	cmp	r3, #96	; 0x60
 8006d22:	d004      	beq.n	8006d2e <HAL_TIM_Base_Init+0x9e>
 8006d24:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006d28:	483b      	ldr	r0, [pc, #236]	; (8006e18 <HAL_TIM_Base_Init+0x188>)
 8006d2a:	f7fa fcb2 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00e      	beq.n	8006d54 <HAL_TIM_Base_Init+0xc4>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3e:	d009      	beq.n	8006d54 <HAL_TIM_Base_Init+0xc4>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d48:	d004      	beq.n	8006d54 <HAL_TIM_Base_Init+0xc4>
 8006d4a:	f240 1115 	movw	r1, #277	; 0x115
 8006d4e:	4832      	ldr	r0, [pc, #200]	; (8006e18 <HAL_TIM_Base_Init+0x188>)
 8006d50:	f7fa fc9f 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <HAL_TIM_Base_Init+0xde>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	2b80      	cmp	r3, #128	; 0x80
 8006d62:	d004      	beq.n	8006d6e <HAL_TIM_Base_Init+0xde>
 8006d64:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006d68:	482b      	ldr	r0, [pc, #172]	; (8006e18 <HAL_TIM_Base_Init+0x188>)
 8006d6a:	f7fa fc92 	bl	8001692 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d106      	bne.n	8006d88 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7fa ff36 	bl	8001bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	f000 fdc4 	bl	8007928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	40000400 	.word	0x40000400
 8006e04:	40000800 	.word	0x40000800
 8006e08:	40000c00 	.word	0x40000c00
 8006e0c:	40014000 	.word	0x40014000
 8006e10:	40014400 	.word	0x40014400
 8006e14:	40014800 	.word	0x40014800
 8006e18:	080106b8 	.word	0x080106b8

08006e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e0a7      	b.n	8006f7e <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a55      	ldr	r2, [pc, #340]	; (8006f88 <HAL_TIM_PWM_Init+0x16c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d027      	beq.n	8006e88 <HAL_TIM_PWM_Init+0x6c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e40:	d022      	beq.n	8006e88 <HAL_TIM_PWM_Init+0x6c>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a51      	ldr	r2, [pc, #324]	; (8006f8c <HAL_TIM_PWM_Init+0x170>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d01d      	beq.n	8006e88 <HAL_TIM_PWM_Init+0x6c>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a4f      	ldr	r2, [pc, #316]	; (8006f90 <HAL_TIM_PWM_Init+0x174>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d018      	beq.n	8006e88 <HAL_TIM_PWM_Init+0x6c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a4e      	ldr	r2, [pc, #312]	; (8006f94 <HAL_TIM_PWM_Init+0x178>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d013      	beq.n	8006e88 <HAL_TIM_PWM_Init+0x6c>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a4c      	ldr	r2, [pc, #304]	; (8006f98 <HAL_TIM_PWM_Init+0x17c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00e      	beq.n	8006e88 <HAL_TIM_PWM_Init+0x6c>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a4b      	ldr	r2, [pc, #300]	; (8006f9c <HAL_TIM_PWM_Init+0x180>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d009      	beq.n	8006e88 <HAL_TIM_PWM_Init+0x6c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a49      	ldr	r2, [pc, #292]	; (8006fa0 <HAL_TIM_PWM_Init+0x184>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d004      	beq.n	8006e88 <HAL_TIM_PWM_Init+0x6c>
 8006e7e:	f240 5129 	movw	r1, #1321	; 0x529
 8006e82:	4848      	ldr	r0, [pc, #288]	; (8006fa4 <HAL_TIM_PWM_Init+0x188>)
 8006e84:	f7fa fc05 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d014      	beq.n	8006eba <HAL_TIM_PWM_Init+0x9e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d010      	beq.n	8006eba <HAL_TIM_PWM_Init+0x9e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d00c      	beq.n	8006eba <HAL_TIM_PWM_Init+0x9e>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b40      	cmp	r3, #64	; 0x40
 8006ea6:	d008      	beq.n	8006eba <HAL_TIM_PWM_Init+0x9e>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b60      	cmp	r3, #96	; 0x60
 8006eae:	d004      	beq.n	8006eba <HAL_TIM_PWM_Init+0x9e>
 8006eb0:	f240 512a 	movw	r1, #1322	; 0x52a
 8006eb4:	483b      	ldr	r0, [pc, #236]	; (8006fa4 <HAL_TIM_PWM_Init+0x188>)
 8006eb6:	f7fa fbec 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00e      	beq.n	8006ee0 <HAL_TIM_PWM_Init+0xc4>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eca:	d009      	beq.n	8006ee0 <HAL_TIM_PWM_Init+0xc4>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed4:	d004      	beq.n	8006ee0 <HAL_TIM_PWM_Init+0xc4>
 8006ed6:	f240 512b 	movw	r1, #1323	; 0x52b
 8006eda:	4832      	ldr	r0, [pc, #200]	; (8006fa4 <HAL_TIM_PWM_Init+0x188>)
 8006edc:	f7fa fbd9 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_TIM_PWM_Init+0xde>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	2b80      	cmp	r3, #128	; 0x80
 8006eee:	d004      	beq.n	8006efa <HAL_TIM_PWM_Init+0xde>
 8006ef0:	f240 512c 	movw	r1, #1324	; 0x52c
 8006ef4:	482b      	ldr	r0, [pc, #172]	; (8006fa4 <HAL_TIM_PWM_Init+0x188>)
 8006ef6:	f7fa fbcc 	bl	8001692 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f84a 	bl	8006fa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3304      	adds	r3, #4
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f000 fcfe 	bl	8007928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40000400 	.word	0x40000400
 8006f90:	40000800 	.word	0x40000800
 8006f94:	40000c00 	.word	0x40000c00
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40014400 	.word	0x40014400
 8006fa0:	40014800 	.word	0x40014800
 8006fa4:	080106b8 	.word	0x080106b8

08006fa8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d010      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d00d      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d00a      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b0c      	cmp	r3, #12
 8006fe2:	d007      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b3c      	cmp	r3, #60	; 0x3c
 8006fe8:	d004      	beq.n	8006ff4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006fea:	f241 0177 	movw	r1, #4215	; 0x1077
 8006fee:	4893      	ldr	r0, [pc, #588]	; (800723c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006ff0:	f7fa fb4f 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b60      	cmp	r3, #96	; 0x60
 8006ffa:	d008      	beq.n	800700e <HAL_TIM_PWM_ConfigChannel+0x52>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b70      	cmp	r3, #112	; 0x70
 8007002:	d004      	beq.n	800700e <HAL_TIM_PWM_ConfigChannel+0x52>
 8007004:	f241 0178 	movw	r1, #4216	; 0x1078
 8007008:	488c      	ldr	r0, [pc, #560]	; (800723c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800700a:	f7fa fb42 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d004      	beq.n	8007028 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800701e:	f241 0179 	movw	r1, #4217	; 0x1079
 8007022:	4886      	ldr	r0, [pc, #536]	; (800723c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007024:	f7fa fb35 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b04      	cmp	r3, #4
 8007036:	d004      	beq.n	8007042 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007038:	f241 017a 	movw	r1, #4218	; 0x107a
 800703c:	487f      	ldr	r0, [pc, #508]	; (800723c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800703e:	f7fa fb28 	bl	8001692 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_TIM_PWM_ConfigChannel+0x94>
 800704c:	2302      	movs	r3, #2
 800704e:	e14c      	b.n	80072ea <HAL_TIM_PWM_ConfigChannel+0x32e>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b0c      	cmp	r3, #12
 800705c:	f200 813d 	bhi.w	80072da <HAL_TIM_PWM_ConfigChannel+0x31e>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	0800709d 	.word	0x0800709d
 800706c:	080072db 	.word	0x080072db
 8007070:	080072db 	.word	0x080072db
 8007074:	080072db 	.word	0x080072db
 8007078:	08007137 	.word	0x08007137
 800707c:	080072db 	.word	0x080072db
 8007080:	080072db 	.word	0x080072db
 8007084:	080072db 	.word	0x080072db
 8007088:	080071bf 	.word	0x080071bf
 800708c:	080072db 	.word	0x080072db
 8007090:	080072db 	.word	0x080072db
 8007094:	080072db 	.word	0x080072db
 8007098:	0800725d 	.word	0x0800725d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a67      	ldr	r2, [pc, #412]	; (8007240 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d027      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ae:	d022      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a63      	ldr	r2, [pc, #396]	; (8007244 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d01d      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a62      	ldr	r2, [pc, #392]	; (8007248 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d018      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a60      	ldr	r2, [pc, #384]	; (800724c <HAL_TIM_PWM_ConfigChannel+0x290>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d013      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a5f      	ldr	r2, [pc, #380]	; (8007250 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00e      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a5d      	ldr	r2, [pc, #372]	; (8007254 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d009      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a5c      	ldr	r2, [pc, #368]	; (8007258 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 80070ec:	f241 0184 	movw	r1, #4228	; 0x1084
 80070f0:	4852      	ldr	r0, [pc, #328]	; (800723c <HAL_TIM_PWM_ConfigChannel+0x280>)
 80070f2:	f7fa face 	bl	8001692 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fc93 	bl	8007a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699a      	ldr	r2, [r3, #24]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0208 	orr.w	r2, r2, #8
 8007110:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0204 	bic.w	r2, r2, #4
 8007120:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6999      	ldr	r1, [r3, #24]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	619a      	str	r2, [r3, #24]
      break;
 8007134:	e0d4      	b.n	80072e0 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a41      	ldr	r2, [pc, #260]	; (8007240 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d01d      	beq.n	800717c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007148:	d018      	beq.n	800717c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a3d      	ldr	r2, [pc, #244]	; (8007244 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d013      	beq.n	800717c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a3b      	ldr	r2, [pc, #236]	; (8007248 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00e      	beq.n	800717c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a3a      	ldr	r2, [pc, #232]	; (800724c <HAL_TIM_PWM_ConfigChannel+0x290>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d009      	beq.n	800717c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a38      	ldr	r2, [pc, #224]	; (8007250 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d004      	beq.n	800717c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8007172:	f241 0195 	movw	r1, #4245	; 0x1095
 8007176:	4831      	ldr	r0, [pc, #196]	; (800723c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007178:	f7fa fa8b 	bl	8001692 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fce0 	bl	8007b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6999      	ldr	r1, [r3, #24]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	021a      	lsls	r2, r3, #8
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	619a      	str	r2, [r3, #24]
      break;
 80071bc:	e090      	b.n	80072e0 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1f      	ldr	r2, [pc, #124]	; (8007240 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d018      	beq.n	80071fa <HAL_TIM_PWM_ConfigChannel+0x23e>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d0:	d013      	beq.n	80071fa <HAL_TIM_PWM_ConfigChannel+0x23e>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00e      	beq.n	80071fa <HAL_TIM_PWM_ConfigChannel+0x23e>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a19      	ldr	r2, [pc, #100]	; (8007248 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d009      	beq.n	80071fa <HAL_TIM_PWM_ConfigChannel+0x23e>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a18      	ldr	r2, [pc, #96]	; (800724c <HAL_TIM_PWM_ConfigChannel+0x290>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d004      	beq.n	80071fa <HAL_TIM_PWM_ConfigChannel+0x23e>
 80071f0:	f241 01a6 	movw	r1, #4262	; 0x10a6
 80071f4:	4811      	ldr	r0, [pc, #68]	; (800723c <HAL_TIM_PWM_ConfigChannel+0x280>)
 80071f6:	f7fa fa4c 	bl	8001692 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68b9      	ldr	r1, [r7, #8]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fd35 	bl	8007c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0208 	orr.w	r2, r2, #8
 8007214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0204 	bic.w	r2, r2, #4
 8007224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69d9      	ldr	r1, [r3, #28]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	61da      	str	r2, [r3, #28]
      break;
 8007238:	e052      	b.n	80072e0 <HAL_TIM_PWM_ConfigChannel+0x324>
 800723a:	bf00      	nop
 800723c:	080106b8 	.word	0x080106b8
 8007240:	40010000 	.word	0x40010000
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00
 8007250:	40014000 	.word	0x40014000
 8007254:	40014400 	.word	0x40014400
 8007258:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a24      	ldr	r2, [pc, #144]	; (80072f4 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d018      	beq.n	8007298 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726e:	d013      	beq.n	8007298 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a20      	ldr	r2, [pc, #128]	; (80072f8 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00e      	beq.n	8007298 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <HAL_TIM_PWM_ConfigChannel+0x340>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d009      	beq.n	8007298 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1d      	ldr	r2, [pc, #116]	; (8007300 <HAL_TIM_PWM_ConfigChannel+0x344>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d004      	beq.n	8007298 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800728e:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8007292:	481c      	ldr	r0, [pc, #112]	; (8007304 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8007294:	f7fa f9fd 	bl	8001692 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fd7a 	bl	8007d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69da      	ldr	r2, [r3, #28]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69da      	ldr	r2, [r3, #28]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	69d9      	ldr	r1, [r3, #28]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	021a      	lsls	r2, r3, #8
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	61da      	str	r2, [r3, #28]
      break;
 80072d8:	e002      	b.n	80072e0 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	75fb      	strb	r3, [r7, #23]
      break;
 80072de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40000400 	.word	0x40000400
 80072fc:	40000800 	.word	0x40000800
 8007300:	40000c00 	.word	0x40000c00
 8007304:	080106b8 	.word	0x080106b8

08007308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIM_ConfigClockSource+0x1c>
 8007320:	2302      	movs	r3, #2
 8007322:	e2f0      	b.n	8007906 <HAL_TIM_ConfigClockSource+0x5fe>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733c:	d029      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x8a>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007346:	d024      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x8a>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d020      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x8a>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b10      	cmp	r3, #16
 8007356:	d01c      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x8a>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b20      	cmp	r3, #32
 800735e:	d018      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x8a>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b30      	cmp	r3, #48	; 0x30
 8007366:	d014      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x8a>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b40      	cmp	r3, #64	; 0x40
 800736e:	d010      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x8a>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b50      	cmp	r3, #80	; 0x50
 8007376:	d00c      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x8a>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b60      	cmp	r3, #96	; 0x60
 800737e:	d008      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x8a>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b70      	cmp	r3, #112	; 0x70
 8007386:	d004      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x8a>
 8007388:	f241 41bb 	movw	r1, #5307	; 0x14bb
 800738c:	487c      	ldr	r0, [pc, #496]	; (8007580 <HAL_TIM_ConfigClockSource+0x278>)
 800738e:	f7fa f980 	bl	8001692 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073a8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ba:	f000 80f1 	beq.w	80075a0 <HAL_TIM_ConfigClockSource+0x298>
 80073be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c2:	f200 8293 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x5e4>
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ca:	d02d      	beq.n	8007428 <HAL_TIM_ConfigClockSource+0x120>
 80073cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d0:	f200 828c 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x5e4>
 80073d4:	2b70      	cmp	r3, #112	; 0x70
 80073d6:	d05d      	beq.n	8007494 <HAL_TIM_ConfigClockSource+0x18c>
 80073d8:	2b70      	cmp	r3, #112	; 0x70
 80073da:	f200 8287 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x5e4>
 80073de:	2b60      	cmp	r3, #96	; 0x60
 80073e0:	f000 81a0 	beq.w	8007724 <HAL_TIM_ConfigClockSource+0x41c>
 80073e4:	2b60      	cmp	r3, #96	; 0x60
 80073e6:	f200 8281 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x5e4>
 80073ea:	2b50      	cmp	r3, #80	; 0x50
 80073ec:	f000 8144 	beq.w	8007678 <HAL_TIM_ConfigClockSource+0x370>
 80073f0:	2b50      	cmp	r3, #80	; 0x50
 80073f2:	f200 827b 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x5e4>
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	f000 81f6 	beq.w	80077e8 <HAL_TIM_ConfigClockSource+0x4e0>
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	f200 8275 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x5e4>
 8007402:	2b30      	cmp	r3, #48	; 0x30
 8007404:	f000 8246 	beq.w	8007894 <HAL_TIM_ConfigClockSource+0x58c>
 8007408:	2b30      	cmp	r3, #48	; 0x30
 800740a:	f200 826f 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x5e4>
 800740e:	2b20      	cmp	r3, #32
 8007410:	f000 8240 	beq.w	8007894 <HAL_TIM_ConfigClockSource+0x58c>
 8007414:	2b20      	cmp	r3, #32
 8007416:	f200 8269 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x5e4>
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 823a 	beq.w	8007894 <HAL_TIM_ConfigClockSource+0x58c>
 8007420:	2b10      	cmp	r3, #16
 8007422:	f000 8237 	beq.w	8007894 <HAL_TIM_ConfigClockSource+0x58c>
 8007426:	e261      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a55      	ldr	r2, [pc, #340]	; (8007584 <HAL_TIM_ConfigClockSource+0x27c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	f000 825f 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x5ea>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743c:	f000 8259 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x5ea>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a50      	ldr	r2, [pc, #320]	; (8007588 <HAL_TIM_ConfigClockSource+0x280>)
 8007446:	4293      	cmp	r3, r2
 8007448:	f000 8253 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x5ea>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a4e      	ldr	r2, [pc, #312]	; (800758c <HAL_TIM_ConfigClockSource+0x284>)
 8007452:	4293      	cmp	r3, r2
 8007454:	f000 824d 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x5ea>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a4c      	ldr	r2, [pc, #304]	; (8007590 <HAL_TIM_ConfigClockSource+0x288>)
 800745e:	4293      	cmp	r3, r2
 8007460:	f000 8247 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x5ea>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a4a      	ldr	r2, [pc, #296]	; (8007594 <HAL_TIM_ConfigClockSource+0x28c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	f000 8241 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x5ea>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a48      	ldr	r2, [pc, #288]	; (8007598 <HAL_TIM_ConfigClockSource+0x290>)
 8007476:	4293      	cmp	r3, r2
 8007478:	f000 823b 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x5ea>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a46      	ldr	r2, [pc, #280]	; (800759c <HAL_TIM_ConfigClockSource+0x294>)
 8007482:	4293      	cmp	r3, r2
 8007484:	f000 8235 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x5ea>
 8007488:	f241 41c7 	movw	r1, #5319	; 0x14c7
 800748c:	483c      	ldr	r0, [pc, #240]	; (8007580 <HAL_TIM_ConfigClockSource+0x278>)
 800748e:	f7fa f900 	bl	8001692 <assert_failed>
      break;
 8007492:	e22e      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a3a      	ldr	r2, [pc, #232]	; (8007584 <HAL_TIM_ConfigClockSource+0x27c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d01d      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x1d2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a6:	d018      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x1d2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a36      	ldr	r2, [pc, #216]	; (8007588 <HAL_TIM_ConfigClockSource+0x280>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x1d2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a35      	ldr	r2, [pc, #212]	; (800758c <HAL_TIM_ConfigClockSource+0x284>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00e      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x1d2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a33      	ldr	r2, [pc, #204]	; (8007590 <HAL_TIM_ConfigClockSource+0x288>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d009      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x1d2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a32      	ldr	r2, [pc, #200]	; (8007594 <HAL_TIM_ConfigClockSource+0x28c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d004      	beq.n	80074da <HAL_TIM_ConfigClockSource+0x1d2>
 80074d0:	f241 41ce 	movw	r1, #5326	; 0x14ce
 80074d4:	482a      	ldr	r0, [pc, #168]	; (8007580 <HAL_TIM_ConfigClockSource+0x278>)
 80074d6:	f7fa f8dc 	bl	8001692 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d013      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x202>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ea:	d00e      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x202>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f4:	d009      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x202>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074fe:	d004      	beq.n	800750a <HAL_TIM_ConfigClockSource+0x202>
 8007500:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8007504:	481e      	ldr	r0, [pc, #120]	; (8007580 <HAL_TIM_ConfigClockSource+0x278>)
 8007506:	f7fa f8c4 	bl	8001692 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007512:	d014      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x236>
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d010      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x236>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00c      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x236>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	2b02      	cmp	r3, #2
 800752a:	d008      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x236>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b0a      	cmp	r3, #10
 8007532:	d004      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x236>
 8007534:	f241 41d2 	movw	r1, #5330	; 0x14d2
 8007538:	4811      	ldr	r0, [pc, #68]	; (8007580 <HAL_TIM_ConfigClockSource+0x278>)
 800753a:	f7fa f8aa 	bl	8001692 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	2b0f      	cmp	r3, #15
 8007544:	d904      	bls.n	8007550 <HAL_TIM_ConfigClockSource+0x248>
 8007546:	f241 41d3 	movw	r1, #5331	; 0x14d3
 800754a:	480d      	ldr	r0, [pc, #52]	; (8007580 <HAL_TIM_ConfigClockSource+0x278>)
 800754c:	f7fa f8a1 	bl	8001692 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6818      	ldr	r0, [r3, #0]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	6899      	ldr	r1, [r3, #8]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f000 fcf2 	bl	8007f48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007572:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	609a      	str	r2, [r3, #8]
      break;
 800757c:	e1ba      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x5ec>
 800757e:	bf00      	nop
 8007580:	080106b8 	.word	0x080106b8
 8007584:	40010000 	.word	0x40010000
 8007588:	40000400 	.word	0x40000400
 800758c:	40000800 	.word	0x40000800
 8007590:	40000c00 	.word	0x40000c00
 8007594:	40014000 	.word	0x40014000
 8007598:	40014400 	.word	0x40014400
 800759c:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a8a      	ldr	r2, [pc, #552]	; (80077d0 <HAL_TIM_ConfigClockSource+0x4c8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d018      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x2d4>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b2:	d013      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x2d4>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a86      	ldr	r2, [pc, #536]	; (80077d4 <HAL_TIM_ConfigClockSource+0x4cc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00e      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x2d4>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a85      	ldr	r2, [pc, #532]	; (80077d8 <HAL_TIM_ConfigClockSource+0x4d0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d009      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x2d4>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a83      	ldr	r2, [pc, #524]	; (80077dc <HAL_TIM_ConfigClockSource+0x4d4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d004      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x2d4>
 80075d2:	f241 41e6 	movw	r1, #5350	; 0x14e6
 80075d6:	4882      	ldr	r0, [pc, #520]	; (80077e0 <HAL_TIM_ConfigClockSource+0x4d8>)
 80075d8:	f7fa f85b 	bl	8001692 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d013      	beq.n	800760c <HAL_TIM_ConfigClockSource+0x304>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ec:	d00e      	beq.n	800760c <HAL_TIM_ConfigClockSource+0x304>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f6:	d009      	beq.n	800760c <HAL_TIM_ConfigClockSource+0x304>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007600:	d004      	beq.n	800760c <HAL_TIM_ConfigClockSource+0x304>
 8007602:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8007606:	4876      	ldr	r0, [pc, #472]	; (80077e0 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007608:	f7fa f843 	bl	8001692 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007614:	d014      	beq.n	8007640 <HAL_TIM_ConfigClockSource+0x338>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <HAL_TIM_ConfigClockSource+0x338>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00c      	beq.n	8007640 <HAL_TIM_ConfigClockSource+0x338>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d008      	beq.n	8007640 <HAL_TIM_ConfigClockSource+0x338>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b0a      	cmp	r3, #10
 8007634:	d004      	beq.n	8007640 <HAL_TIM_ConfigClockSource+0x338>
 8007636:	f241 41ea 	movw	r1, #5354	; 0x14ea
 800763a:	4869      	ldr	r0, [pc, #420]	; (80077e0 <HAL_TIM_ConfigClockSource+0x4d8>)
 800763c:	f7fa f829 	bl	8001692 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	2b0f      	cmp	r3, #15
 8007646:	d904      	bls.n	8007652 <HAL_TIM_ConfigClockSource+0x34a>
 8007648:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800764c:	4864      	ldr	r0, [pc, #400]	; (80077e0 <HAL_TIM_ConfigClockSource+0x4d8>)
 800764e:	f7fa f820 	bl	8001692 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6818      	ldr	r0, [r3, #0]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	6899      	ldr	r1, [r3, #8]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f000 fc71 	bl	8007f48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007674:	609a      	str	r2, [r3, #8]
      break;
 8007676:	e13d      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a54      	ldr	r2, [pc, #336]	; (80077d0 <HAL_TIM_ConfigClockSource+0x4c8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d01d      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x3b6>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768a:	d018      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x3b6>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a50      	ldr	r2, [pc, #320]	; (80077d4 <HAL_TIM_ConfigClockSource+0x4cc>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d013      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x3b6>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a4f      	ldr	r2, [pc, #316]	; (80077d8 <HAL_TIM_ConfigClockSource+0x4d0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00e      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x3b6>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a4d      	ldr	r2, [pc, #308]	; (80077dc <HAL_TIM_ConfigClockSource+0x4d4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d009      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x3b6>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4d      	ldr	r2, [pc, #308]	; (80077e4 <HAL_TIM_ConfigClockSource+0x4dc>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x3b6>
 80076b4:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80076b8:	4849      	ldr	r0, [pc, #292]	; (80077e0 <HAL_TIM_ConfigClockSource+0x4d8>)
 80076ba:	f7f9 ffea 	bl	8001692 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076c6:	d014      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0x3ea>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d010      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0x3ea>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00c      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0x3ea>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d008      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0x3ea>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2b0a      	cmp	r3, #10
 80076e6:	d004      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0x3ea>
 80076e8:	f241 41fd 	movw	r1, #5373	; 0x14fd
 80076ec:	483c      	ldr	r0, [pc, #240]	; (80077e0 <HAL_TIM_ConfigClockSource+0x4d8>)
 80076ee:	f7f9 ffd0 	bl	8001692 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b0f      	cmp	r3, #15
 80076f8:	d904      	bls.n	8007704 <HAL_TIM_ConfigClockSource+0x3fc>
 80076fa:	f241 41fe 	movw	r1, #5374	; 0x14fe
 80076fe:	4838      	ldr	r0, [pc, #224]	; (80077e0 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007700:	f7f9 ffc7 	bl	8001692 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	6859      	ldr	r1, [r3, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	461a      	mov	r2, r3
 8007712:	f000 fb9f 	bl	8007e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2150      	movs	r1, #80	; 0x50
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fbf8 	bl	8007f12 <TIM_ITRx_SetConfig>
      break;
 8007722:	e0e7      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a29      	ldr	r2, [pc, #164]	; (80077d0 <HAL_TIM_ConfigClockSource+0x4c8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01d      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x462>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007736:	d018      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x462>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a25      	ldr	r2, [pc, #148]	; (80077d4 <HAL_TIM_ConfigClockSource+0x4cc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x462>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a24      	ldr	r2, [pc, #144]	; (80077d8 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00e      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x462>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a22      	ldr	r2, [pc, #136]	; (80077dc <HAL_TIM_ConfigClockSource+0x4d4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d009      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x462>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a22      	ldr	r2, [pc, #136]	; (80077e4 <HAL_TIM_ConfigClockSource+0x4dc>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d004      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x462>
 8007760:	f241 510a 	movw	r1, #5386	; 0x150a
 8007764:	481e      	ldr	r0, [pc, #120]	; (80077e0 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007766:	f7f9 ff94 	bl	8001692 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007772:	d014      	beq.n	800779e <HAL_TIM_ConfigClockSource+0x496>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d010      	beq.n	800779e <HAL_TIM_ConfigClockSource+0x496>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00c      	beq.n	800779e <HAL_TIM_ConfigClockSource+0x496>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d008      	beq.n	800779e <HAL_TIM_ConfigClockSource+0x496>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2b0a      	cmp	r3, #10
 8007792:	d004      	beq.n	800779e <HAL_TIM_ConfigClockSource+0x496>
 8007794:	f241 510d 	movw	r1, #5389	; 0x150d
 8007798:	4811      	ldr	r0, [pc, #68]	; (80077e0 <HAL_TIM_ConfigClockSource+0x4d8>)
 800779a:	f7f9 ff7a 	bl	8001692 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	2b0f      	cmp	r3, #15
 80077a4:	d904      	bls.n	80077b0 <HAL_TIM_ConfigClockSource+0x4a8>
 80077a6:	f241 510e 	movw	r1, #5390	; 0x150e
 80077aa:	480d      	ldr	r0, [pc, #52]	; (80077e0 <HAL_TIM_ConfigClockSource+0x4d8>)
 80077ac:	f7f9 ff71 	bl	8001692 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6818      	ldr	r0, [r3, #0]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	6859      	ldr	r1, [r3, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	461a      	mov	r2, r3
 80077be:	f000 fb78 	bl	8007eb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2160      	movs	r1, #96	; 0x60
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fba2 	bl	8007f12 <TIM_ITRx_SetConfig>
      break;
 80077ce:	e091      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x5ec>
 80077d0:	40010000 	.word	0x40010000
 80077d4:	40000400 	.word	0x40000400
 80077d8:	40000800 	.word	0x40000800
 80077dc:	40000c00 	.word	0x40000c00
 80077e0:	080106b8 	.word	0x080106b8
 80077e4:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a48      	ldr	r2, [pc, #288]	; (8007910 <HAL_TIM_ConfigClockSource+0x608>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d01d      	beq.n	800782e <HAL_TIM_ConfigClockSource+0x526>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fa:	d018      	beq.n	800782e <HAL_TIM_ConfigClockSource+0x526>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a44      	ldr	r2, [pc, #272]	; (8007914 <HAL_TIM_ConfigClockSource+0x60c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d013      	beq.n	800782e <HAL_TIM_ConfigClockSource+0x526>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a43      	ldr	r2, [pc, #268]	; (8007918 <HAL_TIM_ConfigClockSource+0x610>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d00e      	beq.n	800782e <HAL_TIM_ConfigClockSource+0x526>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a41      	ldr	r2, [pc, #260]	; (800791c <HAL_TIM_ConfigClockSource+0x614>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d009      	beq.n	800782e <HAL_TIM_ConfigClockSource+0x526>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a40      	ldr	r2, [pc, #256]	; (8007920 <HAL_TIM_ConfigClockSource+0x618>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d004      	beq.n	800782e <HAL_TIM_ConfigClockSource+0x526>
 8007824:	f241 511a 	movw	r1, #5402	; 0x151a
 8007828:	483e      	ldr	r0, [pc, #248]	; (8007924 <HAL_TIM_ConfigClockSource+0x61c>)
 800782a:	f7f9 ff32 	bl	8001692 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007836:	d014      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0x55a>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d010      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0x55a>
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00c      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0x55a>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d008      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0x55a>
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b0a      	cmp	r3, #10
 8007856:	d004      	beq.n	8007862 <HAL_TIM_ConfigClockSource+0x55a>
 8007858:	f241 511d 	movw	r1, #5405	; 0x151d
 800785c:	4831      	ldr	r0, [pc, #196]	; (8007924 <HAL_TIM_ConfigClockSource+0x61c>)
 800785e:	f7f9 ff18 	bl	8001692 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	2b0f      	cmp	r3, #15
 8007868:	d904      	bls.n	8007874 <HAL_TIM_ConfigClockSource+0x56c>
 800786a:	f241 511e 	movw	r1, #5406	; 0x151e
 800786e:	482d      	ldr	r0, [pc, #180]	; (8007924 <HAL_TIM_ConfigClockSource+0x61c>)
 8007870:	f7f9 ff0f 	bl	8001692 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	6859      	ldr	r1, [r3, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	461a      	mov	r2, r3
 8007882:	f000 fae7 	bl	8007e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2140      	movs	r1, #64	; 0x40
 800788c:	4618      	mov	r0, r3
 800788e:	f000 fb40 	bl	8007f12 <TIM_ITRx_SetConfig>
      break;
 8007892:	e02f      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1d      	ldr	r2, [pc, #116]	; (8007910 <HAL_TIM_ConfigClockSource+0x608>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d01d      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x5d2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a6:	d018      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x5d2>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a19      	ldr	r2, [pc, #100]	; (8007914 <HAL_TIM_ConfigClockSource+0x60c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d013      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x5d2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a18      	ldr	r2, [pc, #96]	; (8007918 <HAL_TIM_ConfigClockSource+0x610>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00e      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x5d2>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a16      	ldr	r2, [pc, #88]	; (800791c <HAL_TIM_ConfigClockSource+0x614>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d009      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x5d2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a15      	ldr	r2, [pc, #84]	; (8007920 <HAL_TIM_ConfigClockSource+0x618>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d004      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x5d2>
 80078d0:	f241 512d 	movw	r1, #5421	; 0x152d
 80078d4:	4813      	ldr	r0, [pc, #76]	; (8007924 <HAL_TIM_ConfigClockSource+0x61c>)
 80078d6:	f7f9 fedc 	bl	8001692 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4619      	mov	r1, r3
 80078e4:	4610      	mov	r0, r2
 80078e6:	f000 fb14 	bl	8007f12 <TIM_ITRx_SetConfig>
      break;
 80078ea:	e003      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
      break;
 80078f0:	e000      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80078f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	40010000 	.word	0x40010000
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	40000c00 	.word	0x40000c00
 8007920:	40014000 	.word	0x40014000
 8007924:	080106b8 	.word	0x080106b8

08007928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a34      	ldr	r2, [pc, #208]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00f      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007946:	d00b      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a31      	ldr	r2, [pc, #196]	; (8007a10 <TIM_Base_SetConfig+0xe8>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d007      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a30      	ldr	r2, [pc, #192]	; (8007a14 <TIM_Base_SetConfig+0xec>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d003      	beq.n	8007960 <TIM_Base_SetConfig+0x38>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a2f      	ldr	r2, [pc, #188]	; (8007a18 <TIM_Base_SetConfig+0xf0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d108      	bne.n	8007972 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a25      	ldr	r2, [pc, #148]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01b      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007980:	d017      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <TIM_Base_SetConfig+0xe8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <TIM_Base_SetConfig+0xec>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00f      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <TIM_Base_SetConfig+0xf0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00b      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1f      	ldr	r2, [pc, #124]	; (8007a1c <TIM_Base_SetConfig+0xf4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <TIM_Base_SetConfig+0xf8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_Base_SetConfig+0x8a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <TIM_Base_SetConfig+0xfc>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d108      	bne.n	80079c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a08      	ldr	r2, [pc, #32]	; (8007a0c <TIM_Base_SetConfig+0xe4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d103      	bne.n	80079f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	691a      	ldr	r2, [r3, #16]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	615a      	str	r2, [r3, #20]
}
 80079fe:	bf00      	nop
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40000400 	.word	0x40000400
 8007a14:	40000800 	.word	0x40000800
 8007a18:	40000c00 	.word	0x40000c00
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f023 0201 	bic.w	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f023 0302 	bic.w	r3, r3, #2
 8007a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a30      	ldr	r2, [pc, #192]	; (8007b40 <TIM_OC1_SetConfig+0x118>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d119      	bne.n	8007ab8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <TIM_OC1_SetConfig+0x76>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d004      	beq.n	8007a9e <TIM_OC1_SetConfig+0x76>
 8007a94:	f641 21cb 	movw	r1, #6859	; 0x1acb
 8007a98:	482a      	ldr	r0, [pc, #168]	; (8007b44 <TIM_OC1_SetConfig+0x11c>)
 8007a9a:	f7f9 fdfa 	bl	8001692 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f023 0308 	bic.w	r3, r3, #8
 8007aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f023 0304 	bic.w	r3, r3, #4
 8007ab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a21      	ldr	r2, [pc, #132]	; (8007b40 <TIM_OC1_SetConfig+0x118>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d12d      	bne.n	8007b1c <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac8:	d008      	beq.n	8007adc <TIM_OC1_SetConfig+0xb4>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <TIM_OC1_SetConfig+0xb4>
 8007ad2:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 8007ad6:	481b      	ldr	r0, [pc, #108]	; (8007b44 <TIM_OC1_SetConfig+0x11c>)
 8007ad8:	f7f9 fddb 	bl	8001692 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ae4:	d008      	beq.n	8007af8 <TIM_OC1_SetConfig+0xd0>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <TIM_OC1_SetConfig+0xd0>
 8007aee:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 8007af2:	4814      	ldr	r0, [pc, #80]	; (8007b44 <TIM_OC1_SetConfig+0x11c>)
 8007af4:	f7f9 fdcd 	bl	8001692 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	621a      	str	r2, [r3, #32]
}
 8007b36:	bf00      	nop
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	40010000 	.word	0x40010000
 8007b44:	080106b8 	.word	0x080106b8

08007b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f023 0210 	bic.w	r2, r3, #16
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f023 0320 	bic.w	r3, r3, #32
 8007b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	011b      	lsls	r3, r3, #4
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a31      	ldr	r2, [pc, #196]	; (8007c68 <TIM_OC2_SetConfig+0x120>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d11a      	bne.n	8007bde <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <TIM_OC2_SetConfig+0x7a>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d004      	beq.n	8007bc2 <TIM_OC2_SetConfig+0x7a>
 8007bb8:	f641 3116 	movw	r1, #6934	; 0x1b16
 8007bbc:	482b      	ldr	r0, [pc, #172]	; (8007c6c <TIM_OC2_SetConfig+0x124>)
 8007bbe:	f7f9 fd68 	bl	8001692 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	011b      	lsls	r3, r3, #4
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bdc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a21      	ldr	r2, [pc, #132]	; (8007c68 <TIM_OC2_SetConfig+0x120>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d12f      	bne.n	8007c46 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bee:	d008      	beq.n	8007c02 <TIM_OC2_SetConfig+0xba>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d004      	beq.n	8007c02 <TIM_OC2_SetConfig+0xba>
 8007bf8:	f641 3124 	movw	r1, #6948	; 0x1b24
 8007bfc:	481b      	ldr	r0, [pc, #108]	; (8007c6c <TIM_OC2_SetConfig+0x124>)
 8007bfe:	f7f9 fd48 	bl	8001692 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c0a:	d008      	beq.n	8007c1e <TIM_OC2_SetConfig+0xd6>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <TIM_OC2_SetConfig+0xd6>
 8007c14:	f641 3125 	movw	r1, #6949	; 0x1b25
 8007c18:	4814      	ldr	r0, [pc, #80]	; (8007c6c <TIM_OC2_SetConfig+0x124>)
 8007c1a:	f7f9 fd3a 	bl	8001692 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	621a      	str	r2, [r3, #32]
}
 8007c60:	bf00      	nop
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	40010000 	.word	0x40010000
 8007c6c:	080106b8 	.word	0x080106b8

08007c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0303 	bic.w	r3, r3, #3
 8007ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a31      	ldr	r2, [pc, #196]	; (8007d90 <TIM_OC3_SetConfig+0x120>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d11a      	bne.n	8007d04 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d008      	beq.n	8007ce8 <TIM_OC3_SetConfig+0x78>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d004      	beq.n	8007ce8 <TIM_OC3_SetConfig+0x78>
 8007cde:	f641 3161 	movw	r1, #7009	; 0x1b61
 8007ce2:	482c      	ldr	r0, [pc, #176]	; (8007d94 <TIM_OC3_SetConfig+0x124>)
 8007ce4:	f7f9 fcd5 	bl	8001692 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a22      	ldr	r2, [pc, #136]	; (8007d90 <TIM_OC3_SetConfig+0x120>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d12f      	bne.n	8007d6c <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d14:	d008      	beq.n	8007d28 <TIM_OC3_SetConfig+0xb8>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <TIM_OC3_SetConfig+0xb8>
 8007d1e:	f641 316e 	movw	r1, #7022	; 0x1b6e
 8007d22:	481c      	ldr	r0, [pc, #112]	; (8007d94 <TIM_OC3_SetConfig+0x124>)
 8007d24:	f7f9 fcb5 	bl	8001692 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d30:	d008      	beq.n	8007d44 <TIM_OC3_SetConfig+0xd4>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <TIM_OC3_SetConfig+0xd4>
 8007d3a:	f641 316f 	movw	r1, #7023	; 0x1b6f
 8007d3e:	4815      	ldr	r0, [pc, #84]	; (8007d94 <TIM_OC3_SetConfig+0x124>)
 8007d40:	f7f9 fca7 	bl	8001692 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	40010000 	.word	0x40010000
 8007d94:	080106b8 	.word	0x080106b8

08007d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	031b      	lsls	r3, r3, #12
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a16      	ldr	r2, [pc, #88]	; (8007e4c <TIM_OC4_SetConfig+0xb4>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d117      	bne.n	8007e28 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e00:	d008      	beq.n	8007e14 <TIM_OC4_SetConfig+0x7c>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <TIM_OC4_SetConfig+0x7c>
 8007e0a:	f641 31ad 	movw	r1, #7085	; 0x1bad
 8007e0e:	4810      	ldr	r0, [pc, #64]	; (8007e50 <TIM_OC4_SetConfig+0xb8>)
 8007e10:	f7f9 fc3f 	bl	8001692 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	019b      	lsls	r3, r3, #6
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	621a      	str	r2, [r3, #32]
}
 8007e42:	bf00      	nop
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	40010000 	.word	0x40010000
 8007e50:	080106b8 	.word	0x080106b8

08007e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	f023 0201 	bic.w	r2, r3, #1
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f023 030a 	bic.w	r3, r3, #10
 8007e90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	621a      	str	r2, [r3, #32]
}
 8007ea6:	bf00      	nop
 8007ea8:	371c      	adds	r7, #28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b087      	sub	sp, #28
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f023 0210 	bic.w	r2, r3, #16
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	031b      	lsls	r3, r3, #12
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	621a      	str	r2, [r3, #32]
}
 8007f06:	bf00      	nop
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b085      	sub	sp, #20
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	f043 0307 	orr.w	r3, r3, #7
 8007f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	609a      	str	r2, [r3, #8]
}
 8007f3c:	bf00      	nop
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	021a      	lsls	r2, r3, #8
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	609a      	str	r2, [r3, #8]
}
 8007f7c:	bf00      	nop
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a55      	ldr	r2, [pc, #340]	; (80080ec <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d018      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa4:	d013      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a51      	ldr	r2, [pc, #324]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00e      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a4f      	ldr	r2, [pc, #316]	; (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d009      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a4e      	ldr	r2, [pc, #312]	; (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d004      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007fc4:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8007fc8:	484c      	ldr	r0, [pc, #304]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007fca:	f7f9 fb62 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d020      	beq.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b10      	cmp	r3, #16
 8007fdc:	d01c      	beq.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d018      	beq.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b30      	cmp	r3, #48	; 0x30
 8007fec:	d014      	beq.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b40      	cmp	r3, #64	; 0x40
 8007ff4:	d010      	beq.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b50      	cmp	r3, #80	; 0x50
 8007ffc:	d00c      	beq.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b60      	cmp	r3, #96	; 0x60
 8008004:	d008      	beq.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b70      	cmp	r3, #112	; 0x70
 800800c:	d004      	beq.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800800e:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8008012:	483a      	ldr	r0, [pc, #232]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008014:	f7f9 fb3d 	bl	8001692 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b80      	cmp	r3, #128	; 0x80
 800801e:	d008      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8008028:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800802c:	4833      	ldr	r0, [pc, #204]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800802e:	f7f9 fb30 	bl	8001692 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800803c:	2302      	movs	r3, #2
 800803e:	e050      	b.n	80080e2 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a1b      	ldr	r2, [pc, #108]	; (80080ec <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d018      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808c:	d013      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a17      	ldr	r2, [pc, #92]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00e      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a15      	ldr	r2, [pc, #84]	; (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d009      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a14      	ldr	r2, [pc, #80]	; (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d004      	beq.n	80080b6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a13      	ldr	r2, [pc, #76]	; (8008100 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d10c      	bne.n	80080d0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	40010000 	.word	0x40010000
 80080f0:	40000400 	.word	0x40000400
 80080f4:	40000800 	.word	0x40000800
 80080f8:	40000c00 	.word	0x40000c00
 80080fc:	080106f0 	.word	0x080106f0
 8008100:	40014000 	.word	0x40014000

08008104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e0a0      	b.n	8008258 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d02c      	beq.n	8008178 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a4f      	ldr	r2, [pc, #316]	; (8008260 <HAL_UART_Init+0x15c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00e      	beq.n	8008146 <HAL_UART_Init+0x42>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a4d      	ldr	r2, [pc, #308]	; (8008264 <HAL_UART_Init+0x160>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d009      	beq.n	8008146 <HAL_UART_Init+0x42>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a4c      	ldr	r2, [pc, #304]	; (8008268 <HAL_UART_Init+0x164>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d004      	beq.n	8008146 <HAL_UART_Init+0x42>
 800813c:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8008140:	484a      	ldr	r0, [pc, #296]	; (800826c <HAL_UART_Init+0x168>)
 8008142:	f7f9 faa6 	bl	8001692 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d028      	beq.n	80081a0 <HAL_UART_Init+0x9c>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008156:	d023      	beq.n	80081a0 <HAL_UART_Init+0x9c>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008160:	d01e      	beq.n	80081a0 <HAL_UART_Init+0x9c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800816a:	d019      	beq.n	80081a0 <HAL_UART_Init+0x9c>
 800816c:	f240 1173 	movw	r1, #371	; 0x173
 8008170:	483e      	ldr	r0, [pc, #248]	; (800826c <HAL_UART_Init+0x168>)
 8008172:	f7f9 fa8e 	bl	8001692 <assert_failed>
 8008176:	e013      	b.n	80081a0 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a38      	ldr	r2, [pc, #224]	; (8008260 <HAL_UART_Init+0x15c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00e      	beq.n	80081a0 <HAL_UART_Init+0x9c>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a37      	ldr	r2, [pc, #220]	; (8008264 <HAL_UART_Init+0x160>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_UART_Init+0x9c>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a35      	ldr	r2, [pc, #212]	; (8008268 <HAL_UART_Init+0x164>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <HAL_UART_Init+0x9c>
 8008196:	f240 1177 	movw	r1, #375	; 0x177
 800819a:	4834      	ldr	r0, [pc, #208]	; (800826c <HAL_UART_Init+0x168>)
 800819c:	f7f9 fa79 	bl	8001692 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <HAL_UART_Init+0xb8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b0:	d004      	beq.n	80081bc <HAL_UART_Init+0xb8>
 80081b2:	f240 1179 	movw	r1, #377	; 0x179
 80081b6:	482d      	ldr	r0, [pc, #180]	; (800826c <HAL_UART_Init+0x168>)
 80081b8:	f7f9 fa6b 	bl	8001692 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d009      	beq.n	80081d8 <HAL_UART_Init+0xd4>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081cc:	d004      	beq.n	80081d8 <HAL_UART_Init+0xd4>
 80081ce:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80081d2:	4826      	ldr	r0, [pc, #152]	; (800826c <HAL_UART_Init+0x168>)
 80081d4:	f7f9 fa5d 	bl	8001692 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d106      	bne.n	80081f2 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7f9 fd83 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2224      	movs	r2, #36	; 0x24
 80081f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008208:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f930 	bl	8008470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800821e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695a      	ldr	r2, [r3, #20]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800822e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800823e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	40011000 	.word	0x40011000
 8008264:	40004400 	.word	0x40004400
 8008268:	40011400 	.word	0x40011400
 800826c:	0801072c 	.word	0x0801072c

08008270 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08a      	sub	sp, #40	; 0x28
 8008274:	af02      	add	r7, sp, #8
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	4613      	mov	r3, r2
 800827e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b20      	cmp	r3, #32
 800828e:	d17c      	bne.n	800838a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <HAL_UART_Transmit+0x2c>
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e075      	b.n	800838c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_UART_Transmit+0x3e>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e06e      	b.n	800838c <HAL_UART_Transmit+0x11c>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2221      	movs	r2, #33	; 0x21
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082c4:	f7f9 fdf0 	bl	8001ea8 <HAL_GetTick>
 80082c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	88fa      	ldrh	r2, [r7, #6]
 80082ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	88fa      	ldrh	r2, [r7, #6]
 80082d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082de:	d108      	bne.n	80082f2 <HAL_UART_Transmit+0x82>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80082e8:	2300      	movs	r3, #0
 80082ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	61bb      	str	r3, [r7, #24]
 80082f0:	e003      	b.n	80082fa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008302:	e02a      	b.n	800835a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2200      	movs	r2, #0
 800830c:	2180      	movs	r1, #128	; 0x80
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f840 	bl	8008394 <UART_WaitOnFlagUntilTimeout>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e036      	b.n	800838c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10b      	bne.n	800833c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008332:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	3302      	adds	r3, #2
 8008338:	61bb      	str	r3, [r7, #24]
 800833a:	e007      	b.n	800834c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	781a      	ldrb	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	3301      	adds	r3, #1
 800834a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008350:	b29b      	uxth	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1cf      	bne.n	8008304 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2200      	movs	r2, #0
 800836c:	2140      	movs	r1, #64	; 0x40
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 f810 	bl	8008394 <UART_WaitOnFlagUntilTimeout>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e006      	b.n	800838c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2220      	movs	r2, #32
 8008382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	e000      	b.n	800838c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800838a:	2302      	movs	r3, #2
  }
}
 800838c:	4618      	mov	r0, r3
 800838e:	3720      	adds	r7, #32
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b090      	sub	sp, #64	; 0x40
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	4613      	mov	r3, r2
 80083a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a4:	e050      	b.n	8008448 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ac:	d04c      	beq.n	8008448 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80083ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d007      	beq.n	80083c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80083b4:	f7f9 fd78 	bl	8001ea8 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d241      	bcs.n	8008448 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	330c      	adds	r3, #12
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	e853 3f00 	ldrex	r3, [r3]
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	330c      	adds	r3, #12
 80083e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083e4:	637a      	str	r2, [r7, #52]	; 0x34
 80083e6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083ec:	e841 2300 	strex	r3, r2, [r1]
 80083f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e5      	bne.n	80083c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3314      	adds	r3, #20
 80083fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	613b      	str	r3, [r7, #16]
   return(result);
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f023 0301 	bic.w	r3, r3, #1
 800840e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3314      	adds	r3, #20
 8008416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008418:	623a      	str	r2, [r7, #32]
 800841a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	69f9      	ldr	r1, [r7, #28]
 800841e:	6a3a      	ldr	r2, [r7, #32]
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	61bb      	str	r3, [r7, #24]
   return(result);
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e5      	bne.n	80083f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e00f      	b.n	8008468 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	4013      	ands	r3, r2
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	429a      	cmp	r2, r3
 8008456:	bf0c      	ite	eq
 8008458:	2301      	moveq	r3, #1
 800845a:	2300      	movne	r3, #0
 800845c:	b2db      	uxtb	r3, r3
 800845e:	461a      	mov	r2, r3
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	429a      	cmp	r2, r3
 8008464:	d09f      	beq.n	80083a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3740      	adds	r7, #64	; 0x40
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008474:	b09f      	sub	sp, #124	; 0x7c
 8008476:	af00      	add	r7, sp, #0
 8008478:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800847a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	4b9b      	ldr	r3, [pc, #620]	; (80086ec <UART_SetConfig+0x27c>)
 8008480:	429a      	cmp	r2, r3
 8008482:	d904      	bls.n	800848e <UART_SetConfig+0x1e>
 8008484:	f640 6156 	movw	r1, #3670	; 0xe56
 8008488:	4899      	ldr	r0, [pc, #612]	; (80086f0 <UART_SetConfig+0x280>)
 800848a:	f7f9 f902 	bl	8001692 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800848e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d009      	beq.n	80084aa <UART_SetConfig+0x3a>
 8008496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849e:	d004      	beq.n	80084aa <UART_SetConfig+0x3a>
 80084a0:	f640 6157 	movw	r1, #3671	; 0xe57
 80084a4:	4892      	ldr	r0, [pc, #584]	; (80086f0 <UART_SetConfig+0x280>)
 80084a6:	f7f9 f8f4 	bl	8001692 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80084aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00e      	beq.n	80084d0 <UART_SetConfig+0x60>
 80084b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ba:	d009      	beq.n	80084d0 <UART_SetConfig+0x60>
 80084bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084c4:	d004      	beq.n	80084d0 <UART_SetConfig+0x60>
 80084c6:	f640 6158 	movw	r1, #3672	; 0xe58
 80084ca:	4889      	ldr	r0, [pc, #548]	; (80086f0 <UART_SetConfig+0x280>)
 80084cc:	f7f9 f8e1 	bl	8001692 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80084d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d2:	695a      	ldr	r2, [r3, #20]
 80084d4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80084d8:	4013      	ands	r3, r2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <UART_SetConfig+0x76>
 80084de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d104      	bne.n	80084f0 <UART_SetConfig+0x80>
 80084e6:	f640 6159 	movw	r1, #3673	; 0xe59
 80084ea:	4881      	ldr	r0, [pc, #516]	; (80086f0 <UART_SetConfig+0x280>)
 80084ec:	f7f9 f8d1 	bl	8001692 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084fc:	68d9      	ldr	r1, [r3, #12]
 80084fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	ea40 0301 	orr.w	r3, r0, r1
 8008506:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	431a      	orrs	r2, r3
 8008512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	431a      	orrs	r2, r3
 8008518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	4313      	orrs	r3, r2
 800851e:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800852a:	f021 010c 	bic.w	r1, r1, #12
 800852e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008534:	430b      	orrs	r3, r1
 8008536:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008544:	6999      	ldr	r1, [r3, #24]
 8008546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	ea40 0301 	orr.w	r3, r0, r1
 800854e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	4b67      	ldr	r3, [pc, #412]	; (80086f4 <UART_SetConfig+0x284>)
 8008556:	429a      	cmp	r2, r3
 8008558:	d004      	beq.n	8008564 <UART_SetConfig+0xf4>
 800855a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4b66      	ldr	r3, [pc, #408]	; (80086f8 <UART_SetConfig+0x288>)
 8008560:	429a      	cmp	r2, r3
 8008562:	d103      	bne.n	800856c <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008564:	f7fe f9e4 	bl	8006930 <HAL_RCC_GetPCLK2Freq>
 8008568:	6778      	str	r0, [r7, #116]	; 0x74
 800856a:	e002      	b.n	8008572 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800856c:	f7fe f9cc 	bl	8006908 <HAL_RCC_GetPCLK1Freq>
 8008570:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800857a:	f040 80c1 	bne.w	8008700 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800857e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008580:	461c      	mov	r4, r3
 8008582:	f04f 0500 	mov.w	r5, #0
 8008586:	4622      	mov	r2, r4
 8008588:	462b      	mov	r3, r5
 800858a:	1891      	adds	r1, r2, r2
 800858c:	6439      	str	r1, [r7, #64]	; 0x40
 800858e:	415b      	adcs	r3, r3
 8008590:	647b      	str	r3, [r7, #68]	; 0x44
 8008592:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008596:	1912      	adds	r2, r2, r4
 8008598:	eb45 0303 	adc.w	r3, r5, r3
 800859c:	f04f 0000 	mov.w	r0, #0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	00d9      	lsls	r1, r3, #3
 80085a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085aa:	00d0      	lsls	r0, r2, #3
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	1911      	adds	r1, r2, r4
 80085b2:	6639      	str	r1, [r7, #96]	; 0x60
 80085b4:	416b      	adcs	r3, r5
 80085b6:	667b      	str	r3, [r7, #100]	; 0x64
 80085b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	461a      	mov	r2, r3
 80085be:	f04f 0300 	mov.w	r3, #0
 80085c2:	1891      	adds	r1, r2, r2
 80085c4:	63b9      	str	r1, [r7, #56]	; 0x38
 80085c6:	415b      	adcs	r3, r3
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085ce:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80085d2:	f7f8 fb61 	bl	8000c98 <__aeabi_uldivmod>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4b48      	ldr	r3, [pc, #288]	; (80086fc <UART_SetConfig+0x28c>)
 80085dc:	fba3 2302 	umull	r2, r3, r3, r2
 80085e0:	095b      	lsrs	r3, r3, #5
 80085e2:	011e      	lsls	r6, r3, #4
 80085e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085e6:	461c      	mov	r4, r3
 80085e8:	f04f 0500 	mov.w	r5, #0
 80085ec:	4622      	mov	r2, r4
 80085ee:	462b      	mov	r3, r5
 80085f0:	1891      	adds	r1, r2, r2
 80085f2:	6339      	str	r1, [r7, #48]	; 0x30
 80085f4:	415b      	adcs	r3, r3
 80085f6:	637b      	str	r3, [r7, #52]	; 0x34
 80085f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80085fc:	1912      	adds	r2, r2, r4
 80085fe:	eb45 0303 	adc.w	r3, r5, r3
 8008602:	f04f 0000 	mov.w	r0, #0
 8008606:	f04f 0100 	mov.w	r1, #0
 800860a:	00d9      	lsls	r1, r3, #3
 800860c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008610:	00d0      	lsls	r0, r2, #3
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	1911      	adds	r1, r2, r4
 8008618:	65b9      	str	r1, [r7, #88]	; 0x58
 800861a:	416b      	adcs	r3, r5
 800861c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800861e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	461a      	mov	r2, r3
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	1891      	adds	r1, r2, r2
 800862a:	62b9      	str	r1, [r7, #40]	; 0x28
 800862c:	415b      	adcs	r3, r3
 800862e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008630:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008634:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008638:	f7f8 fb2e 	bl	8000c98 <__aeabi_uldivmod>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4b2e      	ldr	r3, [pc, #184]	; (80086fc <UART_SetConfig+0x28c>)
 8008642:	fba3 1302 	umull	r1, r3, r3, r2
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	2164      	movs	r1, #100	; 0x64
 800864a:	fb01 f303 	mul.w	r3, r1, r3
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	3332      	adds	r3, #50	; 0x32
 8008654:	4a29      	ldr	r2, [pc, #164]	; (80086fc <UART_SetConfig+0x28c>)
 8008656:	fba2 2303 	umull	r2, r3, r2, r3
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008662:	441e      	add	r6, r3
 8008664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008666:	4618      	mov	r0, r3
 8008668:	f04f 0100 	mov.w	r1, #0
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	1894      	adds	r4, r2, r2
 8008672:	623c      	str	r4, [r7, #32]
 8008674:	415b      	adcs	r3, r3
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
 8008678:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800867c:	1812      	adds	r2, r2, r0
 800867e:	eb41 0303 	adc.w	r3, r1, r3
 8008682:	f04f 0400 	mov.w	r4, #0
 8008686:	f04f 0500 	mov.w	r5, #0
 800868a:	00dd      	lsls	r5, r3, #3
 800868c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008690:	00d4      	lsls	r4, r2, #3
 8008692:	4622      	mov	r2, r4
 8008694:	462b      	mov	r3, r5
 8008696:	1814      	adds	r4, r2, r0
 8008698:	653c      	str	r4, [r7, #80]	; 0x50
 800869a:	414b      	adcs	r3, r1
 800869c:	657b      	str	r3, [r7, #84]	; 0x54
 800869e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	461a      	mov	r2, r3
 80086a4:	f04f 0300 	mov.w	r3, #0
 80086a8:	1891      	adds	r1, r2, r2
 80086aa:	61b9      	str	r1, [r7, #24]
 80086ac:	415b      	adcs	r3, r3
 80086ae:	61fb      	str	r3, [r7, #28]
 80086b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80086b8:	f7f8 faee 	bl	8000c98 <__aeabi_uldivmod>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <UART_SetConfig+0x28c>)
 80086c2:	fba3 1302 	umull	r1, r3, r3, r2
 80086c6:	095b      	lsrs	r3, r3, #5
 80086c8:	2164      	movs	r1, #100	; 0x64
 80086ca:	fb01 f303 	mul.w	r3, r1, r3
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	3332      	adds	r3, #50	; 0x32
 80086d4:	4a09      	ldr	r2, [pc, #36]	; (80086fc <UART_SetConfig+0x28c>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	f003 0207 	and.w	r2, r3, #7
 80086e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4432      	add	r2, r6
 80086e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086e8:	e0c4      	b.n	8008874 <UART_SetConfig+0x404>
 80086ea:	bf00      	nop
 80086ec:	00a037a0 	.word	0x00a037a0
 80086f0:	0801072c 	.word	0x0801072c
 80086f4:	40011000 	.word	0x40011000
 80086f8:	40011400 	.word	0x40011400
 80086fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008702:	461c      	mov	r4, r3
 8008704:	f04f 0500 	mov.w	r5, #0
 8008708:	4622      	mov	r2, r4
 800870a:	462b      	mov	r3, r5
 800870c:	1891      	adds	r1, r2, r2
 800870e:	6139      	str	r1, [r7, #16]
 8008710:	415b      	adcs	r3, r3
 8008712:	617b      	str	r3, [r7, #20]
 8008714:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008718:	1912      	adds	r2, r2, r4
 800871a:	eb45 0303 	adc.w	r3, r5, r3
 800871e:	f04f 0000 	mov.w	r0, #0
 8008722:	f04f 0100 	mov.w	r1, #0
 8008726:	00d9      	lsls	r1, r3, #3
 8008728:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800872c:	00d0      	lsls	r0, r2, #3
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	eb12 0804 	adds.w	r8, r2, r4
 8008736:	eb43 0905 	adc.w	r9, r3, r5
 800873a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	4618      	mov	r0, r3
 8008740:	f04f 0100 	mov.w	r1, #0
 8008744:	f04f 0200 	mov.w	r2, #0
 8008748:	f04f 0300 	mov.w	r3, #0
 800874c:	008b      	lsls	r3, r1, #2
 800874e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008752:	0082      	lsls	r2, r0, #2
 8008754:	4640      	mov	r0, r8
 8008756:	4649      	mov	r1, r9
 8008758:	f7f8 fa9e 	bl	8000c98 <__aeabi_uldivmod>
 800875c:	4602      	mov	r2, r0
 800875e:	460b      	mov	r3, r1
 8008760:	4b47      	ldr	r3, [pc, #284]	; (8008880 <UART_SetConfig+0x410>)
 8008762:	fba3 2302 	umull	r2, r3, r3, r2
 8008766:	095b      	lsrs	r3, r3, #5
 8008768:	011e      	lsls	r6, r3, #4
 800876a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800876c:	4618      	mov	r0, r3
 800876e:	f04f 0100 	mov.w	r1, #0
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	1894      	adds	r4, r2, r2
 8008778:	60bc      	str	r4, [r7, #8]
 800877a:	415b      	adcs	r3, r3
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008782:	1812      	adds	r2, r2, r0
 8008784:	eb41 0303 	adc.w	r3, r1, r3
 8008788:	f04f 0400 	mov.w	r4, #0
 800878c:	f04f 0500 	mov.w	r5, #0
 8008790:	00dd      	lsls	r5, r3, #3
 8008792:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008796:	00d4      	lsls	r4, r2, #3
 8008798:	4622      	mov	r2, r4
 800879a:	462b      	mov	r3, r5
 800879c:	1814      	adds	r4, r2, r0
 800879e:	64bc      	str	r4, [r7, #72]	; 0x48
 80087a0:	414b      	adcs	r3, r1
 80087a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f04f 0100 	mov.w	r1, #0
 80087ae:	f04f 0200 	mov.w	r2, #0
 80087b2:	f04f 0300 	mov.w	r3, #0
 80087b6:	008b      	lsls	r3, r1, #2
 80087b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80087bc:	0082      	lsls	r2, r0, #2
 80087be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80087c2:	f7f8 fa69 	bl	8000c98 <__aeabi_uldivmod>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4b2d      	ldr	r3, [pc, #180]	; (8008880 <UART_SetConfig+0x410>)
 80087cc:	fba3 1302 	umull	r1, r3, r3, r2
 80087d0:	095b      	lsrs	r3, r3, #5
 80087d2:	2164      	movs	r1, #100	; 0x64
 80087d4:	fb01 f303 	mul.w	r3, r1, r3
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	011b      	lsls	r3, r3, #4
 80087dc:	3332      	adds	r3, #50	; 0x32
 80087de:	4a28      	ldr	r2, [pc, #160]	; (8008880 <UART_SetConfig+0x410>)
 80087e0:	fba2 2303 	umull	r2, r3, r2, r3
 80087e4:	095b      	lsrs	r3, r3, #5
 80087e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087ea:	441e      	add	r6, r3
 80087ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ee:	4618      	mov	r0, r3
 80087f0:	f04f 0100 	mov.w	r1, #0
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	1894      	adds	r4, r2, r2
 80087fa:	603c      	str	r4, [r7, #0]
 80087fc:	415b      	adcs	r3, r3
 80087fe:	607b      	str	r3, [r7, #4]
 8008800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008804:	1812      	adds	r2, r2, r0
 8008806:	eb41 0303 	adc.w	r3, r1, r3
 800880a:	f04f 0400 	mov.w	r4, #0
 800880e:	f04f 0500 	mov.w	r5, #0
 8008812:	00dd      	lsls	r5, r3, #3
 8008814:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008818:	00d4      	lsls	r4, r2, #3
 800881a:	4622      	mov	r2, r4
 800881c:	462b      	mov	r3, r5
 800881e:	eb12 0a00 	adds.w	sl, r2, r0
 8008822:	eb43 0b01 	adc.w	fp, r3, r1
 8008826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	4618      	mov	r0, r3
 800882c:	f04f 0100 	mov.w	r1, #0
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	008b      	lsls	r3, r1, #2
 800883a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800883e:	0082      	lsls	r2, r0, #2
 8008840:	4650      	mov	r0, sl
 8008842:	4659      	mov	r1, fp
 8008844:	f7f8 fa28 	bl	8000c98 <__aeabi_uldivmod>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4b0c      	ldr	r3, [pc, #48]	; (8008880 <UART_SetConfig+0x410>)
 800884e:	fba3 1302 	umull	r1, r3, r3, r2
 8008852:	095b      	lsrs	r3, r3, #5
 8008854:	2164      	movs	r1, #100	; 0x64
 8008856:	fb01 f303 	mul.w	r3, r1, r3
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	011b      	lsls	r3, r3, #4
 800885e:	3332      	adds	r3, #50	; 0x32
 8008860:	4a07      	ldr	r2, [pc, #28]	; (8008880 <UART_SetConfig+0x410>)
 8008862:	fba2 2303 	umull	r2, r3, r2, r3
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	f003 020f 	and.w	r2, r3, #15
 800886c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4432      	add	r2, r6
 8008872:	609a      	str	r2, [r3, #8]
}
 8008874:	bf00      	nop
 8008876:	377c      	adds	r7, #124	; 0x7c
 8008878:	46bd      	mov	sp, r7
 800887a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887e:	bf00      	nop
 8008880:	51eb851f 	.word	0x51eb851f

08008884 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008884:	b084      	sub	sp, #16
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	f107 001c 	add.w	r0, r7, #28
 8008892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	2b01      	cmp	r3, #1
 800889a:	d122      	bne.n	80088e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80088b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d105      	bne.n	80088d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f9a0 	bl	8008c1c <USB_CoreReset>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]
 80088e0:	e01a      	b.n	8008918 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f994 	bl	8008c1c <USB_CoreReset>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80088f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	639a      	str	r2, [r3, #56]	; 0x38
 800890a:	e005      	b.n	8008918 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	2b01      	cmp	r3, #1
 800891c:	d10b      	bne.n	8008936 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f043 0206 	orr.w	r2, r3, #6
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f043 0220 	orr.w	r2, r3, #32
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008942:	b004      	add	sp, #16
 8008944:	4770      	bx	lr

08008946 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f043 0201 	orr.w	r2, r3, #1
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f023 0201 	bic.w	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	460b      	mov	r3, r1
 8008994:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089a6:	78fb      	ldrb	r3, [r7, #3]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d115      	bne.n	80089d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089b8:	2001      	movs	r0, #1
 80089ba:	f7f9 fa81 	bl	8001ec0 <HAL_Delay>
      ms++;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3301      	adds	r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f91a 	bl	8008bfe <USB_GetMode>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d01e      	beq.n	8008a0e <USB_SetCurrentMode+0x84>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b31      	cmp	r3, #49	; 0x31
 80089d4:	d9f0      	bls.n	80089b8 <USB_SetCurrentMode+0x2e>
 80089d6:	e01a      	b.n	8008a0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d115      	bne.n	8008a0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089ea:	2001      	movs	r0, #1
 80089ec:	f7f9 fa68 	bl	8001ec0 <HAL_Delay>
      ms++;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3301      	adds	r3, #1
 80089f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f901 	bl	8008bfe <USB_GetMode>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d005      	beq.n	8008a0e <USB_SetCurrentMode+0x84>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2b31      	cmp	r3, #49	; 0x31
 8008a06:	d9f0      	bls.n	80089ea <USB_SetCurrentMode+0x60>
 8008a08:	e001      	b.n	8008a0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e005      	b.n	8008a1a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b32      	cmp	r3, #50	; 0x32
 8008a12:	d101      	bne.n	8008a18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e000      	b.n	8008a1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
	...

08008a24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	019b      	lsls	r3, r3, #6
 8008a36:	f043 0220 	orr.w	r2, r3, #32
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3301      	adds	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	4a08      	ldr	r2, [pc, #32]	; (8008a68 <USB_FlushTxFifo+0x44>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d901      	bls.n	8008a4e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e006      	b.n	8008a5c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d0f1      	beq.n	8008a3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr
 8008a68:	00030d40 	.word	0x00030d40

08008a6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2210      	movs	r2, #16
 8008a7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3301      	adds	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	4a08      	ldr	r2, [pc, #32]	; (8008aa8 <USB_FlushRxFifo+0x3c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d901      	bls.n	8008a8e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e006      	b.n	8008a9c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	f003 0310 	and.w	r3, r3, #16
 8008a96:	2b10      	cmp	r3, #16
 8008a98:	d0f1      	beq.n	8008a7e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	00030d40 	.word	0x00030d40

08008aac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b089      	sub	sp, #36	; 0x24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	461a      	mov	r2, r3
 8008aba:	460b      	mov	r3, r1
 8008abc:	71fb      	strb	r3, [r7, #7]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008aca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d123      	bne.n	8008b1a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ad2:	88bb      	ldrh	r3, [r7, #4]
 8008ad4:	3303      	adds	r3, #3
 8008ad6:	089b      	lsrs	r3, r3, #2
 8008ad8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008ada:	2300      	movs	r3, #0
 8008adc:	61bb      	str	r3, [r7, #24]
 8008ade:	e018      	b.n	8008b12 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	031a      	lsls	r2, r3, #12
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aec:	461a      	mov	r2, r3
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	3301      	adds	r3, #1
 8008af8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	3301      	adds	r3, #1
 8008afe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	3301      	adds	r3, #1
 8008b04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d3e2      	bcc.n	8008ae0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3724      	adds	r7, #36	; 0x24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b08b      	sub	sp, #44	; 0x2c
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008b3e:	88fb      	ldrh	r3, [r7, #6]
 8008b40:	089b      	lsrs	r3, r3, #2
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008b46:	88fb      	ldrh	r3, [r7, #6]
 8008b48:	f003 0303 	and.w	r3, r3, #3
 8008b4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008b4e:	2300      	movs	r3, #0
 8008b50:	623b      	str	r3, [r7, #32]
 8008b52:	e014      	b.n	8008b7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	3301      	adds	r3, #1
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	3301      	adds	r3, #1
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	3301      	adds	r3, #1
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	3301      	adds	r3, #1
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	623b      	str	r3, [r7, #32]
 8008b7e:	6a3a      	ldr	r2, [r7, #32]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d3e6      	bcc.n	8008b54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b86:	8bfb      	ldrh	r3, [r7, #30]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01e      	beq.n	8008bca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b96:	461a      	mov	r2, r3
 8008b98:	f107 0310 	add.w	r3, r7, #16
 8008b9c:	6812      	ldr	r2, [r2, #0]
 8008b9e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	701a      	strb	r2, [r3, #0]
      i++;
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	623b      	str	r3, [r7, #32]
      pDest++;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	3301      	adds	r3, #1
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008bbe:	8bfb      	ldrh	r3, [r7, #30]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008bc4:	8bfb      	ldrh	r3, [r7, #30]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1ea      	bne.n	8008ba0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	372c      	adds	r7, #44	; 0x2c
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4013      	ands	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
	...

08008c1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	4a13      	ldr	r2, [pc, #76]	; (8008c7c <USB_CoreReset+0x60>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d901      	bls.n	8008c38 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e01a      	b.n	8008c6e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	daf3      	bge.n	8008c28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	f043 0201 	orr.w	r2, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3301      	adds	r3, #1
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	4a09      	ldr	r2, [pc, #36]	; (8008c7c <USB_CoreReset+0x60>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d901      	bls.n	8008c60 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e006      	b.n	8008c6e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d0f1      	beq.n	8008c50 <USB_CoreReset+0x34>

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	00030d40 	.word	0x00030d40

08008c80 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c80:	b084      	sub	sp, #16
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	f107 001c 	add.w	r0, r7, #28
 8008c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d018      	beq.n	8008d04 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d10a      	bne.n	8008cee <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ce6:	f043 0304 	orr.w	r3, r3, #4
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	e014      	b.n	8008d18 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008cfc:	f023 0304 	bic.w	r3, r3, #4
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	e009      	b.n	8008d18 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d12:	f023 0304 	bic.w	r3, r3, #4
 8008d16:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008d18:	2110      	movs	r1, #16
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7ff fe82 	bl	8008a24 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff fea3 	bl	8008a6c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d26:	2300      	movs	r3, #0
 8008d28:	60fb      	str	r3, [r7, #12]
 8008d2a:	e015      	b.n	8008d58 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d38:	461a      	mov	r2, r3
 8008d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d3e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d3e5      	bcc.n	8008d2c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d80:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a13      	ldr	r2, [pc, #76]	; (8008dd4 <USB_HostInit+0x154>)
 8008d86:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a13      	ldr	r2, [pc, #76]	; (8008dd8 <USB_HostInit+0x158>)
 8008d8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008d90:	e009      	b.n	8008da6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2280      	movs	r2, #128	; 0x80
 8008d96:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a10      	ldr	r2, [pc, #64]	; (8008ddc <USB_HostInit+0x15c>)
 8008d9c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a0f      	ldr	r2, [pc, #60]	; (8008de0 <USB_HostInit+0x160>)
 8008da2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d105      	bne.n	8008db8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	f043 0210 	orr.w	r2, r3, #16
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <USB_HostInit+0x164>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dd0:	b004      	add	sp, #16
 8008dd2:	4770      	bx	lr
 8008dd4:	01000200 	.word	0x01000200
 8008dd8:	00e00300 	.word	0x00e00300
 8008ddc:	00600080 	.word	0x00600080
 8008de0:	004000e0 	.word	0x004000e0
 8008de4:	a3200008 	.word	0xa3200008

08008de8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e06:	f023 0303 	bic.w	r3, r3, #3
 8008e0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008e20:	4313      	orrs	r3, r2
 8008e22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d107      	bne.n	8008e3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e30:	461a      	mov	r2, r3
 8008e32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008e36:	6053      	str	r3, [r2, #4]
 8008e38:	e009      	b.n	8008e4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008e3a:	78fb      	ldrb	r3, [r7, #3]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d106      	bne.n	8008e4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e46:	461a      	mov	r2, r3
 8008e48:	f241 7370 	movw	r3, #6000	; 0x1770
 8008e4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008e7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008e8c:	2064      	movs	r0, #100	; 0x64
 8008e8e:	f7f9 f817 	bl	8001ec0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008ea0:	200a      	movs	r0, #10
 8008ea2:	f7f9 f80d 	bl	8001ec0 <HAL_Delay>

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008ed4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d109      	bne.n	8008ef4 <USB_DriveVbus+0x44>
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d106      	bne.n	8008ef4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008eee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ef2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008efe:	d109      	bne.n	8008f14 <USB_DriveVbus+0x64>
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d106      	bne.n	8008f14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	0c5b      	lsrs	r3, r3, #17
 8008f40:	f003 0303 	and.w	r3, r3, #3
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	b29b      	uxth	r3, r3
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
	...

08008f74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	4611      	mov	r1, r2
 8008f80:	461a      	mov	r2, r3
 8008f82:	4603      	mov	r3, r0
 8008f84:	70fb      	strb	r3, [r7, #3]
 8008f86:	460b      	mov	r3, r1
 8008f88:	70bb      	strb	r3, [r7, #2]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008faa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d87e      	bhi.n	80090b0 <USB_HC_Init+0x13c>
 8008fb2:	a201      	add	r2, pc, #4	; (adr r2, 8008fb8 <USB_HC_Init+0x44>)
 8008fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb8:	08008fc9 	.word	0x08008fc9
 8008fbc:	08009073 	.word	0x08009073
 8008fc0:	08008fc9 	.word	0x08008fc9
 8008fc4:	08009035 	.word	0x08009035
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	f240 439d 	movw	r3, #1181	; 0x49d
 8008fda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008fdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	da10      	bge.n	8009006 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009002:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009004:	e057      	b.n	80090b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800900e:	2b00      	cmp	r3, #0
 8009010:	d051      	beq.n	80090b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009012:	78fb      	ldrb	r3, [r7, #3]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	4413      	add	r3, r2
 800901a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	78fa      	ldrb	r2, [r7, #3]
 8009022:	0151      	lsls	r1, r2, #5
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	440a      	add	r2, r1
 8009028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800902c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009030:	60d3      	str	r3, [r2, #12]
      break;
 8009032:	e040      	b.n	80090b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009034:	78fb      	ldrb	r3, [r7, #3]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	4413      	add	r3, r2
 800903c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009040:	461a      	mov	r2, r3
 8009042:	f240 639d 	movw	r3, #1693	; 0x69d
 8009046:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009048:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800904c:	2b00      	cmp	r3, #0
 800904e:	da34      	bge.n	80090ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	4413      	add	r3, r2
 8009058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	0151      	lsls	r1, r2, #5
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	440a      	add	r2, r1
 8009066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800906a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800906e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009070:	e023      	b.n	80090ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	015a      	lsls	r2, r3, #5
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	4413      	add	r3, r2
 800907a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800907e:	461a      	mov	r2, r3
 8009080:	f240 2325 	movw	r3, #549	; 0x225
 8009084:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009086:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800908a:	2b00      	cmp	r3, #0
 800908c:	da17      	bge.n	80090be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	4413      	add	r3, r2
 8009096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	0151      	lsls	r1, r2, #5
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	440a      	add	r2, r1
 80090a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80090ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80090ae:	e006      	b.n	80090be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	77fb      	strb	r3, [r7, #31]
      break;
 80090b4:	e004      	b.n	80090c0 <USB_HC_Init+0x14c>
      break;
 80090b6:	bf00      	nop
 80090b8:	e002      	b.n	80090c0 <USB_HC_Init+0x14c>
      break;
 80090ba:	bf00      	nop
 80090bc:	e000      	b.n	80090c0 <USB_HC_Init+0x14c>
      break;
 80090be:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090c6:	699a      	ldr	r2, [r3, #24]
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	2101      	movs	r1, #1
 80090d0:	fa01 f303 	lsl.w	r3, r1, r3
 80090d4:	6939      	ldr	r1, [r7, #16]
 80090d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80090da:	4313      	orrs	r3, r2
 80090dc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80090ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	da03      	bge.n	80090fa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80090f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090f6:	61bb      	str	r3, [r7, #24]
 80090f8:	e001      	b.n	80090fe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff ff0f 	bl	8008f22 <USB_GetHostSpeed>
 8009104:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009106:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800910a:	2b02      	cmp	r3, #2
 800910c:	d106      	bne.n	800911c <USB_HC_Init+0x1a8>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b02      	cmp	r3, #2
 8009112:	d003      	beq.n	800911c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e001      	b.n	8009120 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009120:	787b      	ldrb	r3, [r7, #1]
 8009122:	059b      	lsls	r3, r3, #22
 8009124:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009128:	78bb      	ldrb	r3, [r7, #2]
 800912a:	02db      	lsls	r3, r3, #11
 800912c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009130:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009132:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009136:	049b      	lsls	r3, r3, #18
 8009138:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800913c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800913e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009140:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009144:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800914a:	78fb      	ldrb	r3, [r7, #3]
 800914c:	0159      	lsls	r1, r3, #5
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	440b      	add	r3, r1
 8009152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009156:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800915c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800915e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009162:	2b03      	cmp	r3, #3
 8009164:	d10f      	bne.n	8009186 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009166:	78fb      	ldrb	r3, [r7, #3]
 8009168:	015a      	lsls	r2, r3, #5
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	4413      	add	r3, r2
 800916e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	78fa      	ldrb	r2, [r7, #3]
 8009176:	0151      	lsls	r1, r2, #5
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	440a      	add	r2, r1
 800917c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009184:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009186:	7ffb      	ldrb	r3, [r7, #31]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3720      	adds	r7, #32
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08c      	sub	sp, #48	; 0x30
 8009194:	af02      	add	r7, sp, #8
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	4613      	mov	r3, r2
 800919c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80091a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091ac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d02d      	beq.n	8009216 <USB_HC_StartXfer+0x86>
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	791b      	ldrb	r3, [r3, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d129      	bne.n	8009216 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80091c2:	79fb      	ldrb	r3, [r7, #7]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d117      	bne.n	80091f8 <USB_HC_StartXfer+0x68>
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	79db      	ldrb	r3, [r3, #7]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d003      	beq.n	80091d8 <USB_HC_StartXfer+0x48>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	79db      	ldrb	r3, [r3, #7]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d10f      	bne.n	80091f8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	69fa      	ldr	r2, [r7, #28]
 80091e8:	0151      	lsls	r1, r2, #5
 80091ea:	6a3a      	ldr	r2, [r7, #32]
 80091ec:	440a      	add	r2, r1
 80091ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10b      	bne.n	8009216 <USB_HC_StartXfer+0x86>
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	795b      	ldrb	r3, [r3, #5]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d107      	bne.n	8009216 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	785b      	ldrb	r3, [r3, #1]
 800920a:	4619      	mov	r1, r3
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 fa2f 	bl	8009670 <USB_DoPing>
      return HAL_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	e0f8      	b.n	8009408 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d018      	beq.n	8009250 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	8912      	ldrh	r2, [r2, #8]
 8009226:	4413      	add	r3, r2
 8009228:	3b01      	subs	r3, #1
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	8912      	ldrh	r2, [r2, #8]
 800922e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009232:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009234:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009236:	8b7b      	ldrh	r3, [r7, #26]
 8009238:	429a      	cmp	r2, r3
 800923a:	d90b      	bls.n	8009254 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800923c:	8b7b      	ldrh	r3, [r7, #26]
 800923e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009240:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	8912      	ldrh	r2, [r2, #8]
 8009246:	fb02 f203 	mul.w	r2, r2, r3
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	611a      	str	r2, [r3, #16]
 800924e:	e001      	b.n	8009254 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009250:	2301      	movs	r3, #1
 8009252:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	78db      	ldrb	r3, [r3, #3]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d007      	beq.n	800926c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800925c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	8912      	ldrh	r2, [r2, #8]
 8009262:	fb02 f203 	mul.w	r2, r2, r3
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	611a      	str	r2, [r3, #16]
 800926a:	e003      	b.n	8009274 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	695a      	ldr	r2, [r3, #20]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800927c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800927e:	04d9      	lsls	r1, r3, #19
 8009280:	4b63      	ldr	r3, [pc, #396]	; (8009410 <USB_HC_StartXfer+0x280>)
 8009282:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009284:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	7a9b      	ldrb	r3, [r3, #10]
 800928a:	075b      	lsls	r3, r3, #29
 800928c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009290:	69f9      	ldr	r1, [r7, #28]
 8009292:	0148      	lsls	r0, r1, #5
 8009294:	6a39      	ldr	r1, [r7, #32]
 8009296:	4401      	add	r1, r0
 8009298:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800929c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800929e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d009      	beq.n	80092ba <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	68d9      	ldr	r1, [r3, #12]
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092b6:	460a      	mov	r2, r1
 80092b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bf0c      	ite	eq
 80092ca:	2301      	moveq	r3, #1
 80092cc:	2300      	movne	r3, #0
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	69fa      	ldr	r2, [r7, #28]
 80092e2:	0151      	lsls	r1, r2, #5
 80092e4:	6a3a      	ldr	r2, [r7, #32]
 80092e6:	440a      	add	r2, r1
 80092e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80092f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	7e7b      	ldrb	r3, [r7, #25]
 8009302:	075b      	lsls	r3, r3, #29
 8009304:	69f9      	ldr	r1, [r7, #28]
 8009306:	0148      	lsls	r0, r1, #5
 8009308:	6a39      	ldr	r1, [r7, #32]
 800930a:	4401      	add	r1, r0
 800930c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009310:	4313      	orrs	r3, r2
 8009312:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	015a      	lsls	r2, r3, #5
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	4413      	add	r3, r2
 800931c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800932a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	78db      	ldrb	r3, [r3, #3]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	e003      	b.n	8009346 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009344:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800934c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	4413      	add	r3, r2
 8009356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935a:	461a      	mov	r2, r3
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	e04e      	b.n	8009408 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	78db      	ldrb	r3, [r3, #3]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d149      	bne.n	8009406 <USB_HC_StartXfer+0x276>
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d045      	beq.n	8009406 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	79db      	ldrb	r3, [r3, #7]
 800937e:	2b03      	cmp	r3, #3
 8009380:	d830      	bhi.n	80093e4 <USB_HC_StartXfer+0x254>
 8009382:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <USB_HC_StartXfer+0x1f8>)
 8009384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009388:	08009399 	.word	0x08009399
 800938c:	080093bd 	.word	0x080093bd
 8009390:	08009399 	.word	0x08009399
 8009394:	080093bd 	.word	0x080093bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	3303      	adds	r3, #3
 800939e:	089b      	lsrs	r3, r3, #2
 80093a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80093a2:	8afa      	ldrh	r2, [r7, #22]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d91c      	bls.n	80093e8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	f043 0220 	orr.w	r2, r3, #32
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80093ba:	e015      	b.n	80093e8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	3303      	adds	r3, #3
 80093c2:	089b      	lsrs	r3, r3, #2
 80093c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80093c6:	8afa      	ldrh	r2, [r7, #22]
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d90a      	bls.n	80093ec <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80093e2:	e003      	b.n	80093ec <USB_HC_StartXfer+0x25c>

      default:
        break;
 80093e4:	bf00      	nop
 80093e6:	e002      	b.n	80093ee <USB_HC_StartXfer+0x25e>
        break;
 80093e8:	bf00      	nop
 80093ea:	e000      	b.n	80093ee <USB_HC_StartXfer+0x25e>
        break;
 80093ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	68d9      	ldr	r1, [r3, #12]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	785a      	ldrb	r2, [r3, #1]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2000      	movs	r0, #0
 80093fe:	9000      	str	r0, [sp, #0]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff fb53 	bl	8008aac <USB_WritePacket>
  }

  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3728      	adds	r7, #40	; 0x28
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	1ff80000 	.word	0x1ff80000

08009414 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	b29b      	uxth	r3, r3
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009436:	b480      	push	{r7}
 8009438:	b089      	sub	sp, #36	; 0x24
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	460b      	mov	r3, r1
 8009440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009446:	78fb      	ldrb	r3, [r7, #3]
 8009448:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800944a:	2300      	movs	r3, #0
 800944c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	4413      	add	r3, r2
 8009456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	0c9b      	lsrs	r3, r3, #18
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	4413      	add	r3, r2
 800946c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	0fdb      	lsrs	r3, r3, #31
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f003 0320 	and.w	r3, r3, #32
 8009482:	2b20      	cmp	r3, #32
 8009484:	d104      	bne.n	8009490 <USB_HC_Halt+0x5a>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	e0e8      	b.n	8009662 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d002      	beq.n	800949c <USB_HC_Halt+0x66>
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	2b02      	cmp	r3, #2
 800949a:	d173      	bne.n	8009584 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	0151      	lsls	r1, r2, #5
 80094ae:	69ba      	ldr	r2, [r7, #24]
 80094b0:	440a      	add	r2, r1
 80094b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094ba:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f040 80cb 	bne.w	8009660 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d143      	bne.n	800955e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094f4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	440a      	add	r2, r1
 800950c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009514:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	4413      	add	r3, r2
 800951e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	440a      	add	r2, r1
 800952c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009534:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	3301      	adds	r3, #1
 800953a:	61fb      	str	r3, [r7, #28]
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009542:	d81d      	bhi.n	8009580 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	4413      	add	r3, r2
 800954c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800955a:	d0ec      	beq.n	8009536 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800955c:	e080      	b.n	8009660 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	4413      	add	r3, r2
 8009566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	0151      	lsls	r1, r2, #5
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	440a      	add	r2, r1
 8009574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800957c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800957e:	e06f      	b.n	8009660 <USB_HC_Halt+0x22a>
            break;
 8009580:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009582:	e06d      	b.n	8009660 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	4413      	add	r3, r2
 800958c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	0151      	lsls	r1, r2, #5
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	440a      	add	r2, r1
 800959a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800959e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d143      	bne.n	800963c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	0151      	lsls	r1, r2, #5
 80095c6:	69ba      	ldr	r2, [r7, #24]
 80095c8:	440a      	add	r2, r1
 80095ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	0151      	lsls	r1, r2, #5
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	440a      	add	r2, r1
 80095ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	0151      	lsls	r1, r2, #5
 8009606:	69ba      	ldr	r2, [r7, #24]
 8009608:	440a      	add	r2, r1
 800960a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800960e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009612:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	3301      	adds	r3, #1
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009620:	d81d      	bhi.n	800965e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	4413      	add	r3, r2
 800962a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009638:	d0ec      	beq.n	8009614 <USB_HC_Halt+0x1de>
 800963a:	e011      	b.n	8009660 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	4413      	add	r3, r2
 8009644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	0151      	lsls	r1, r2, #5
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	440a      	add	r2, r1
 8009652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009656:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800965a:	6013      	str	r3, [r2, #0]
 800965c:	e000      	b.n	8009660 <USB_HC_Halt+0x22a>
          break;
 800965e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3724      	adds	r7, #36	; 0x24
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
	...

08009670 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009684:	2301      	movs	r3, #1
 8009686:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	04da      	lsls	r2, r3, #19
 800968c:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <USB_DoPing+0x74>)
 800968e:	4013      	ands	r3, r2
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	0151      	lsls	r1, r2, #5
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	440a      	add	r2, r1
 8009698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800969c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ce:	461a      	mov	r2, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	1ff80000 	.word	0x1ff80000

080096e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff f935 	bl	8008968 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80096fe:	2110      	movs	r1, #16
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff f98f 	bl	8008a24 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7ff f9b0 	bl	8008a6c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800970c:	2300      	movs	r3, #0
 800970e:	613b      	str	r3, [r7, #16]
 8009710:	e01f      	b.n	8009752 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4413      	add	r3, r2
 800971a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009728:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009730:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009738:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	4413      	add	r3, r2
 8009742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009746:	461a      	mov	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	3301      	adds	r3, #1
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	2b0f      	cmp	r3, #15
 8009756:	d9dc      	bls.n	8009712 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009758:	2300      	movs	r3, #0
 800975a:	613b      	str	r3, [r7, #16]
 800975c:	e034      	b.n	80097c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	015a      	lsls	r2, r3, #5
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4413      	add	r3, r2
 8009766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009774:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800977c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009784:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	015a      	lsls	r2, r3, #5
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4413      	add	r3, r2
 800978e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009792:	461a      	mov	r2, r3
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	3301      	adds	r3, #1
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097a4:	d80c      	bhi.n	80097c0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097bc:	d0ec      	beq.n	8009798 <USB_StopHost+0xb0>
 80097be:	e000      	b.n	80097c2 <USB_StopHost+0xda>
        break;
 80097c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	3301      	adds	r3, #1
 80097c6:	613b      	str	r3, [r7, #16]
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	2b0f      	cmp	r3, #15
 80097cc:	d9c7      	bls.n	800975e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097d4:	461a      	mov	r2, r3
 80097d6:	f04f 33ff 	mov.w	r3, #4294967295
 80097da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f04f 32ff 	mov.w	r2, #4294967295
 80097e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff f8ae 	bl	8008946 <USB_EnableGlobalInt>

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80097f4:	b590      	push	{r4, r7, lr}
 80097f6:	b089      	sub	sp, #36	; 0x24
 80097f8:	af04      	add	r7, sp, #16
 80097fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80097fc:	2301      	movs	r3, #1
 80097fe:	2202      	movs	r2, #2
 8009800:	2102      	movs	r1, #2
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fc66 	bl	800a0d4 <USBH_FindInterface>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	2bff      	cmp	r3, #255	; 0xff
 8009810:	d002      	beq.n	8009818 <USBH_CDC_InterfaceInit+0x24>
 8009812:	7bfb      	ldrb	r3, [r7, #15]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d901      	bls.n	800981c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009818:	2302      	movs	r3, #2
 800981a:	e13d      	b.n	8009a98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fc3b 	bl	800a09c <USBH_SelectInterface>
 8009826:	4603      	mov	r3, r0
 8009828:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009830:	2302      	movs	r3, #2
 8009832:	e131      	b.n	8009a98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800983a:	2050      	movs	r0, #80	; 0x50
 800983c:	f002 fa00 	bl	800bc40 <malloc>
 8009840:	4603      	mov	r3, r0
 8009842:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009854:	2302      	movs	r3, #2
 8009856:	e11f      	b.n	8009a98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009858:	2250      	movs	r2, #80	; 0x50
 800985a:	2100      	movs	r1, #0
 800985c:	68b8      	ldr	r0, [r7, #8]
 800985e:	f002 f9ff 	bl	800bc60 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009862:	7bfb      	ldrb	r3, [r7, #15]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	211a      	movs	r1, #26
 8009868:	fb01 f303 	mul.w	r3, r1, r3
 800986c:	4413      	add	r3, r2
 800986e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	b25b      	sxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	da15      	bge.n	80098a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	211a      	movs	r1, #26
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	4413      	add	r3, r2
 8009886:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800988a:	781a      	ldrb	r2, [r3, #0]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	211a      	movs	r1, #26
 8009896:	fb01 f303 	mul.w	r3, r1, r3
 800989a:	4413      	add	r3, r2
 800989c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80098a0:	881a      	ldrh	r2, [r3, #0]
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	785b      	ldrb	r3, [r3, #1]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f001 fe32 	bl	800b516 <USBH_AllocPipe>
 80098b2:	4603      	mov	r3, r0
 80098b4:	461a      	mov	r2, r3
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	7819      	ldrb	r1, [r3, #0]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	7858      	ldrb	r0, [r3, #1]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	8952      	ldrh	r2, [r2, #10]
 80098d2:	9202      	str	r2, [sp, #8]
 80098d4:	2203      	movs	r2, #3
 80098d6:	9201      	str	r2, [sp, #4]
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	4623      	mov	r3, r4
 80098dc:	4602      	mov	r2, r0
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f001 fdea 	bl	800b4b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	2200      	movs	r2, #0
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f002 f8f9 	bl	800bae4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80098f2:	2300      	movs	r3, #0
 80098f4:	2200      	movs	r2, #0
 80098f6:	210a      	movs	r1, #10
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fbeb 	bl	800a0d4 <USBH_FindInterface>
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	2bff      	cmp	r3, #255	; 0xff
 8009906:	d002      	beq.n	800990e <USBH_CDC_InterfaceInit+0x11a>
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d901      	bls.n	8009912 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800990e:	2302      	movs	r3, #2
 8009910:	e0c2      	b.n	8009a98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009912:	7bfb      	ldrb	r3, [r7, #15]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	211a      	movs	r1, #26
 8009918:	fb01 f303 	mul.w	r3, r1, r3
 800991c:	4413      	add	r3, r2
 800991e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	b25b      	sxtb	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	da16      	bge.n	8009958 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	211a      	movs	r1, #26
 8009930:	fb01 f303 	mul.w	r3, r1, r3
 8009934:	4413      	add	r3, r2
 8009936:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800993a:	781a      	ldrb	r2, [r3, #0]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	211a      	movs	r1, #26
 8009946:	fb01 f303 	mul.w	r3, r1, r3
 800994a:	4413      	add	r3, r2
 800994c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009950:	881a      	ldrh	r2, [r3, #0]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	835a      	strh	r2, [r3, #26]
 8009956:	e015      	b.n	8009984 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	211a      	movs	r1, #26
 800995e:	fb01 f303 	mul.w	r3, r1, r3
 8009962:	4413      	add	r3, r2
 8009964:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	211a      	movs	r1, #26
 8009974:	fb01 f303 	mul.w	r3, r1, r3
 8009978:	4413      	add	r3, r2
 800997a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800997e:	881a      	ldrh	r2, [r3, #0]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	211a      	movs	r1, #26
 800998a:	fb01 f303 	mul.w	r3, r1, r3
 800998e:	4413      	add	r3, r2
 8009990:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	b25b      	sxtb	r3, r3
 8009998:	2b00      	cmp	r3, #0
 800999a:	da16      	bge.n	80099ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	211a      	movs	r1, #26
 80099a2:	fb01 f303 	mul.w	r3, r1, r3
 80099a6:	4413      	add	r3, r2
 80099a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80099ac:	781a      	ldrb	r2, [r3, #0]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	211a      	movs	r1, #26
 80099b8:	fb01 f303 	mul.w	r3, r1, r3
 80099bc:	4413      	add	r3, r2
 80099be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80099c2:	881a      	ldrh	r2, [r3, #0]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	835a      	strh	r2, [r3, #26]
 80099c8:	e015      	b.n	80099f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	211a      	movs	r1, #26
 80099d0:	fb01 f303 	mul.w	r3, r1, r3
 80099d4:	4413      	add	r3, r2
 80099d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80099da:	781a      	ldrb	r2, [r3, #0]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	211a      	movs	r1, #26
 80099e6:	fb01 f303 	mul.w	r3, r1, r3
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80099f0:	881a      	ldrh	r2, [r3, #0]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	7b9b      	ldrb	r3, [r3, #14]
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f001 fd8a 	bl	800b516 <USBH_AllocPipe>
 8009a02:	4603      	mov	r3, r0
 8009a04:	461a      	mov	r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	7bdb      	ldrb	r3, [r3, #15]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f001 fd80 	bl	800b516 <USBH_AllocPipe>
 8009a16:	4603      	mov	r3, r0
 8009a18:	461a      	mov	r2, r3
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	7b59      	ldrb	r1, [r3, #13]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	7b98      	ldrb	r0, [r3, #14]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	8b12      	ldrh	r2, [r2, #24]
 8009a36:	9202      	str	r2, [sp, #8]
 8009a38:	2202      	movs	r2, #2
 8009a3a:	9201      	str	r2, [sp, #4]
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	4623      	mov	r3, r4
 8009a40:	4602      	mov	r2, r0
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f001 fd38 	bl	800b4b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	7b19      	ldrb	r1, [r3, #12]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	7bd8      	ldrb	r0, [r3, #15]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	8b52      	ldrh	r2, [r2, #26]
 8009a60:	9202      	str	r2, [sp, #8]
 8009a62:	2202      	movs	r2, #2
 8009a64:	9201      	str	r2, [sp, #4]
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	4623      	mov	r3, r4
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f001 fd23 	bl	800b4b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	7b5b      	ldrb	r3, [r3, #13]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f002 f82e 	bl	800bae4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	7b1b      	ldrb	r3, [r3, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f002 f827 	bl	800bae4 <USBH_LL_SetToggle>

  return USBH_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd90      	pop	{r4, r7, pc}

08009aa0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00e      	beq.n	8009ad8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f001 fd18 	bl	800b4f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 fd43 	bl	800b558 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	7b1b      	ldrb	r3, [r3, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00e      	beq.n	8009afe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	7b1b      	ldrb	r3, [r3, #12]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f001 fd05 	bl	800b4f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	7b1b      	ldrb	r3, [r3, #12]
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 fd30 	bl	800b558 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	7b5b      	ldrb	r3, [r3, #13]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00e      	beq.n	8009b24 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	7b5b      	ldrb	r3, [r3, #13]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f001 fcf2 	bl	800b4f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	7b5b      	ldrb	r3, [r3, #13]
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 fd1d 	bl	800b558 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00b      	beq.n	8009b48 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f002 f889 	bl	800bc50 <free>
    phost->pActiveClass->pData = 0U;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b44:	2200      	movs	r2, #0
 8009b46:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3340      	adds	r3, #64	; 0x40
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f8b1 	bl	8009cd2 <GetLineCoding>
 8009b70:	4603      	mov	r3, r0
 8009b72:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009b74:	7afb      	ldrb	r3, [r7, #11]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d105      	bne.n	8009b86 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b80:	2102      	movs	r1, #2
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009b86:	7afb      	ldrb	r3, [r7, #11]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009bb0:	2b04      	cmp	r3, #4
 8009bb2:	d877      	bhi.n	8009ca4 <USBH_CDC_Process+0x114>
 8009bb4:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <USBH_CDC_Process+0x2c>)
 8009bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bba:	bf00      	nop
 8009bbc:	08009bd1 	.word	0x08009bd1
 8009bc0:	08009bd7 	.word	0x08009bd7
 8009bc4:	08009c07 	.word	0x08009c07
 8009bc8:	08009c7b 	.word	0x08009c7b
 8009bcc:	08009c89 	.word	0x08009c89
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bd4:	e06d      	b.n	8009cb2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f897 	bl	8009d10 <SetLineCoding>
 8009be2:	4603      	mov	r3, r0
 8009be4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d104      	bne.n	8009bf6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009bf4:	e058      	b.n	8009ca8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d055      	beq.n	8009ca8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2204      	movs	r2, #4
 8009c00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009c04:	e050      	b.n	8009ca8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	3340      	adds	r3, #64	; 0x40
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f860 	bl	8009cd2 <GetLineCoding>
 8009c12:	4603      	mov	r3, r0
 8009c14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009c16:	7bbb      	ldrb	r3, [r7, #14]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d126      	bne.n	8009c6a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c2e:	791b      	ldrb	r3, [r3, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d13b      	bne.n	8009cac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c3e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d133      	bne.n	8009cac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c4e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d12b      	bne.n	8009cac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c5c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d124      	bne.n	8009cac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f958 	bl	8009f18 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009c68:	e020      	b.n	8009cac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d01d      	beq.n	8009cac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2204      	movs	r2, #4
 8009c74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009c78:	e018      	b.n	8009cac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f867 	bl	8009d4e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f8da 	bl	8009e3a <CDC_ProcessReception>
      break;
 8009c86:	e014      	b.n	8009cb2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 ffe3 	bl	800ac56 <USBH_ClrFeature>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10a      	bne.n	8009cb0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009ca2:	e005      	b.n	8009cb0 <USBH_CDC_Process+0x120>

    default:
      break;
 8009ca4:	bf00      	nop
 8009ca6:	e004      	b.n	8009cb2 <USBH_CDC_Process+0x122>
      break;
 8009ca8:	bf00      	nop
 8009caa:	e002      	b.n	8009cb2 <USBH_CDC_Process+0x122>
      break;
 8009cac:	bf00      	nop
 8009cae:	e000      	b.n	8009cb2 <USBH_CDC_Process+0x122>
      break;
 8009cb0:	bf00      	nop

  }

  return status;
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	22a1      	movs	r2, #161	; 0xa1
 8009ce0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2221      	movs	r2, #33	; 0x21
 8009ce6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2207      	movs	r2, #7
 8009cf8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2207      	movs	r2, #7
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 f988 	bl	800b016 <USBH_CtlReq>
 8009d06:	4603      	mov	r3, r0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2221      	movs	r2, #33	; 0x21
 8009d1e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2220      	movs	r2, #32
 8009d24:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2207      	movs	r2, #7
 8009d36:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2207      	movs	r2, #7
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 f969 	bl	800b016 <USBH_CtlReq>
 8009d44:	4603      	mov	r3, r0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b086      	sub	sp, #24
 8009d52:	af02      	add	r7, sp, #8
 8009d54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d60:	2300      	movs	r3, #0
 8009d62:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d002      	beq.n	8009d74 <CDC_ProcessTransmission+0x26>
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d023      	beq.n	8009dba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009d72:	e05e      	b.n	8009e32 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	8b12      	ldrh	r2, [r2, #24]
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d90b      	bls.n	8009d98 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	69d9      	ldr	r1, [r3, #28]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	8b1a      	ldrh	r2, [r3, #24]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	7b5b      	ldrb	r3, [r3, #13]
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	9000      	str	r0, [sp, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 fb4e 	bl	800b432 <USBH_BulkSendData>
 8009d96:	e00b      	b.n	8009db0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	7b5b      	ldrb	r3, [r3, #13]
 8009da6:	2001      	movs	r0, #1
 8009da8:	9000      	str	r0, [sp, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f001 fb41 	bl	800b432 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009db8:	e03b      	b.n	8009e32 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	7b5b      	ldrb	r3, [r3, #13]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f001 fe65 	bl	800ba90 <USBH_LL_GetURBState>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009dca:	7afb      	ldrb	r3, [r7, #11]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d128      	bne.n	8009e22 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	8b12      	ldrh	r2, [r2, #24]
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d90e      	bls.n	8009dfa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	8b12      	ldrh	r2, [r2, #24]
 8009de4:	1a9a      	subs	r2, r3, r2
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	8b12      	ldrh	r2, [r2, #24]
 8009df2:	441a      	add	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	61da      	str	r2, [r3, #28]
 8009df8:	e002      	b.n	8009e00 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009e10:	e00e      	b.n	8009e30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f868 	bl	8009ef0 <USBH_CDC_TransmitCallback>
      break;
 8009e20:	e006      	b.n	8009e30 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009e22:	7afb      	ldrb	r3, [r7, #11]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d103      	bne.n	8009e30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009e30:	bf00      	nop
  }
}
 8009e32:	bf00      	nop
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b086      	sub	sp, #24
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d002      	beq.n	8009e60 <CDC_ProcessReception+0x26>
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	d00e      	beq.n	8009e7c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009e5e:	e043      	b.n	8009ee8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	6a19      	ldr	r1, [r3, #32]
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	8b5a      	ldrh	r2, [r3, #26]
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	7b1b      	ldrb	r3, [r3, #12]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 fb05 	bl	800b47c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2204      	movs	r2, #4
 8009e76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009e7a:	e035      	b.n	8009ee8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	7b1b      	ldrb	r3, [r3, #12]
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f001 fe04 	bl	800ba90 <USBH_LL_GetURBState>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009e8c:	7cfb      	ldrb	r3, [r7, #19]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d129      	bne.n	8009ee6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	7b1b      	ldrb	r3, [r3, #12]
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 fd67 	bl	800b96c <USBH_LL_GetLastXferSize>
 8009e9e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d016      	beq.n	8009ed8 <CDC_ProcessReception+0x9e>
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	8b5b      	ldrh	r3, [r3, #26]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d910      	bls.n	8009ed8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	1ad2      	subs	r2, r2, r3
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	6a1a      	ldr	r2, [r3, #32]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	441a      	add	r2, r3
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2203      	movs	r2, #3
 8009ed2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009ed6:	e006      	b.n	8009ee6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f80f 	bl	8009f04 <USBH_CDC_ReceiveCallback>
      break;
 8009ee6:	bf00      	nop
  }
}
 8009ee8:	bf00      	nop
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	4613      	mov	r3, r2
 8009f38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d101      	bne.n	8009f44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009f40:	2302      	movs	r3, #2
 8009f42:	e029      	b.n	8009f98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	79fa      	ldrb	r2, [r7, #7]
 8009f48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 f81f 	bl	8009fa0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f001 fc37 	bl	800b804 <USBH_LL_Init>

  return USBH_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009fac:	2300      	movs	r3, #0
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	e009      	b.n	8009fc6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	33e0      	adds	r3, #224	; 0xe0
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	60fb      	str	r3, [r7, #12]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b0e      	cmp	r3, #14
 8009fca:	d9f2      	bls.n	8009fb2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	60fb      	str	r3, [r7, #12]
 8009fd0:	e009      	b.n	8009fe6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fdc:	2200      	movs	r2, #0
 8009fde:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fec:	d3f1      	bcc.n	8009fd2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2240      	movs	r2, #64	; 0x40
 800a012:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d016      	beq.n	800a08a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10e      	bne.n	800a084 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a06c:	1c59      	adds	r1, r3, #1
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	33de      	adds	r3, #222	; 0xde
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
 800a082:	e004      	b.n	800a08e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a084:	2302      	movs	r3, #2
 800a086:	73fb      	strb	r3, [r7, #15]
 800a088:	e001      	b.n	800a08e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a08a:	2302      	movs	r3, #2
 800a08c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a0b2:	78fa      	ldrb	r2, [r7, #3]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d204      	bcs.n	800a0c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	78fa      	ldrb	r2, [r7, #3]
 800a0bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a0c0:	e001      	b.n	800a0c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	4608      	mov	r0, r1
 800a0de:	4611      	mov	r1, r2
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	70fb      	strb	r3, [r7, #3]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	70bb      	strb	r3, [r7, #2]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a0fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a0fe:	e025      	b.n	800a14c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a100:	7dfb      	ldrb	r3, [r7, #23]
 800a102:	221a      	movs	r2, #26
 800a104:	fb02 f303 	mul.w	r3, r2, r3
 800a108:	3308      	adds	r3, #8
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	4413      	add	r3, r2
 800a10e:	3302      	adds	r3, #2
 800a110:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	795b      	ldrb	r3, [r3, #5]
 800a116:	78fa      	ldrb	r2, [r7, #3]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d002      	beq.n	800a122 <USBH_FindInterface+0x4e>
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	2bff      	cmp	r3, #255	; 0xff
 800a120:	d111      	bne.n	800a146 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a126:	78ba      	ldrb	r2, [r7, #2]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d002      	beq.n	800a132 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a12c:	78bb      	ldrb	r3, [r7, #2]
 800a12e:	2bff      	cmp	r3, #255	; 0xff
 800a130:	d109      	bne.n	800a146 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a136:	787a      	ldrb	r2, [r7, #1]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d002      	beq.n	800a142 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a13c:	787b      	ldrb	r3, [r7, #1]
 800a13e:	2bff      	cmp	r3, #255	; 0xff
 800a140:	d101      	bne.n	800a146 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a142:	7dfb      	ldrb	r3, [r7, #23]
 800a144:	e006      	b.n	800a154 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	3301      	adds	r3, #1
 800a14a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d9d6      	bls.n	800a100 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a152:	23ff      	movs	r3, #255	; 0xff
}
 800a154:	4618      	mov	r0, r3
 800a156:	371c      	adds	r7, #28
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 fb87 	bl	800b87c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a16e:	2101      	movs	r1, #1
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f001 fca0 	bl	800bab6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af04      	add	r7, sp, #16
 800a186:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a188:	2302      	movs	r3, #2
 800a18a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d102      	bne.n	800a1a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2203      	movs	r2, #3
 800a1a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b0b      	cmp	r3, #11
 800a1aa:	f200 81b3 	bhi.w	800a514 <USBH_Process+0x394>
 800a1ae:	a201      	add	r2, pc, #4	; (adr r2, 800a1b4 <USBH_Process+0x34>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a1e5 	.word	0x0800a1e5
 800a1b8:	0800a217 	.word	0x0800a217
 800a1bc:	0800a27f 	.word	0x0800a27f
 800a1c0:	0800a4af 	.word	0x0800a4af
 800a1c4:	0800a515 	.word	0x0800a515
 800a1c8:	0800a323 	.word	0x0800a323
 800a1cc:	0800a455 	.word	0x0800a455
 800a1d0:	0800a359 	.word	0x0800a359
 800a1d4:	0800a379 	.word	0x0800a379
 800a1d8:	0800a399 	.word	0x0800a399
 800a1dc:	0800a3c7 	.word	0x0800a3c7
 800a1e0:	0800a497 	.word	0x0800a497
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 8193 	beq.w	800a518 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a1f8:	20c8      	movs	r0, #200	; 0xc8
 800a1fa:	f001 fca3 	bl	800bb44 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f001 fb99 	bl	800b936 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a214:	e180      	b.n	800a518 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d107      	bne.n	800a230 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a22e:	e182      	b.n	800a536 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a23a:	d914      	bls.n	800a266 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a242:	3301      	adds	r3, #1
 800a244:	b2da      	uxtb	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a252:	2b03      	cmp	r3, #3
 800a254:	d903      	bls.n	800a25e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	220d      	movs	r2, #13
 800a25a:	701a      	strb	r2, [r3, #0]
      break;
 800a25c:	e16b      	b.n	800a536 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
      break;
 800a264:	e167      	b.n	800a536 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a26c:	f103 020a 	add.w	r2, r3, #10
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a276:	200a      	movs	r0, #10
 800a278:	f001 fc64 	bl	800bb44 <USBH_Delay>
      break;
 800a27c:	e15b      	b.n	800a536 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a28e:	2104      	movs	r1, #4
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a294:	2064      	movs	r0, #100	; 0x64
 800a296:	f001 fc55 	bl	800bb44 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f001 fb24 	bl	800b8e8 <USBH_LL_GetSpeed>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2205      	movs	r2, #5
 800a2ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 f92f 	bl	800b516 <USBH_AllocPipe>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a2c0:	2180      	movs	r1, #128	; 0x80
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f001 f927 	bl	800b516 <USBH_AllocPipe>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	7919      	ldrb	r1, [r3, #4]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a2e4:	b292      	uxth	r2, r2
 800a2e6:	9202      	str	r2, [sp, #8]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	9201      	str	r2, [sp, #4]
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2280      	movs	r2, #128	; 0x80
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f001 f8e0 	bl	800b4b8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	7959      	ldrb	r1, [r3, #5]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a30c:	b292      	uxth	r2, r2
 800a30e:	9202      	str	r2, [sp, #8]
 800a310:	2200      	movs	r2, #0
 800a312:	9201      	str	r2, [sp, #4]
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	4603      	mov	r3, r0
 800a318:	2200      	movs	r2, #0
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 f8cc 	bl	800b4b8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a320:	e109      	b.n	800a536 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f90c 	bl	800a540 <USBH_HandleEnum>
 800a328:	4603      	mov	r3, r0
 800a32a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	2b00      	cmp	r3, #0
 800a332:	f040 80f3 	bne.w	800a51c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a344:	2b01      	cmp	r3, #1
 800a346:	d103      	bne.n	800a350 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2208      	movs	r2, #8
 800a34c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a34e:	e0e5      	b.n	800a51c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2207      	movs	r2, #7
 800a354:	701a      	strb	r2, [r3, #0]
      break;
 800a356:	e0e1      	b.n	800a51c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 80de 	beq.w	800a520 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a36a:	2101      	movs	r1, #1
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2208      	movs	r2, #8
 800a374:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a376:	e0d3      	b.n	800a520 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a37e:	b29b      	uxth	r3, r3
 800a380:	4619      	mov	r1, r3
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fc20 	bl	800abc8 <USBH_SetCfg>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f040 80ca 	bne.w	800a524 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2209      	movs	r2, #9
 800a394:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a396:	e0c5      	b.n	800a524 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a39e:	f003 0320 	and.w	r3, r3, #32
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00b      	beq.n	800a3be <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fc30 	bl	800ac0e <USBH_SetFeature>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f040 80b9 	bne.w	800a528 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	220a      	movs	r2, #10
 800a3ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a3bc:	e0b4      	b.n	800a528 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	701a      	strb	r2, [r3, #0]
      break;
 800a3c4:	e0b0      	b.n	800a528 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 80ad 	beq.w	800a52c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a3da:	2300      	movs	r3, #0
 800a3dc:	73fb      	strb	r3, [r7, #15]
 800a3de:	e016      	b.n	800a40e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a3e0:	7bfa      	ldrb	r2, [r7, #15]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	32de      	adds	r2, #222	; 0xde
 800a3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ea:	791a      	ldrb	r2, [r3, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d108      	bne.n	800a408 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a3f6:	7bfa      	ldrb	r2, [r7, #15]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	32de      	adds	r2, #222	; 0xde
 800a3fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a406:	e005      	b.n	800a414 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	3301      	adds	r3, #1
 800a40c:	73fb      	strb	r3, [r7, #15]
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d0e5      	beq.n	800a3e0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d016      	beq.n	800a44c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d109      	bne.n	800a444 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2206      	movs	r2, #6
 800a434:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a43c:	2103      	movs	r1, #3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a442:	e073      	b.n	800a52c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	220d      	movs	r2, #13
 800a448:	701a      	strb	r2, [r3, #0]
      break;
 800a44a:	e06f      	b.n	800a52c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	220d      	movs	r2, #13
 800a450:	701a      	strb	r2, [r3, #0]
      break;
 800a452:	e06b      	b.n	800a52c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d017      	beq.n	800a48e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	4798      	blx	r3
 800a46a:	4603      	mov	r3, r0
 800a46c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d103      	bne.n	800a47e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	220b      	movs	r2, #11
 800a47a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a47c:	e058      	b.n	800a530 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a47e:	7bbb      	ldrb	r3, [r7, #14]
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b02      	cmp	r3, #2
 800a484:	d154      	bne.n	800a530 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	220d      	movs	r2, #13
 800a48a:	701a      	strb	r2, [r3, #0]
      break;
 800a48c:	e050      	b.n	800a530 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	220d      	movs	r2, #13
 800a492:	701a      	strb	r2, [r3, #0]
      break;
 800a494:	e04c      	b.n	800a530 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d049      	beq.n	800a534 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	4798      	blx	r3
      }
      break;
 800a4ac:	e042      	b.n	800a534 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff fd72 	bl	8009fa0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d009      	beq.n	800a4da <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4ea:	2105      	movs	r1, #5
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d107      	bne.n	800a50c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f7ff fe2b 	bl	800a160 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a50a:	e014      	b.n	800a536 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 f9b5 	bl	800b87c <USBH_LL_Start>
      break;
 800a512:	e010      	b.n	800a536 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a514:	bf00      	nop
 800a516:	e00e      	b.n	800a536 <USBH_Process+0x3b6>
      break;
 800a518:	bf00      	nop
 800a51a:	e00c      	b.n	800a536 <USBH_Process+0x3b6>
      break;
 800a51c:	bf00      	nop
 800a51e:	e00a      	b.n	800a536 <USBH_Process+0x3b6>
    break;
 800a520:	bf00      	nop
 800a522:	e008      	b.n	800a536 <USBH_Process+0x3b6>
      break;
 800a524:	bf00      	nop
 800a526:	e006      	b.n	800a536 <USBH_Process+0x3b6>
      break;
 800a528:	bf00      	nop
 800a52a:	e004      	b.n	800a536 <USBH_Process+0x3b6>
      break;
 800a52c:	bf00      	nop
 800a52e:	e002      	b.n	800a536 <USBH_Process+0x3b6>
      break;
 800a530:	bf00      	nop
 800a532:	e000      	b.n	800a536 <USBH_Process+0x3b6>
      break;
 800a534:	bf00      	nop
  }
  return USBH_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b088      	sub	sp, #32
 800a544:	af04      	add	r7, sp, #16
 800a546:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a548:	2301      	movs	r3, #1
 800a54a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a54c:	2301      	movs	r3, #1
 800a54e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	785b      	ldrb	r3, [r3, #1]
 800a554:	2b07      	cmp	r3, #7
 800a556:	f200 81c1 	bhi.w	800a8dc <USBH_HandleEnum+0x39c>
 800a55a:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <USBH_HandleEnum+0x20>)
 800a55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a560:	0800a581 	.word	0x0800a581
 800a564:	0800a63f 	.word	0x0800a63f
 800a568:	0800a6a9 	.word	0x0800a6a9
 800a56c:	0800a737 	.word	0x0800a737
 800a570:	0800a7a1 	.word	0x0800a7a1
 800a574:	0800a811 	.word	0x0800a811
 800a578:	0800a857 	.word	0x0800a857
 800a57c:	0800a89d 	.word	0x0800a89d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a580:	2108      	movs	r1, #8
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fa50 	bl	800aa28 <USBH_Get_DevDesc>
 800a588:	4603      	mov	r3, r0
 800a58a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a58c:	7bbb      	ldrb	r3, [r7, #14]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d130      	bne.n	800a5f4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	7919      	ldrb	r1, [r3, #4]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5b6:	b292      	uxth	r2, r2
 800a5b8:	9202      	str	r2, [sp, #8]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	9201      	str	r2, [sp, #4]
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2280      	movs	r2, #128	; 0x80
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 ff77 	bl	800b4b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	7959      	ldrb	r1, [r3, #5]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5de:	b292      	uxth	r2, r2
 800a5e0:	9202      	str	r2, [sp, #8]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	9201      	str	r2, [sp, #4]
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 ff63 	bl	800b4b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a5f2:	e175      	b.n	800a8e0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	f040 8172 	bne.w	800a8e0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a602:	3301      	adds	r3, #1
 800a604:	b2da      	uxtb	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a612:	2b03      	cmp	r3, #3
 800a614:	d903      	bls.n	800a61e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	220d      	movs	r2, #13
 800a61a:	701a      	strb	r2, [r3, #0]
      break;
 800a61c:	e160      	b.n	800a8e0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	795b      	ldrb	r3, [r3, #5]
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 ff97 	bl	800b558 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	791b      	ldrb	r3, [r3, #4]
 800a62e:	4619      	mov	r1, r3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 ff91 	bl	800b558 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	701a      	strb	r2, [r3, #0]
      break;
 800a63c:	e150      	b.n	800a8e0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a63e:	2112      	movs	r1, #18
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f9f1 	bl	800aa28 <USBH_Get_DevDesc>
 800a646:	4603      	mov	r3, r0
 800a648:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a64a:	7bbb      	ldrb	r3, [r7, #14]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d103      	bne.n	800a658 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2202      	movs	r2, #2
 800a654:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a656:	e145      	b.n	800a8e4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a658:	7bbb      	ldrb	r3, [r7, #14]
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	f040 8142 	bne.w	800a8e4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a666:	3301      	adds	r3, #1
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a676:	2b03      	cmp	r3, #3
 800a678:	d903      	bls.n	800a682 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	220d      	movs	r2, #13
 800a67e:	701a      	strb	r2, [r3, #0]
      break;
 800a680:	e130      	b.n	800a8e4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	795b      	ldrb	r3, [r3, #5]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 ff65 	bl	800b558 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	791b      	ldrb	r3, [r3, #4]
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 ff5f 	bl	800b558 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	701a      	strb	r2, [r3, #0]
      break;
 800a6a6:	e11d      	b.n	800a8e4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fa68 	bl	800ab80 <USBH_SetAddress>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d132      	bne.n	800a720 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a6ba:	2002      	movs	r0, #2
 800a6bc:	f001 fa42 	bl	800bb44 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2203      	movs	r2, #3
 800a6cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	7919      	ldrb	r1, [r3, #4]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a6e2:	b292      	uxth	r2, r2
 800a6e4:	9202      	str	r2, [sp, #8]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	9201      	str	r2, [sp, #4]
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2280      	movs	r2, #128	; 0x80
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fee1 	bl	800b4b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	7959      	ldrb	r1, [r3, #5]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a70a:	b292      	uxth	r2, r2
 800a70c:	9202      	str	r2, [sp, #8]
 800a70e:	2200      	movs	r2, #0
 800a710:	9201      	str	r2, [sp, #4]
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	4603      	mov	r3, r0
 800a716:	2200      	movs	r2, #0
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fecd 	bl	800b4b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a71e:	e0e3      	b.n	800a8e8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a720:	7bbb      	ldrb	r3, [r7, #14]
 800a722:	2b03      	cmp	r3, #3
 800a724:	f040 80e0 	bne.w	800a8e8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	220d      	movs	r2, #13
 800a72c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	705a      	strb	r2, [r3, #1]
      break;
 800a734:	e0d8      	b.n	800a8e8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a736:	2109      	movs	r1, #9
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f99d 	bl	800aa78 <USBH_Get_CfgDesc>
 800a73e:	4603      	mov	r3, r0
 800a740:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a742:	7bbb      	ldrb	r3, [r7, #14]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d103      	bne.n	800a750 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2204      	movs	r2, #4
 800a74c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a74e:	e0cd      	b.n	800a8ec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	2b03      	cmp	r3, #3
 800a754:	f040 80ca 	bne.w	800a8ec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a75e:	3301      	adds	r3, #1
 800a760:	b2da      	uxtb	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d903      	bls.n	800a77a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	220d      	movs	r2, #13
 800a776:	701a      	strb	r2, [r3, #0]
      break;
 800a778:	e0b8      	b.n	800a8ec <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	795b      	ldrb	r3, [r3, #5]
 800a77e:	4619      	mov	r1, r3
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fee9 	bl	800b558 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	791b      	ldrb	r3, [r3, #4]
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fee3 	bl	800b558 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	701a      	strb	r2, [r3, #0]
      break;
 800a79e:	e0a5      	b.n	800a8ec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f965 	bl	800aa78 <USBH_Get_CfgDesc>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7b2:	7bbb      	ldrb	r3, [r7, #14]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d103      	bne.n	800a7c0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2205      	movs	r2, #5
 800a7bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7be:	e097      	b.n	800a8f0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	f040 8094 	bne.w	800a8f0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d903      	bls.n	800a7ea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	220d      	movs	r2, #13
 800a7e6:	701a      	strb	r2, [r3, #0]
      break;
 800a7e8:	e082      	b.n	800a8f0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	795b      	ldrb	r3, [r3, #5]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 feb1 	bl	800b558 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	791b      	ldrb	r3, [r3, #4]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 feab 	bl	800b558 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	701a      	strb	r2, [r3, #0]
      break;
 800a80e:	e06f      	b.n	800a8f0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a816:	2b00      	cmp	r3, #0
 800a818:	d019      	beq.n	800a84e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a826:	23ff      	movs	r3, #255	; 0xff
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f949 	bl	800aac0 <USBH_Get_StringDesc>
 800a82e:	4603      	mov	r3, r0
 800a830:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a832:	7bbb      	ldrb	r3, [r7, #14]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d103      	bne.n	800a840 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2206      	movs	r2, #6
 800a83c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a83e:	e059      	b.n	800a8f4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a840:	7bbb      	ldrb	r3, [r7, #14]
 800a842:	2b03      	cmp	r3, #3
 800a844:	d156      	bne.n	800a8f4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2206      	movs	r2, #6
 800a84a:	705a      	strb	r2, [r3, #1]
      break;
 800a84c:	e052      	b.n	800a8f4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2206      	movs	r2, #6
 800a852:	705a      	strb	r2, [r3, #1]
      break;
 800a854:	e04e      	b.n	800a8f4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d019      	beq.n	800a894 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a86c:	23ff      	movs	r3, #255	; 0xff
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f926 	bl	800aac0 <USBH_Get_StringDesc>
 800a874:	4603      	mov	r3, r0
 800a876:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d103      	bne.n	800a886 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2207      	movs	r2, #7
 800a882:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a884:	e038      	b.n	800a8f8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d135      	bne.n	800a8f8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2207      	movs	r2, #7
 800a890:	705a      	strb	r2, [r3, #1]
      break;
 800a892:	e031      	b.n	800a8f8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2207      	movs	r2, #7
 800a898:	705a      	strb	r2, [r3, #1]
      break;
 800a89a:	e02d      	b.n	800a8f8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d017      	beq.n	800a8d6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8b2:	23ff      	movs	r3, #255	; 0xff
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f903 	bl	800aac0 <USBH_Get_StringDesc>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8be:	7bbb      	ldrb	r3, [r7, #14]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d102      	bne.n	800a8ca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a8c8:	e018      	b.n	800a8fc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d115      	bne.n	800a8fc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d4:	e012      	b.n	800a8fc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8da:	e00f      	b.n	800a8fc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a8dc:	bf00      	nop
 800a8de:	e00e      	b.n	800a8fe <USBH_HandleEnum+0x3be>
      break;
 800a8e0:	bf00      	nop
 800a8e2:	e00c      	b.n	800a8fe <USBH_HandleEnum+0x3be>
      break;
 800a8e4:	bf00      	nop
 800a8e6:	e00a      	b.n	800a8fe <USBH_HandleEnum+0x3be>
      break;
 800a8e8:	bf00      	nop
 800a8ea:	e008      	b.n	800a8fe <USBH_HandleEnum+0x3be>
      break;
 800a8ec:	bf00      	nop
 800a8ee:	e006      	b.n	800a8fe <USBH_HandleEnum+0x3be>
      break;
 800a8f0:	bf00      	nop
 800a8f2:	e004      	b.n	800a8fe <USBH_HandleEnum+0x3be>
      break;
 800a8f4:	bf00      	nop
 800a8f6:	e002      	b.n	800a8fe <USBH_HandleEnum+0x3be>
      break;
 800a8f8:	bf00      	nop
 800a8fa:	e000      	b.n	800a8fe <USBH_HandleEnum+0x3be>
      break;
 800a8fc:	bf00      	nop
  }
  return Status;
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a91a:	bf00      	nop
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a934:	1c5a      	adds	r2, r3, #1
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f804 	bl	800a94a <USBH_HandleSof>
}
 800a942:	bf00      	nop
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b082      	sub	sp, #8
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b0b      	cmp	r3, #11
 800a95a:	d10a      	bne.n	800a972 <USBH_HandleSof+0x28>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	4798      	blx	r3
  }
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a97a:	b480      	push	{r7}
 800a97c:	b083      	sub	sp, #12
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a98a:	bf00      	nop
}
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a996:	b480      	push	{r7}
 800a998:	b083      	sub	sp, #12
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a9a6:	bf00      	nop
}
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 ff56 	bl	800b8b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	791b      	ldrb	r3, [r3, #4]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fda3 	bl	800b558 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	795b      	ldrb	r3, [r3, #5]
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fd9d 	bl	800b558 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af02      	add	r7, sp, #8
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800aa3a:	78fb      	ldrb	r3, [r7, #3]
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	4613      	mov	r3, r2
 800aa42:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa46:	2100      	movs	r1, #0
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f864 	bl	800ab16 <USBH_GetDescriptor>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73fb      	strb	r3, [r7, #15]
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa64:	78fa      	ldrb	r2, [r7, #3]
 800aa66:	b292      	uxth	r2, r2
 800aa68:	4619      	mov	r1, r3
 800aa6a:	f000 f918 	bl	800ac9e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af02      	add	r7, sp, #8
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	331c      	adds	r3, #28
 800aa88:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aa8a:	887b      	ldrh	r3, [r7, #2]
 800aa8c:	9300      	str	r3, [sp, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa94:	2100      	movs	r1, #0
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f83d 	bl	800ab16 <USBH_GetDescriptor>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	72fb      	strb	r3, [r7, #11]
 800aaa0:	7afb      	ldrb	r3, [r7, #11]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d107      	bne.n	800aab6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aaac:	887a      	ldrh	r2, [r7, #2]
 800aaae:	68f9      	ldr	r1, [r7, #12]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 f964 	bl	800ad7e <USBH_ParseCfgDesc>
  }

  return status;
 800aab6:	7afb      	ldrb	r3, [r7, #11]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af02      	add	r7, sp, #8
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	607a      	str	r2, [r7, #4]
 800aaca:	461a      	mov	r2, r3
 800aacc:	460b      	mov	r3, r1
 800aace:	72fb      	strb	r3, [r7, #11]
 800aad0:	4613      	mov	r3, r2
 800aad2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800aad4:	7afb      	ldrb	r3, [r7, #11]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aadc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800aae4:	893b      	ldrh	r3, [r7, #8]
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	460b      	mov	r3, r1
 800aaea:	2100      	movs	r1, #0
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 f812 	bl	800ab16 <USBH_GetDescriptor>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	75fb      	strb	r3, [r7, #23]
 800aaf6:	7dfb      	ldrb	r3, [r7, #23]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d107      	bne.n	800ab0c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ab02:	893a      	ldrh	r2, [r7, #8]
 800ab04:	6879      	ldr	r1, [r7, #4]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 fa37 	bl	800af7a <USBH_ParseStringDesc>
  }

  return status;
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	607b      	str	r3, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	72fb      	strb	r3, [r7, #11]
 800ab24:	4613      	mov	r3, r2
 800ab26:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	789b      	ldrb	r3, [r3, #2]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d11c      	bne.n	800ab6a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ab30:	7afb      	ldrb	r3, [r7, #11]
 800ab32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2206      	movs	r2, #6
 800ab40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	893a      	ldrh	r2, [r7, #8]
 800ab46:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ab48:	893b      	ldrh	r3, [r7, #8]
 800ab4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab52:	d104      	bne.n	800ab5e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f240 4209 	movw	r2, #1033	; 0x409
 800ab5a:	829a      	strh	r2, [r3, #20]
 800ab5c:	e002      	b.n	800ab64 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	8b3a      	ldrh	r2, [r7, #24]
 800ab68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ab6a:	8b3b      	ldrh	r3, [r7, #24]
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	6879      	ldr	r1, [r7, #4]
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 fa50 	bl	800b016 <USBH_CtlReq>
 800ab76:	4603      	mov	r3, r0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	789b      	ldrb	r3, [r3, #2]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d10f      	bne.n	800abb4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2205      	movs	r2, #5
 800ab9e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800abb4:	2200      	movs	r2, #0
 800abb6:	2100      	movs	r1, #0
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fa2c 	bl	800b016 <USBH_CtlReq>
 800abbe:	4603      	mov	r3, r0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	789b      	ldrb	r3, [r3, #2]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d10e      	bne.n	800abfa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2209      	movs	r2, #9
 800abe6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	887a      	ldrh	r2, [r7, #2]
 800abec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800abfa:	2200      	movs	r2, #0
 800abfc:	2100      	movs	r1, #0
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa09 	bl	800b016 <USBH_CtlReq>
 800ac04:	4603      	mov	r3, r0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b082      	sub	sp, #8
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	460b      	mov	r3, r1
 800ac18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	789b      	ldrb	r3, [r3, #2]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d10f      	bne.n	800ac42 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2203      	movs	r2, #3
 800ac2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ac2e:	78fb      	ldrb	r3, [r7, #3]
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ac42:	2200      	movs	r2, #0
 800ac44:	2100      	movs	r1, #0
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f9e5 	bl	800b016 <USBH_CtlReq>
 800ac4c:	4603      	mov	r3, r0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	789b      	ldrb	r3, [r3, #2]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d10f      	bne.n	800ac8a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2202      	movs	r2, #2
 800ac6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ac7c:	78fb      	ldrb	r3, [r7, #3]
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f9c1 	bl	800b016 <USBH_CtlReq>
 800ac94:	4603      	mov	r3, r0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b085      	sub	sp, #20
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	60b9      	str	r1, [r7, #8]
 800aca8:	4613      	mov	r3, r2
 800acaa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	781a      	ldrb	r2, [r3, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	785a      	ldrb	r2, [r3, #1]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	3302      	adds	r3, #2
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	3303      	adds	r3, #3
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	b29b      	uxth	r3, r3
 800accc:	021b      	lsls	r3, r3, #8
 800acce:	b29b      	uxth	r3, r3
 800acd0:	4313      	orrs	r3, r2
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	791a      	ldrb	r2, [r3, #4]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	795a      	ldrb	r2, [r3, #5]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	799a      	ldrb	r2, [r3, #6]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	79da      	ldrb	r2, [r3, #7]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800acf8:	88fb      	ldrh	r3, [r7, #6]
 800acfa:	2b08      	cmp	r3, #8
 800acfc:	d939      	bls.n	800ad72 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	3308      	adds	r3, #8
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	3309      	adds	r3, #9
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	021b      	lsls	r3, r3, #8
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	4313      	orrs	r3, r2
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	330a      	adds	r3, #10
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	330b      	adds	r3, #11
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	021b      	lsls	r3, r3, #8
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	330c      	adds	r3, #12
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	330d      	adds	r3, #13
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	021b      	lsls	r3, r3, #8
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	7b9a      	ldrb	r2, [r3, #14]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	7bda      	ldrb	r2, [r3, #15]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	7c1a      	ldrb	r2, [r3, #16]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	7c5a      	ldrb	r2, [r3, #17]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	745a      	strb	r2, [r3, #17]
  }
}
 800ad72:	bf00      	nop
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b08a      	sub	sp, #40	; 0x28
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	60f8      	str	r0, [r7, #12]
 800ad86:	60b9      	str	r1, [r7, #8]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	781a      	ldrb	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	785a      	ldrb	r2, [r3, #1]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	3302      	adds	r3, #2
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	3303      	adds	r3, #3
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	021b      	lsls	r3, r3, #8
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	4313      	orrs	r3, r2
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	791a      	ldrb	r2, [r3, #4]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	795a      	ldrb	r2, [r3, #5]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	799a      	ldrb	r2, [r3, #6]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	79da      	ldrb	r2, [r3, #7]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	7a1a      	ldrb	r2, [r3, #8]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800adf4:	88fb      	ldrh	r3, [r7, #6]
 800adf6:	2b09      	cmp	r3, #9
 800adf8:	d95f      	bls.n	800aeba <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800adfa:	2309      	movs	r3, #9
 800adfc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae02:	e051      	b.n	800aea8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae04:	f107 0316 	add.w	r3, r7, #22
 800ae08:	4619      	mov	r1, r3
 800ae0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae0c:	f000 f8e8 	bl	800afe0 <USBH_GetNextDesc>
 800ae10:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	785b      	ldrb	r3, [r3, #1]
 800ae16:	2b04      	cmp	r3, #4
 800ae18:	d146      	bne.n	800aea8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ae1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae1e:	221a      	movs	r2, #26
 800ae20:	fb02 f303 	mul.w	r3, r2, r3
 800ae24:	3308      	adds	r3, #8
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	4413      	add	r3, r2
 800ae2a:	3302      	adds	r3, #2
 800ae2c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ae2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae30:	69f8      	ldr	r0, [r7, #28]
 800ae32:	f000 f846 	bl	800aec2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae40:	e022      	b.n	800ae88 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae42:	f107 0316 	add.w	r3, r7, #22
 800ae46:	4619      	mov	r1, r3
 800ae48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae4a:	f000 f8c9 	bl	800afe0 <USBH_GetNextDesc>
 800ae4e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	785b      	ldrb	r3, [r3, #1]
 800ae54:	2b05      	cmp	r3, #5
 800ae56:	d117      	bne.n	800ae88 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ae58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae5c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ae60:	3201      	adds	r2, #1
 800ae62:	00d2      	lsls	r2, r2, #3
 800ae64:	211a      	movs	r1, #26
 800ae66:	fb01 f303 	mul.w	r3, r1, r3
 800ae6a:	4413      	add	r3, r2
 800ae6c:	3308      	adds	r3, #8
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	4413      	add	r3, r2
 800ae72:	3304      	adds	r3, #4
 800ae74:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ae76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae78:	69b8      	ldr	r0, [r7, #24]
 800ae7a:	f000 f851 	bl	800af20 <USBH_ParseEPDesc>
            ep_ix++;
 800ae7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ae82:	3301      	adds	r3, #1
 800ae84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	791b      	ldrb	r3, [r3, #4]
 800ae8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d204      	bcs.n	800ae9e <USBH_ParseCfgDesc+0x120>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	885a      	ldrh	r2, [r3, #2]
 800ae98:	8afb      	ldrh	r3, [r7, #22]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d8d1      	bhi.n	800ae42 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ae9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aea2:	3301      	adds	r3, #1
 800aea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d804      	bhi.n	800aeba <USBH_ParseCfgDesc+0x13c>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	885a      	ldrh	r2, [r3, #2]
 800aeb4:	8afb      	ldrh	r3, [r7, #22]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d8a4      	bhi.n	800ae04 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800aeba:	bf00      	nop
 800aebc:	3728      	adds	r7, #40	; 0x28
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800aec2:	b480      	push	{r7}
 800aec4:	b083      	sub	sp, #12
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	781a      	ldrb	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	785a      	ldrb	r2, [r3, #1]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	789a      	ldrb	r2, [r3, #2]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	78da      	ldrb	r2, [r3, #3]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	791a      	ldrb	r2, [r3, #4]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	795a      	ldrb	r2, [r3, #5]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	799a      	ldrb	r2, [r3, #6]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	79da      	ldrb	r2, [r3, #7]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	7a1a      	ldrb	r2, [r3, #8]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	721a      	strb	r2, [r3, #8]
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	781a      	ldrb	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	785a      	ldrb	r2, [r3, #1]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	789a      	ldrb	r2, [r3, #2]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	78da      	ldrb	r2, [r3, #3]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	3304      	adds	r3, #4
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	b29a      	uxth	r2, r3
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	3305      	adds	r3, #5
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	021b      	lsls	r3, r3, #8
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	4313      	orrs	r3, r2
 800af60:	b29a      	uxth	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	799a      	ldrb	r2, [r3, #6]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	719a      	strb	r2, [r3, #6]
}
 800af6e:	bf00      	nop
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b087      	sub	sp, #28
 800af7e:	af00      	add	r7, sp, #0
 800af80:	60f8      	str	r0, [r7, #12]
 800af82:	60b9      	str	r1, [r7, #8]
 800af84:	4613      	mov	r3, r2
 800af86:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	3301      	adds	r3, #1
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	2b03      	cmp	r3, #3
 800af90:	d120      	bne.n	800afd4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	1e9a      	subs	r2, r3, #2
 800af98:	88fb      	ldrh	r3, [r7, #6]
 800af9a:	4293      	cmp	r3, r2
 800af9c:	bf28      	it	cs
 800af9e:	4613      	movcs	r3, r2
 800afa0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3302      	adds	r3, #2
 800afa6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800afa8:	2300      	movs	r3, #0
 800afaa:	82fb      	strh	r3, [r7, #22]
 800afac:	e00b      	b.n	800afc6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800afae:	8afb      	ldrh	r3, [r7, #22]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	4413      	add	r3, r2
 800afb4:	781a      	ldrb	r2, [r3, #0]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800afc0:	8afb      	ldrh	r3, [r7, #22]
 800afc2:	3302      	adds	r3, #2
 800afc4:	82fb      	strh	r3, [r7, #22]
 800afc6:	8afa      	ldrh	r2, [r7, #22]
 800afc8:	8abb      	ldrh	r3, [r7, #20]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d3ef      	bcc.n	800afae <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2200      	movs	r2, #0
 800afd2:	701a      	strb	r2, [r3, #0]
  }
}
 800afd4:	bf00      	nop
 800afd6:	371c      	adds	r7, #28
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	881a      	ldrh	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	4413      	add	r3, r2
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4413      	add	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b008:	68fb      	ldr	r3, [r7, #12]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b086      	sub	sp, #24
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	60b9      	str	r1, [r7, #8]
 800b020:	4613      	mov	r3, r2
 800b022:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b024:	2301      	movs	r3, #1
 800b026:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	789b      	ldrb	r3, [r3, #2]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d002      	beq.n	800b036 <USBH_CtlReq+0x20>
 800b030:	2b02      	cmp	r3, #2
 800b032:	d00f      	beq.n	800b054 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b034:	e027      	b.n	800b086 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	88fa      	ldrh	r2, [r7, #6]
 800b040:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2201      	movs	r2, #1
 800b046:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2202      	movs	r2, #2
 800b04c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b04e:	2301      	movs	r3, #1
 800b050:	75fb      	strb	r3, [r7, #23]
      break;
 800b052:	e018      	b.n	800b086 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 f81b 	bl	800b090 <USBH_HandleControl>
 800b05a:	4603      	mov	r3, r0
 800b05c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b05e:	7dfb      	ldrb	r3, [r7, #23]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <USBH_CtlReq+0x54>
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	2b03      	cmp	r3, #3
 800b068:	d106      	bne.n	800b078 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2201      	movs	r2, #1
 800b06e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	761a      	strb	r2, [r3, #24]
      break;
 800b076:	e005      	b.n	800b084 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b078:	7dfb      	ldrb	r3, [r7, #23]
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d102      	bne.n	800b084 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2201      	movs	r2, #1
 800b082:	709a      	strb	r2, [r3, #2]
      break;
 800b084:	bf00      	nop
  }
  return status;
 800b086:	7dfb      	ldrb	r3, [r7, #23]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af02      	add	r7, sp, #8
 800b096:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b098:	2301      	movs	r3, #1
 800b09a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b09c:	2300      	movs	r3, #0
 800b09e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	7e1b      	ldrb	r3, [r3, #24]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	2b0a      	cmp	r3, #10
 800b0a8:	f200 8156 	bhi.w	800b358 <USBH_HandleControl+0x2c8>
 800b0ac:	a201      	add	r2, pc, #4	; (adr r2, 800b0b4 <USBH_HandleControl+0x24>)
 800b0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b2:	bf00      	nop
 800b0b4:	0800b0e1 	.word	0x0800b0e1
 800b0b8:	0800b0fb 	.word	0x0800b0fb
 800b0bc:	0800b165 	.word	0x0800b165
 800b0c0:	0800b18b 	.word	0x0800b18b
 800b0c4:	0800b1c3 	.word	0x0800b1c3
 800b0c8:	0800b1ed 	.word	0x0800b1ed
 800b0cc:	0800b23f 	.word	0x0800b23f
 800b0d0:	0800b261 	.word	0x0800b261
 800b0d4:	0800b29d 	.word	0x0800b29d
 800b0d8:	0800b2c3 	.word	0x0800b2c3
 800b0dc:	0800b301 	.word	0x0800b301
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f103 0110 	add.w	r1, r3, #16
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	795b      	ldrb	r3, [r3, #5]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f943 	bl	800b378 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	761a      	strb	r2, [r3, #24]
      break;
 800b0f8:	e139      	b.n	800b36e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	795b      	ldrb	r3, [r3, #5]
 800b0fe:	4619      	mov	r1, r3
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fcc5 	bl	800ba90 <USBH_LL_GetURBState>
 800b106:	4603      	mov	r3, r0
 800b108:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b10a:	7bbb      	ldrb	r3, [r7, #14]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d11e      	bne.n	800b14e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	7c1b      	ldrb	r3, [r3, #16]
 800b114:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b118:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	8adb      	ldrh	r3, [r3, #22]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00a      	beq.n	800b138 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b122:	7b7b      	ldrb	r3, [r7, #13]
 800b124:	2b80      	cmp	r3, #128	; 0x80
 800b126:	d103      	bne.n	800b130 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2203      	movs	r2, #3
 800b12c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b12e:	e115      	b.n	800b35c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2205      	movs	r2, #5
 800b134:	761a      	strb	r2, [r3, #24]
      break;
 800b136:	e111      	b.n	800b35c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b138:	7b7b      	ldrb	r3, [r7, #13]
 800b13a:	2b80      	cmp	r3, #128	; 0x80
 800b13c:	d103      	bne.n	800b146 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2209      	movs	r2, #9
 800b142:	761a      	strb	r2, [r3, #24]
      break;
 800b144:	e10a      	b.n	800b35c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2207      	movs	r2, #7
 800b14a:	761a      	strb	r2, [r3, #24]
      break;
 800b14c:	e106      	b.n	800b35c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	2b04      	cmp	r3, #4
 800b152:	d003      	beq.n	800b15c <USBH_HandleControl+0xcc>
 800b154:	7bbb      	ldrb	r3, [r7, #14]
 800b156:	2b02      	cmp	r3, #2
 800b158:	f040 8100 	bne.w	800b35c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	220b      	movs	r2, #11
 800b160:	761a      	strb	r2, [r3, #24]
      break;
 800b162:	e0fb      	b.n	800b35c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6899      	ldr	r1, [r3, #8]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	899a      	ldrh	r2, [r3, #12]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	791b      	ldrb	r3, [r3, #4]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f93a 	bl	800b3f6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2204      	movs	r2, #4
 800b186:	761a      	strb	r2, [r3, #24]
      break;
 800b188:	e0f1      	b.n	800b36e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	791b      	ldrb	r3, [r3, #4]
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fc7d 	bl	800ba90 <USBH_LL_GetURBState>
 800b196:	4603      	mov	r3, r0
 800b198:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d102      	bne.n	800b1a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2209      	movs	r2, #9
 800b1a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	2b05      	cmp	r3, #5
 800b1aa:	d102      	bne.n	800b1b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b1b0:	e0d6      	b.n	800b360 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	2b04      	cmp	r3, #4
 800b1b6:	f040 80d3 	bne.w	800b360 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	220b      	movs	r2, #11
 800b1be:	761a      	strb	r2, [r3, #24]
      break;
 800b1c0:	e0ce      	b.n	800b360 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6899      	ldr	r1, [r3, #8]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	899a      	ldrh	r2, [r3, #12]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	795b      	ldrb	r3, [r3, #5]
 800b1ce:	2001      	movs	r0, #1
 800b1d0:	9000      	str	r0, [sp, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f8ea 	bl	800b3ac <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2206      	movs	r2, #6
 800b1e8:	761a      	strb	r2, [r3, #24]
      break;
 800b1ea:	e0c0      	b.n	800b36e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	795b      	ldrb	r3, [r3, #5]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fc4c 	bl	800ba90 <USBH_LL_GetURBState>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d103      	bne.n	800b20a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2207      	movs	r2, #7
 800b206:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b208:	e0ac      	b.n	800b364 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b20a:	7bbb      	ldrb	r3, [r7, #14]
 800b20c:	2b05      	cmp	r3, #5
 800b20e:	d105      	bne.n	800b21c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	220c      	movs	r2, #12
 800b214:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b216:	2303      	movs	r3, #3
 800b218:	73fb      	strb	r3, [r7, #15]
      break;
 800b21a:	e0a3      	b.n	800b364 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d103      	bne.n	800b22a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2205      	movs	r2, #5
 800b226:	761a      	strb	r2, [r3, #24]
      break;
 800b228:	e09c      	b.n	800b364 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	f040 8099 	bne.w	800b364 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	220b      	movs	r2, #11
 800b236:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b238:	2302      	movs	r3, #2
 800b23a:	73fb      	strb	r3, [r7, #15]
      break;
 800b23c:	e092      	b.n	800b364 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	791b      	ldrb	r3, [r3, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	2100      	movs	r1, #0
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f8d5 	bl	800b3f6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b252:	b29a      	uxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2208      	movs	r2, #8
 800b25c:	761a      	strb	r2, [r3, #24]

      break;
 800b25e:	e086      	b.n	800b36e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	791b      	ldrb	r3, [r3, #4]
 800b264:	4619      	mov	r1, r3
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fc12 	bl	800ba90 <USBH_LL_GetURBState>
 800b26c:	4603      	mov	r3, r0
 800b26e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	2b01      	cmp	r3, #1
 800b274:	d105      	bne.n	800b282 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	220d      	movs	r2, #13
 800b27a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b280:	e072      	b.n	800b368 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b282:	7bbb      	ldrb	r3, [r7, #14]
 800b284:	2b04      	cmp	r3, #4
 800b286:	d103      	bne.n	800b290 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	220b      	movs	r2, #11
 800b28c:	761a      	strb	r2, [r3, #24]
      break;
 800b28e:	e06b      	b.n	800b368 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b290:	7bbb      	ldrb	r3, [r7, #14]
 800b292:	2b05      	cmp	r3, #5
 800b294:	d168      	bne.n	800b368 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b296:	2303      	movs	r3, #3
 800b298:	73fb      	strb	r3, [r7, #15]
      break;
 800b29a:	e065      	b.n	800b368 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	795b      	ldrb	r3, [r3, #5]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	9200      	str	r2, [sp, #0]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 f87f 	bl	800b3ac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	220a      	movs	r2, #10
 800b2be:	761a      	strb	r2, [r3, #24]
      break;
 800b2c0:	e055      	b.n	800b36e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	795b      	ldrb	r3, [r3, #5]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fbe1 	bl	800ba90 <USBH_LL_GetURBState>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b2d2:	7bbb      	ldrb	r3, [r7, #14]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d105      	bne.n	800b2e4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	220d      	movs	r2, #13
 800b2e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b2e2:	e043      	b.n	800b36c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d103      	bne.n	800b2f2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2209      	movs	r2, #9
 800b2ee:	761a      	strb	r2, [r3, #24]
      break;
 800b2f0:	e03c      	b.n	800b36c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b2f2:	7bbb      	ldrb	r3, [r7, #14]
 800b2f4:	2b04      	cmp	r3, #4
 800b2f6:	d139      	bne.n	800b36c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	220b      	movs	r2, #11
 800b2fc:	761a      	strb	r2, [r3, #24]
      break;
 800b2fe:	e035      	b.n	800b36c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	7e5b      	ldrb	r3, [r3, #25]
 800b304:	3301      	adds	r3, #1
 800b306:	b2da      	uxtb	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	765a      	strb	r2, [r3, #25]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	7e5b      	ldrb	r3, [r3, #25]
 800b310:	2b02      	cmp	r3, #2
 800b312:	d806      	bhi.n	800b322 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b320:	e025      	b.n	800b36e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b328:	2106      	movs	r1, #6
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	795b      	ldrb	r3, [r3, #5]
 800b338:	4619      	mov	r1, r3
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 f90c 	bl	800b558 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	791b      	ldrb	r3, [r3, #4]
 800b344:	4619      	mov	r1, r3
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f906 	bl	800b558 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b352:	2302      	movs	r3, #2
 800b354:	73fb      	strb	r3, [r7, #15]
      break;
 800b356:	e00a      	b.n	800b36e <USBH_HandleControl+0x2de>

    default:
      break;
 800b358:	bf00      	nop
 800b35a:	e008      	b.n	800b36e <USBH_HandleControl+0x2de>
      break;
 800b35c:	bf00      	nop
 800b35e:	e006      	b.n	800b36e <USBH_HandleControl+0x2de>
      break;
 800b360:	bf00      	nop
 800b362:	e004      	b.n	800b36e <USBH_HandleControl+0x2de>
      break;
 800b364:	bf00      	nop
 800b366:	e002      	b.n	800b36e <USBH_HandleControl+0x2de>
      break;
 800b368:	bf00      	nop
 800b36a:	e000      	b.n	800b36e <USBH_HandleControl+0x2de>
      break;
 800b36c:	bf00      	nop
  }

  return status;
 800b36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	af04      	add	r7, sp, #16
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	4613      	mov	r3, r2
 800b384:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b386:	79f9      	ldrb	r1, [r7, #7]
 800b388:	2300      	movs	r3, #0
 800b38a:	9303      	str	r3, [sp, #12]
 800b38c:	2308      	movs	r3, #8
 800b38e:	9302      	str	r3, [sp, #8]
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	2300      	movs	r3, #0
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	2300      	movs	r3, #0
 800b39a:	2200      	movs	r2, #0
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 fb46 	bl	800ba2e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b088      	sub	sp, #32
 800b3b0:	af04      	add	r7, sp, #16
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	80fb      	strh	r3, [r7, #6]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d001      	beq.n	800b3d0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b3d0:	7979      	ldrb	r1, [r7, #5]
 800b3d2:	7e3b      	ldrb	r3, [r7, #24]
 800b3d4:	9303      	str	r3, [sp, #12]
 800b3d6:	88fb      	ldrh	r3, [r7, #6]
 800b3d8:	9302      	str	r3, [sp, #8]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	2301      	movs	r3, #1
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f000 fb21 	bl	800ba2e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b088      	sub	sp, #32
 800b3fa:	af04      	add	r7, sp, #16
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	60b9      	str	r1, [r7, #8]
 800b400:	4611      	mov	r1, r2
 800b402:	461a      	mov	r2, r3
 800b404:	460b      	mov	r3, r1
 800b406:	80fb      	strh	r3, [r7, #6]
 800b408:	4613      	mov	r3, r2
 800b40a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b40c:	7979      	ldrb	r1, [r7, #5]
 800b40e:	2300      	movs	r3, #0
 800b410:	9303      	str	r3, [sp, #12]
 800b412:	88fb      	ldrh	r3, [r7, #6]
 800b414:	9302      	str	r3, [sp, #8]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	2301      	movs	r3, #1
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	2300      	movs	r3, #0
 800b420:	2201      	movs	r2, #1
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 fb03 	bl	800ba2e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b428:	2300      	movs	r3, #0

}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b088      	sub	sp, #32
 800b436:	af04      	add	r7, sp, #16
 800b438:	60f8      	str	r0, [r7, #12]
 800b43a:	60b9      	str	r1, [r7, #8]
 800b43c:	4611      	mov	r1, r2
 800b43e:	461a      	mov	r2, r3
 800b440:	460b      	mov	r3, r1
 800b442:	80fb      	strh	r3, [r7, #6]
 800b444:	4613      	mov	r3, r2
 800b446:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b456:	7979      	ldrb	r1, [r7, #5]
 800b458:	7e3b      	ldrb	r3, [r7, #24]
 800b45a:	9303      	str	r3, [sp, #12]
 800b45c:	88fb      	ldrh	r3, [r7, #6]
 800b45e:	9302      	str	r3, [sp, #8]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	9301      	str	r3, [sp, #4]
 800b464:	2301      	movs	r3, #1
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	2302      	movs	r3, #2
 800b46a:	2200      	movs	r2, #0
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f000 fade 	bl	800ba2e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b088      	sub	sp, #32
 800b480:	af04      	add	r7, sp, #16
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	4611      	mov	r1, r2
 800b488:	461a      	mov	r2, r3
 800b48a:	460b      	mov	r3, r1
 800b48c:	80fb      	strh	r3, [r7, #6]
 800b48e:	4613      	mov	r3, r2
 800b490:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b492:	7979      	ldrb	r1, [r7, #5]
 800b494:	2300      	movs	r3, #0
 800b496:	9303      	str	r3, [sp, #12]
 800b498:	88fb      	ldrh	r3, [r7, #6]
 800b49a:	9302      	str	r3, [sp, #8]
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 fac0 	bl	800ba2e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af04      	add	r7, sp, #16
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	4608      	mov	r0, r1
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	70fb      	strb	r3, [r7, #3]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	70bb      	strb	r3, [r7, #2]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b4d2:	7878      	ldrb	r0, [r7, #1]
 800b4d4:	78ba      	ldrb	r2, [r7, #2]
 800b4d6:	78f9      	ldrb	r1, [r7, #3]
 800b4d8:	8b3b      	ldrh	r3, [r7, #24]
 800b4da:	9302      	str	r3, [sp, #8]
 800b4dc:	7d3b      	ldrb	r3, [r7, #20]
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	7c3b      	ldrb	r3, [r7, #16]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fa53 	bl	800b992 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b082      	sub	sp, #8
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	460b      	mov	r3, r1
 800b500:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b502:	78fb      	ldrb	r3, [r7, #3]
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fa72 	bl	800b9f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	460b      	mov	r3, r1
 800b520:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f836 	bl	800b594 <USBH_GetFreePipe>
 800b528:	4603      	mov	r3, r0
 800b52a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b52c:	89fb      	ldrh	r3, [r7, #14]
 800b52e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b532:	4293      	cmp	r3, r2
 800b534:	d00a      	beq.n	800b54c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b536:	78fa      	ldrb	r2, [r7, #3]
 800b538:	89fb      	ldrh	r3, [r7, #14]
 800b53a:	f003 030f 	and.w	r3, r3, #15
 800b53e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	33e0      	adds	r3, #224	; 0xe0
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	440b      	add	r3, r1
 800b54a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b54c:	89fb      	ldrh	r3, [r7, #14]
 800b54e:	b2db      	uxtb	r3, r3
}
 800b550:	4618      	mov	r0, r3
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	460b      	mov	r3, r1
 800b562:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b564:	78fb      	ldrb	r3, [r7, #3]
 800b566:	2b0a      	cmp	r3, #10
 800b568:	d80d      	bhi.n	800b586 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b56a:	78fb      	ldrb	r3, [r7, #3]
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	33e0      	adds	r3, #224	; 0xe0
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	78fb      	ldrb	r3, [r7, #3]
 800b578:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b57c:	6879      	ldr	r1, [r7, #4]
 800b57e:	33e0      	adds	r3, #224	; 0xe0
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	440b      	add	r3, r1
 800b584:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73fb      	strb	r3, [r7, #15]
 800b5a4:	e00f      	b.n	800b5c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	33e0      	adds	r3, #224	; 0xe0
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d102      	bne.n	800b5c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	e007      	b.n	800b5d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	73fb      	strb	r3, [r7, #15]
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	2b0a      	cmp	r3, #10
 800b5ca:	d9ec      	bls.n	800b5a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b5cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	490e      	ldr	r1, [pc, #56]	; (800b61c <MX_USB_HOST_Init+0x40>)
 800b5e4:	480e      	ldr	r0, [pc, #56]	; (800b620 <MX_USB_HOST_Init+0x44>)
 800b5e6:	f7fe fca1 	bl	8009f2c <USBH_Init>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b5f0:	f7f6 f84a 	bl	8001688 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b5f4:	490b      	ldr	r1, [pc, #44]	; (800b624 <MX_USB_HOST_Init+0x48>)
 800b5f6:	480a      	ldr	r0, [pc, #40]	; (800b620 <MX_USB_HOST_Init+0x44>)
 800b5f8:	f7fe fd26 	bl	800a048 <USBH_RegisterClass>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b602:	f7f6 f841 	bl	8001688 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b606:	4806      	ldr	r0, [pc, #24]	; (800b620 <MX_USB_HOST_Init+0x44>)
 800b608:	f7fe fdaa 	bl	800a160 <USBH_Start>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b612:	f7f6 f839 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b616:	bf00      	nop
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	0800b63d 	.word	0x0800b63d
 800b620:	20000428 	.word	0x20000428
 800b624:	2000000c 	.word	0x2000000c

0800b628 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b62c:	4802      	ldr	r0, [pc, #8]	; (800b638 <MX_USB_HOST_Process+0x10>)
 800b62e:	f7fe fda7 	bl	800a180 <USBH_Process>
}
 800b632:	bf00      	nop
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	20000428 	.word	0x20000428

0800b63c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b648:	78fb      	ldrb	r3, [r7, #3]
 800b64a:	3b01      	subs	r3, #1
 800b64c:	2b04      	cmp	r3, #4
 800b64e:	d819      	bhi.n	800b684 <USBH_UserProcess+0x48>
 800b650:	a201      	add	r2, pc, #4	; (adr r2, 800b658 <USBH_UserProcess+0x1c>)
 800b652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b656:	bf00      	nop
 800b658:	0800b685 	.word	0x0800b685
 800b65c:	0800b675 	.word	0x0800b675
 800b660:	0800b685 	.word	0x0800b685
 800b664:	0800b67d 	.word	0x0800b67d
 800b668:	0800b66d 	.word	0x0800b66d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b66c:	4b09      	ldr	r3, [pc, #36]	; (800b694 <USBH_UserProcess+0x58>)
 800b66e:	2203      	movs	r2, #3
 800b670:	701a      	strb	r2, [r3, #0]
  break;
 800b672:	e008      	b.n	800b686 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b674:	4b07      	ldr	r3, [pc, #28]	; (800b694 <USBH_UserProcess+0x58>)
 800b676:	2202      	movs	r2, #2
 800b678:	701a      	strb	r2, [r3, #0]
  break;
 800b67a:	e004      	b.n	800b686 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b67c:	4b05      	ldr	r3, [pc, #20]	; (800b694 <USBH_UserProcess+0x58>)
 800b67e:	2201      	movs	r2, #1
 800b680:	701a      	strb	r2, [r3, #0]
  break;
 800b682:	e000      	b.n	800b686 <USBH_UserProcess+0x4a>

  default:
  break;
 800b684:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20000220 	.word	0x20000220

0800b698 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08a      	sub	sp, #40	; 0x28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6a0:	f107 0314 	add.w	r3, r7, #20
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	605a      	str	r2, [r3, #4]
 800b6aa:	609a      	str	r2, [r3, #8]
 800b6ac:	60da      	str	r2, [r3, #12]
 800b6ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6b8:	d147      	bne.n	800b74a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	613b      	str	r3, [r7, #16]
 800b6be:	4b25      	ldr	r3, [pc, #148]	; (800b754 <HAL_HCD_MspInit+0xbc>)
 800b6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c2:	4a24      	ldr	r2, [pc, #144]	; (800b754 <HAL_HCD_MspInit+0xbc>)
 800b6c4:	f043 0301 	orr.w	r3, r3, #1
 800b6c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ca:	4b22      	ldr	r3, [pc, #136]	; (800b754 <HAL_HCD_MspInit+0xbc>)
 800b6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ce:	f003 0301 	and.w	r3, r3, #1
 800b6d2:	613b      	str	r3, [r7, #16]
 800b6d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b6d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b6e4:	f107 0314 	add.w	r3, r7, #20
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	481b      	ldr	r0, [pc, #108]	; (800b758 <HAL_HCD_MspInit+0xc0>)
 800b6ec:	f7f8 f952 	bl	8003994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b6f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b6f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6fe:	2303      	movs	r3, #3
 800b700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b702:	230a      	movs	r3, #10
 800b704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b706:	f107 0314 	add.w	r3, r7, #20
 800b70a:	4619      	mov	r1, r3
 800b70c:	4812      	ldr	r0, [pc, #72]	; (800b758 <HAL_HCD_MspInit+0xc0>)
 800b70e:	f7f8 f941 	bl	8003994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b712:	4b10      	ldr	r3, [pc, #64]	; (800b754 <HAL_HCD_MspInit+0xbc>)
 800b714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b716:	4a0f      	ldr	r2, [pc, #60]	; (800b754 <HAL_HCD_MspInit+0xbc>)
 800b718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b71c:	6353      	str	r3, [r2, #52]	; 0x34
 800b71e:	2300      	movs	r3, #0
 800b720:	60fb      	str	r3, [r7, #12]
 800b722:	4b0c      	ldr	r3, [pc, #48]	; (800b754 <HAL_HCD_MspInit+0xbc>)
 800b724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b726:	4a0b      	ldr	r2, [pc, #44]	; (800b754 <HAL_HCD_MspInit+0xbc>)
 800b728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b72c:	6453      	str	r3, [r2, #68]	; 0x44
 800b72e:	4b09      	ldr	r3, [pc, #36]	; (800b754 <HAL_HCD_MspInit+0xbc>)
 800b730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b73a:	2200      	movs	r2, #0
 800b73c:	2100      	movs	r1, #0
 800b73e:	2043      	movs	r0, #67	; 0x43
 800b740:	f7f7 fbec 	bl	8002f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b744:	2043      	movs	r0, #67	; 0x43
 800b746:	f7f7 fc15 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b74a:	bf00      	nop
 800b74c:	3728      	adds	r7, #40	; 0x28
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	40023800 	.word	0x40023800
 800b758:	40020000 	.word	0x40020000

0800b75c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7ff f8db 	bl	800a926 <USBH_LL_IncTimer>
}
 800b770:	bf00      	nop
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b786:	4618      	mov	r0, r3
 800b788:	f7ff f913 	bl	800a9b2 <USBH_LL_Connect>
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7ff f91c 	bl	800a9e0 <USBH_LL_Disconnect>
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	70fb      	strb	r3, [r7, #3]
 800b7bc:	4613      	mov	r3, r2
 800b7be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff f8cd 	bl	800a97a <USBH_LL_PortEnabled>
}
 800b7e0:	bf00      	nop
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff f8cd 	bl	800a996 <USBH_LL_PortDisabled>
}
 800b7fc:	bf00      	nop
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b812:	2b01      	cmp	r3, #1
 800b814:	d12a      	bne.n	800b86c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b816:	4a18      	ldr	r2, [pc, #96]	; (800b878 <USBH_LL_Init+0x74>)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a15      	ldr	r2, [pc, #84]	; (800b878 <USBH_LL_Init+0x74>)
 800b822:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b826:	4b14      	ldr	r3, [pc, #80]	; (800b878 <USBH_LL_Init+0x74>)
 800b828:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b82c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b82e:	4b12      	ldr	r3, [pc, #72]	; (800b878 <USBH_LL_Init+0x74>)
 800b830:	2208      	movs	r2, #8
 800b832:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b834:	4b10      	ldr	r3, [pc, #64]	; (800b878 <USBH_LL_Init+0x74>)
 800b836:	2201      	movs	r2, #1
 800b838:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b83a:	4b0f      	ldr	r3, [pc, #60]	; (800b878 <USBH_LL_Init+0x74>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b840:	4b0d      	ldr	r3, [pc, #52]	; (800b878 <USBH_LL_Init+0x74>)
 800b842:	2202      	movs	r2, #2
 800b844:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b846:	4b0c      	ldr	r3, [pc, #48]	; (800b878 <USBH_LL_Init+0x74>)
 800b848:	2200      	movs	r2, #0
 800b84a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b84c:	480a      	ldr	r0, [pc, #40]	; (800b878 <USBH_LL_Init+0x74>)
 800b84e:	f7f8 fb6f 	bl	8003f30 <HAL_HCD_Init>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d001      	beq.n	800b85c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b858:	f7f5 ff16 	bl	8001688 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b85c:	4806      	ldr	r0, [pc, #24]	; (800b878 <USBH_LL_Init+0x74>)
 800b85e:	f7f8 ff5e 	bl	800471e <HAL_HCD_GetCurrentFrame>
 800b862:	4603      	mov	r3, r0
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff f84e 	bl	800a908 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20000800 	.word	0x20000800

0800b87c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b884:	2300      	movs	r3, #0
 800b886:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b892:	4618      	mov	r0, r3
 800b894:	f7f8 fecd 	bl	8004632 <HAL_HCD_Start>
 800b898:	4603      	mov	r3, r0
 800b89a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 f95c 	bl	800bb5c <USBH_Get_USB_Status>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7f8 fed5 	bl	8004678 <HAL_HCD_Stop>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 f941 	bl	800bb5c <USBH_Get_USB_Status>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7f8 ff1d 	bl	800473a <HAL_HCD_GetCurrentSpeed>
 800b900:	4603      	mov	r3, r0
 800b902:	2b02      	cmp	r3, #2
 800b904:	d00c      	beq.n	800b920 <USBH_LL_GetSpeed+0x38>
 800b906:	2b02      	cmp	r3, #2
 800b908:	d80d      	bhi.n	800b926 <USBH_LL_GetSpeed+0x3e>
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d002      	beq.n	800b914 <USBH_LL_GetSpeed+0x2c>
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d003      	beq.n	800b91a <USBH_LL_GetSpeed+0x32>
 800b912:	e008      	b.n	800b926 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]
    break;
 800b918:	e008      	b.n	800b92c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b91a:	2301      	movs	r3, #1
 800b91c:	73fb      	strb	r3, [r7, #15]
    break;
 800b91e:	e005      	b.n	800b92c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b920:	2302      	movs	r3, #2
 800b922:	73fb      	strb	r3, [r7, #15]
    break;
 800b924:	e002      	b.n	800b92c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b926:	2301      	movs	r3, #1
 800b928:	73fb      	strb	r3, [r7, #15]
    break;
 800b92a:	bf00      	nop
  }
  return  speed;
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b084      	sub	sp, #16
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7f8 feb0 	bl	80046b2 <HAL_HCD_ResetPort>
 800b952:	4603      	mov	r3, r0
 800b954:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	4618      	mov	r0, r3
 800b95a:	f000 f8ff 	bl	800bb5c <USBH_Get_USB_Status>
 800b95e:	4603      	mov	r3, r0
 800b960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b962:	7bbb      	ldrb	r3, [r7, #14]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b97e:	78fa      	ldrb	r2, [r7, #3]
 800b980:	4611      	mov	r1, r2
 800b982:	4618      	mov	r0, r3
 800b984:	f7f8 feb7 	bl	80046f6 <HAL_HCD_HC_GetXferCount>
 800b988:	4603      	mov	r3, r0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b992:	b590      	push	{r4, r7, lr}
 800b994:	b089      	sub	sp, #36	; 0x24
 800b996:	af04      	add	r7, sp, #16
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	4608      	mov	r0, r1
 800b99c:	4611      	mov	r1, r2
 800b99e:	461a      	mov	r2, r3
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	70fb      	strb	r3, [r7, #3]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	70bb      	strb	r3, [r7, #2]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b9ba:	787c      	ldrb	r4, [r7, #1]
 800b9bc:	78ba      	ldrb	r2, [r7, #2]
 800b9be:	78f9      	ldrb	r1, [r7, #3]
 800b9c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b9c2:	9302      	str	r3, [sp, #8]
 800b9c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	4623      	mov	r3, r4
 800b9d2:	f7f8 fb1b 	bl	800400c <HAL_HCD_HC_Init>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 f8bd 	bl	800bb5c <USBH_Get_USB_Status>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd90      	pop	{r4, r7, pc}

0800b9f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba00:	2300      	movs	r3, #0
 800ba02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba0a:	78fa      	ldrb	r2, [r7, #3]
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7f8 fb8b 	bl	800412a <HAL_HCD_HC_Halt>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 f89e 	bl	800bb5c <USBH_Get_USB_Status>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ba2e:	b590      	push	{r4, r7, lr}
 800ba30:	b089      	sub	sp, #36	; 0x24
 800ba32:	af04      	add	r7, sp, #16
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	4608      	mov	r0, r1
 800ba38:	4611      	mov	r1, r2
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	70fb      	strb	r3, [r7, #3]
 800ba40:	460b      	mov	r3, r1
 800ba42:	70bb      	strb	r3, [r7, #2]
 800ba44:	4613      	mov	r3, r2
 800ba46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ba56:	787c      	ldrb	r4, [r7, #1]
 800ba58:	78ba      	ldrb	r2, [r7, #2]
 800ba5a:	78f9      	ldrb	r1, [r7, #3]
 800ba5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ba60:	9303      	str	r3, [sp, #12]
 800ba62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ba64:	9302      	str	r3, [sp, #8]
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	4623      	mov	r3, r4
 800ba72:	f7f8 fb7d 	bl	8004170 <HAL_HCD_HC_SubmitRequest>
 800ba76:	4603      	mov	r3, r0
 800ba78:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 f86d 	bl	800bb5c <USBH_Get_USB_Status>
 800ba82:	4603      	mov	r3, r0
 800ba84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd90      	pop	{r4, r7, pc}

0800ba90 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800baa2:	78fa      	ldrb	r2, [r7, #3]
 800baa4:	4611      	mov	r1, r2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7f8 fe11 	bl	80046ce <HAL_HCD_HC_GetURBState>
 800baac:	4603      	mov	r3, r0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b082      	sub	sp, #8
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	460b      	mov	r3, r1
 800bac0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d103      	bne.n	800bad4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bacc:	78fb      	ldrb	r3, [r7, #3]
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 f870 	bl	800bbb4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bad4:	20c8      	movs	r0, #200	; 0xc8
 800bad6:	f7f6 f9f3 	bl	8001ec0 <HAL_Delay>
  return USBH_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	70fb      	strb	r3, [r7, #3]
 800baf0:	4613      	mov	r3, r2
 800baf2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bafa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	212c      	movs	r1, #44	; 0x2c
 800bb02:	fb01 f303 	mul.w	r3, r1, r3
 800bb06:	4413      	add	r3, r2
 800bb08:	333b      	adds	r3, #59	; 0x3b
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d009      	beq.n	800bb24 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	68fa      	ldr	r2, [r7, #12]
 800bb14:	212c      	movs	r1, #44	; 0x2c
 800bb16:	fb01 f303 	mul.w	r3, r1, r3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	3354      	adds	r3, #84	; 0x54
 800bb1e:	78ba      	ldrb	r2, [r7, #2]
 800bb20:	701a      	strb	r2, [r3, #0]
 800bb22:	e008      	b.n	800bb36 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bb24:	78fb      	ldrb	r3, [r7, #3]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	212c      	movs	r1, #44	; 0x2c
 800bb2a:	fb01 f303 	mul.w	r3, r1, r3
 800bb2e:	4413      	add	r3, r2
 800bb30:	3355      	adds	r3, #85	; 0x55
 800bb32:	78ba      	ldrb	r2, [r7, #2]
 800bb34:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7f6 f9b7 	bl	8001ec0 <HAL_Delay>
}
 800bb52:	bf00      	nop
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
	...

0800bb5c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4603      	mov	r3, r0
 800bb64:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb66:	2300      	movs	r3, #0
 800bb68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb6a:	79fb      	ldrb	r3, [r7, #7]
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d817      	bhi.n	800bba0 <USBH_Get_USB_Status+0x44>
 800bb70:	a201      	add	r2, pc, #4	; (adr r2, 800bb78 <USBH_Get_USB_Status+0x1c>)
 800bb72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb76:	bf00      	nop
 800bb78:	0800bb89 	.word	0x0800bb89
 800bb7c:	0800bb8f 	.word	0x0800bb8f
 800bb80:	0800bb95 	.word	0x0800bb95
 800bb84:	0800bb9b 	.word	0x0800bb9b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb8c:	e00b      	b.n	800bba6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bb8e:	2302      	movs	r3, #2
 800bb90:	73fb      	strb	r3, [r7, #15]
    break;
 800bb92:	e008      	b.n	800bba6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bb94:	2301      	movs	r3, #1
 800bb96:	73fb      	strb	r3, [r7, #15]
    break;
 800bb98:	e005      	b.n	800bba6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bb9a:	2302      	movs	r3, #2
 800bb9c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb9e:	e002      	b.n	800bba6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bba0:	2302      	movs	r3, #2
 800bba2:	73fb      	strb	r3, [r7, #15]
    break;
 800bba4:	bf00      	nop
  }
  return usb_status;
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3714      	adds	r7, #20
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	4603      	mov	r3, r0
 800bbbc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bbbe:	79fb      	ldrb	r3, [r7, #7]
 800bbc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bbc2:	79fb      	ldrb	r3, [r7, #7]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d102      	bne.n	800bbce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	73fb      	strb	r3, [r7, #15]
 800bbcc:	e001      	b.n	800bbd2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	4803      	ldr	r0, [pc, #12]	; (800bbe8 <MX_DriverVbusFS+0x34>)
 800bbda:	f7f8 f977 	bl	8003ecc <HAL_GPIO_WritePin>
}
 800bbde:	bf00      	nop
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	40020800 	.word	0x40020800

0800bbec <__errno>:
 800bbec:	4b01      	ldr	r3, [pc, #4]	; (800bbf4 <__errno+0x8>)
 800bbee:	6818      	ldr	r0, [r3, #0]
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	2000002c 	.word	0x2000002c

0800bbf8 <__libc_init_array>:
 800bbf8:	b570      	push	{r4, r5, r6, lr}
 800bbfa:	4d0d      	ldr	r5, [pc, #52]	; (800bc30 <__libc_init_array+0x38>)
 800bbfc:	4c0d      	ldr	r4, [pc, #52]	; (800bc34 <__libc_init_array+0x3c>)
 800bbfe:	1b64      	subs	r4, r4, r5
 800bc00:	10a4      	asrs	r4, r4, #2
 800bc02:	2600      	movs	r6, #0
 800bc04:	42a6      	cmp	r6, r4
 800bc06:	d109      	bne.n	800bc1c <__libc_init_array+0x24>
 800bc08:	4d0b      	ldr	r5, [pc, #44]	; (800bc38 <__libc_init_array+0x40>)
 800bc0a:	4c0c      	ldr	r4, [pc, #48]	; (800bc3c <__libc_init_array+0x44>)
 800bc0c:	f004 fc50 	bl	80104b0 <_init>
 800bc10:	1b64      	subs	r4, r4, r5
 800bc12:	10a4      	asrs	r4, r4, #2
 800bc14:	2600      	movs	r6, #0
 800bc16:	42a6      	cmp	r6, r4
 800bc18:	d105      	bne.n	800bc26 <__libc_init_array+0x2e>
 800bc1a:	bd70      	pop	{r4, r5, r6, pc}
 800bc1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc20:	4798      	blx	r3
 800bc22:	3601      	adds	r6, #1
 800bc24:	e7ee      	b.n	800bc04 <__libc_init_array+0xc>
 800bc26:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc2a:	4798      	blx	r3
 800bc2c:	3601      	adds	r6, #1
 800bc2e:	e7f2      	b.n	800bc16 <__libc_init_array+0x1e>
 800bc30:	08010c4c 	.word	0x08010c4c
 800bc34:	08010c4c 	.word	0x08010c4c
 800bc38:	08010c4c 	.word	0x08010c4c
 800bc3c:	08010c50 	.word	0x08010c50

0800bc40 <malloc>:
 800bc40:	4b02      	ldr	r3, [pc, #8]	; (800bc4c <malloc+0xc>)
 800bc42:	4601      	mov	r1, r0
 800bc44:	6818      	ldr	r0, [r3, #0]
 800bc46:	f000 b863 	b.w	800bd10 <_malloc_r>
 800bc4a:	bf00      	nop
 800bc4c:	2000002c 	.word	0x2000002c

0800bc50 <free>:
 800bc50:	4b02      	ldr	r3, [pc, #8]	; (800bc5c <free+0xc>)
 800bc52:	4601      	mov	r1, r0
 800bc54:	6818      	ldr	r0, [r3, #0]
 800bc56:	f000 b80b 	b.w	800bc70 <_free_r>
 800bc5a:	bf00      	nop
 800bc5c:	2000002c 	.word	0x2000002c

0800bc60 <memset>:
 800bc60:	4402      	add	r2, r0
 800bc62:	4603      	mov	r3, r0
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d100      	bne.n	800bc6a <memset+0xa>
 800bc68:	4770      	bx	lr
 800bc6a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc6e:	e7f9      	b.n	800bc64 <memset+0x4>

0800bc70 <_free_r>:
 800bc70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc72:	2900      	cmp	r1, #0
 800bc74:	d048      	beq.n	800bd08 <_free_r+0x98>
 800bc76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc7a:	9001      	str	r0, [sp, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f1a1 0404 	sub.w	r4, r1, #4
 800bc82:	bfb8      	it	lt
 800bc84:	18e4      	addlt	r4, r4, r3
 800bc86:	f003 f80f 	bl	800eca8 <__malloc_lock>
 800bc8a:	4a20      	ldr	r2, [pc, #128]	; (800bd0c <_free_r+0x9c>)
 800bc8c:	9801      	ldr	r0, [sp, #4]
 800bc8e:	6813      	ldr	r3, [r2, #0]
 800bc90:	4615      	mov	r5, r2
 800bc92:	b933      	cbnz	r3, 800bca2 <_free_r+0x32>
 800bc94:	6063      	str	r3, [r4, #4]
 800bc96:	6014      	str	r4, [r2, #0]
 800bc98:	b003      	add	sp, #12
 800bc9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc9e:	f003 b809 	b.w	800ecb4 <__malloc_unlock>
 800bca2:	42a3      	cmp	r3, r4
 800bca4:	d90b      	bls.n	800bcbe <_free_r+0x4e>
 800bca6:	6821      	ldr	r1, [r4, #0]
 800bca8:	1862      	adds	r2, r4, r1
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	bf04      	itt	eq
 800bcae:	681a      	ldreq	r2, [r3, #0]
 800bcb0:	685b      	ldreq	r3, [r3, #4]
 800bcb2:	6063      	str	r3, [r4, #4]
 800bcb4:	bf04      	itt	eq
 800bcb6:	1852      	addeq	r2, r2, r1
 800bcb8:	6022      	streq	r2, [r4, #0]
 800bcba:	602c      	str	r4, [r5, #0]
 800bcbc:	e7ec      	b.n	800bc98 <_free_r+0x28>
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	b10b      	cbz	r3, 800bcc8 <_free_r+0x58>
 800bcc4:	42a3      	cmp	r3, r4
 800bcc6:	d9fa      	bls.n	800bcbe <_free_r+0x4e>
 800bcc8:	6811      	ldr	r1, [r2, #0]
 800bcca:	1855      	adds	r5, r2, r1
 800bccc:	42a5      	cmp	r5, r4
 800bcce:	d10b      	bne.n	800bce8 <_free_r+0x78>
 800bcd0:	6824      	ldr	r4, [r4, #0]
 800bcd2:	4421      	add	r1, r4
 800bcd4:	1854      	adds	r4, r2, r1
 800bcd6:	42a3      	cmp	r3, r4
 800bcd8:	6011      	str	r1, [r2, #0]
 800bcda:	d1dd      	bne.n	800bc98 <_free_r+0x28>
 800bcdc:	681c      	ldr	r4, [r3, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	6053      	str	r3, [r2, #4]
 800bce2:	4421      	add	r1, r4
 800bce4:	6011      	str	r1, [r2, #0]
 800bce6:	e7d7      	b.n	800bc98 <_free_r+0x28>
 800bce8:	d902      	bls.n	800bcf0 <_free_r+0x80>
 800bcea:	230c      	movs	r3, #12
 800bcec:	6003      	str	r3, [r0, #0]
 800bcee:	e7d3      	b.n	800bc98 <_free_r+0x28>
 800bcf0:	6825      	ldr	r5, [r4, #0]
 800bcf2:	1961      	adds	r1, r4, r5
 800bcf4:	428b      	cmp	r3, r1
 800bcf6:	bf04      	itt	eq
 800bcf8:	6819      	ldreq	r1, [r3, #0]
 800bcfa:	685b      	ldreq	r3, [r3, #4]
 800bcfc:	6063      	str	r3, [r4, #4]
 800bcfe:	bf04      	itt	eq
 800bd00:	1949      	addeq	r1, r1, r5
 800bd02:	6021      	streq	r1, [r4, #0]
 800bd04:	6054      	str	r4, [r2, #4]
 800bd06:	e7c7      	b.n	800bc98 <_free_r+0x28>
 800bd08:	b003      	add	sp, #12
 800bd0a:	bd30      	pop	{r4, r5, pc}
 800bd0c:	20000224 	.word	0x20000224

0800bd10 <_malloc_r>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	1ccd      	adds	r5, r1, #3
 800bd14:	f025 0503 	bic.w	r5, r5, #3
 800bd18:	3508      	adds	r5, #8
 800bd1a:	2d0c      	cmp	r5, #12
 800bd1c:	bf38      	it	cc
 800bd1e:	250c      	movcc	r5, #12
 800bd20:	2d00      	cmp	r5, #0
 800bd22:	4606      	mov	r6, r0
 800bd24:	db01      	blt.n	800bd2a <_malloc_r+0x1a>
 800bd26:	42a9      	cmp	r1, r5
 800bd28:	d903      	bls.n	800bd32 <_malloc_r+0x22>
 800bd2a:	230c      	movs	r3, #12
 800bd2c:	6033      	str	r3, [r6, #0]
 800bd2e:	2000      	movs	r0, #0
 800bd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd32:	f002 ffb9 	bl	800eca8 <__malloc_lock>
 800bd36:	4921      	ldr	r1, [pc, #132]	; (800bdbc <_malloc_r+0xac>)
 800bd38:	680a      	ldr	r2, [r1, #0]
 800bd3a:	4614      	mov	r4, r2
 800bd3c:	b99c      	cbnz	r4, 800bd66 <_malloc_r+0x56>
 800bd3e:	4f20      	ldr	r7, [pc, #128]	; (800bdc0 <_malloc_r+0xb0>)
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	b923      	cbnz	r3, 800bd4e <_malloc_r+0x3e>
 800bd44:	4621      	mov	r1, r4
 800bd46:	4630      	mov	r0, r6
 800bd48:	f000 feb6 	bl	800cab8 <_sbrk_r>
 800bd4c:	6038      	str	r0, [r7, #0]
 800bd4e:	4629      	mov	r1, r5
 800bd50:	4630      	mov	r0, r6
 800bd52:	f000 feb1 	bl	800cab8 <_sbrk_r>
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	d123      	bne.n	800bda2 <_malloc_r+0x92>
 800bd5a:	230c      	movs	r3, #12
 800bd5c:	6033      	str	r3, [r6, #0]
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f002 ffa8 	bl	800ecb4 <__malloc_unlock>
 800bd64:	e7e3      	b.n	800bd2e <_malloc_r+0x1e>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	1b5b      	subs	r3, r3, r5
 800bd6a:	d417      	bmi.n	800bd9c <_malloc_r+0x8c>
 800bd6c:	2b0b      	cmp	r3, #11
 800bd6e:	d903      	bls.n	800bd78 <_malloc_r+0x68>
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	441c      	add	r4, r3
 800bd74:	6025      	str	r5, [r4, #0]
 800bd76:	e004      	b.n	800bd82 <_malloc_r+0x72>
 800bd78:	6863      	ldr	r3, [r4, #4]
 800bd7a:	42a2      	cmp	r2, r4
 800bd7c:	bf0c      	ite	eq
 800bd7e:	600b      	streq	r3, [r1, #0]
 800bd80:	6053      	strne	r3, [r2, #4]
 800bd82:	4630      	mov	r0, r6
 800bd84:	f002 ff96 	bl	800ecb4 <__malloc_unlock>
 800bd88:	f104 000b 	add.w	r0, r4, #11
 800bd8c:	1d23      	adds	r3, r4, #4
 800bd8e:	f020 0007 	bic.w	r0, r0, #7
 800bd92:	1ac2      	subs	r2, r0, r3
 800bd94:	d0cc      	beq.n	800bd30 <_malloc_r+0x20>
 800bd96:	1a1b      	subs	r3, r3, r0
 800bd98:	50a3      	str	r3, [r4, r2]
 800bd9a:	e7c9      	b.n	800bd30 <_malloc_r+0x20>
 800bd9c:	4622      	mov	r2, r4
 800bd9e:	6864      	ldr	r4, [r4, #4]
 800bda0:	e7cc      	b.n	800bd3c <_malloc_r+0x2c>
 800bda2:	1cc4      	adds	r4, r0, #3
 800bda4:	f024 0403 	bic.w	r4, r4, #3
 800bda8:	42a0      	cmp	r0, r4
 800bdaa:	d0e3      	beq.n	800bd74 <_malloc_r+0x64>
 800bdac:	1a21      	subs	r1, r4, r0
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f000 fe82 	bl	800cab8 <_sbrk_r>
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	d1dd      	bne.n	800bd74 <_malloc_r+0x64>
 800bdb8:	e7cf      	b.n	800bd5a <_malloc_r+0x4a>
 800bdba:	bf00      	nop
 800bdbc:	20000224 	.word	0x20000224
 800bdc0:	20000228 	.word	0x20000228

0800bdc4 <__cvt>:
 800bdc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc8:	ec55 4b10 	vmov	r4, r5, d0
 800bdcc:	2d00      	cmp	r5, #0
 800bdce:	460e      	mov	r6, r1
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	462b      	mov	r3, r5
 800bdd4:	bfbb      	ittet	lt
 800bdd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bdda:	461d      	movlt	r5, r3
 800bddc:	2300      	movge	r3, #0
 800bdde:	232d      	movlt	r3, #45	; 0x2d
 800bde0:	700b      	strb	r3, [r1, #0]
 800bde2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bde4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bde8:	4691      	mov	r9, r2
 800bdea:	f023 0820 	bic.w	r8, r3, #32
 800bdee:	bfbc      	itt	lt
 800bdf0:	4622      	movlt	r2, r4
 800bdf2:	4614      	movlt	r4, r2
 800bdf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdf8:	d005      	beq.n	800be06 <__cvt+0x42>
 800bdfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bdfe:	d100      	bne.n	800be02 <__cvt+0x3e>
 800be00:	3601      	adds	r6, #1
 800be02:	2102      	movs	r1, #2
 800be04:	e000      	b.n	800be08 <__cvt+0x44>
 800be06:	2103      	movs	r1, #3
 800be08:	ab03      	add	r3, sp, #12
 800be0a:	9301      	str	r3, [sp, #4]
 800be0c:	ab02      	add	r3, sp, #8
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	ec45 4b10 	vmov	d0, r4, r5
 800be14:	4653      	mov	r3, sl
 800be16:	4632      	mov	r2, r6
 800be18:	f001 fdc6 	bl	800d9a8 <_dtoa_r>
 800be1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800be20:	4607      	mov	r7, r0
 800be22:	d102      	bne.n	800be2a <__cvt+0x66>
 800be24:	f019 0f01 	tst.w	r9, #1
 800be28:	d022      	beq.n	800be70 <__cvt+0xac>
 800be2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be2e:	eb07 0906 	add.w	r9, r7, r6
 800be32:	d110      	bne.n	800be56 <__cvt+0x92>
 800be34:	783b      	ldrb	r3, [r7, #0]
 800be36:	2b30      	cmp	r3, #48	; 0x30
 800be38:	d10a      	bne.n	800be50 <__cvt+0x8c>
 800be3a:	2200      	movs	r2, #0
 800be3c:	2300      	movs	r3, #0
 800be3e:	4620      	mov	r0, r4
 800be40:	4629      	mov	r1, r5
 800be42:	f7f4 fe49 	bl	8000ad8 <__aeabi_dcmpeq>
 800be46:	b918      	cbnz	r0, 800be50 <__cvt+0x8c>
 800be48:	f1c6 0601 	rsb	r6, r6, #1
 800be4c:	f8ca 6000 	str.w	r6, [sl]
 800be50:	f8da 3000 	ldr.w	r3, [sl]
 800be54:	4499      	add	r9, r3
 800be56:	2200      	movs	r2, #0
 800be58:	2300      	movs	r3, #0
 800be5a:	4620      	mov	r0, r4
 800be5c:	4629      	mov	r1, r5
 800be5e:	f7f4 fe3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800be62:	b108      	cbz	r0, 800be68 <__cvt+0xa4>
 800be64:	f8cd 900c 	str.w	r9, [sp, #12]
 800be68:	2230      	movs	r2, #48	; 0x30
 800be6a:	9b03      	ldr	r3, [sp, #12]
 800be6c:	454b      	cmp	r3, r9
 800be6e:	d307      	bcc.n	800be80 <__cvt+0xbc>
 800be70:	9b03      	ldr	r3, [sp, #12]
 800be72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be74:	1bdb      	subs	r3, r3, r7
 800be76:	4638      	mov	r0, r7
 800be78:	6013      	str	r3, [r2, #0]
 800be7a:	b004      	add	sp, #16
 800be7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be80:	1c59      	adds	r1, r3, #1
 800be82:	9103      	str	r1, [sp, #12]
 800be84:	701a      	strb	r2, [r3, #0]
 800be86:	e7f0      	b.n	800be6a <__cvt+0xa6>

0800be88 <__exponent>:
 800be88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be8a:	4603      	mov	r3, r0
 800be8c:	2900      	cmp	r1, #0
 800be8e:	bfb8      	it	lt
 800be90:	4249      	neglt	r1, r1
 800be92:	f803 2b02 	strb.w	r2, [r3], #2
 800be96:	bfb4      	ite	lt
 800be98:	222d      	movlt	r2, #45	; 0x2d
 800be9a:	222b      	movge	r2, #43	; 0x2b
 800be9c:	2909      	cmp	r1, #9
 800be9e:	7042      	strb	r2, [r0, #1]
 800bea0:	dd2a      	ble.n	800bef8 <__exponent+0x70>
 800bea2:	f10d 0407 	add.w	r4, sp, #7
 800bea6:	46a4      	mov	ip, r4
 800bea8:	270a      	movs	r7, #10
 800beaa:	46a6      	mov	lr, r4
 800beac:	460a      	mov	r2, r1
 800beae:	fb91 f6f7 	sdiv	r6, r1, r7
 800beb2:	fb07 1516 	mls	r5, r7, r6, r1
 800beb6:	3530      	adds	r5, #48	; 0x30
 800beb8:	2a63      	cmp	r2, #99	; 0x63
 800beba:	f104 34ff 	add.w	r4, r4, #4294967295
 800bebe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bec2:	4631      	mov	r1, r6
 800bec4:	dcf1      	bgt.n	800beaa <__exponent+0x22>
 800bec6:	3130      	adds	r1, #48	; 0x30
 800bec8:	f1ae 0502 	sub.w	r5, lr, #2
 800becc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bed0:	1c44      	adds	r4, r0, #1
 800bed2:	4629      	mov	r1, r5
 800bed4:	4561      	cmp	r1, ip
 800bed6:	d30a      	bcc.n	800beee <__exponent+0x66>
 800bed8:	f10d 0209 	add.w	r2, sp, #9
 800bedc:	eba2 020e 	sub.w	r2, r2, lr
 800bee0:	4565      	cmp	r5, ip
 800bee2:	bf88      	it	hi
 800bee4:	2200      	movhi	r2, #0
 800bee6:	4413      	add	r3, r2
 800bee8:	1a18      	subs	r0, r3, r0
 800beea:	b003      	add	sp, #12
 800beec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bef2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bef6:	e7ed      	b.n	800bed4 <__exponent+0x4c>
 800bef8:	2330      	movs	r3, #48	; 0x30
 800befa:	3130      	adds	r1, #48	; 0x30
 800befc:	7083      	strb	r3, [r0, #2]
 800befe:	70c1      	strb	r1, [r0, #3]
 800bf00:	1d03      	adds	r3, r0, #4
 800bf02:	e7f1      	b.n	800bee8 <__exponent+0x60>

0800bf04 <_printf_float>:
 800bf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf08:	ed2d 8b02 	vpush	{d8}
 800bf0c:	b08d      	sub	sp, #52	; 0x34
 800bf0e:	460c      	mov	r4, r1
 800bf10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bf14:	4616      	mov	r6, r2
 800bf16:	461f      	mov	r7, r3
 800bf18:	4605      	mov	r5, r0
 800bf1a:	f002 fea1 	bl	800ec60 <_localeconv_r>
 800bf1e:	f8d0 a000 	ldr.w	sl, [r0]
 800bf22:	4650      	mov	r0, sl
 800bf24:	f7f4 f95c 	bl	80001e0 <strlen>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	930a      	str	r3, [sp, #40]	; 0x28
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	9305      	str	r3, [sp, #20]
 800bf30:	f8d8 3000 	ldr.w	r3, [r8]
 800bf34:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bf38:	3307      	adds	r3, #7
 800bf3a:	f023 0307 	bic.w	r3, r3, #7
 800bf3e:	f103 0208 	add.w	r2, r3, #8
 800bf42:	f8c8 2000 	str.w	r2, [r8]
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bf4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bf52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf56:	9307      	str	r3, [sp, #28]
 800bf58:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf5c:	ee08 0a10 	vmov	s16, r0
 800bf60:	4b9f      	ldr	r3, [pc, #636]	; (800c1e0 <_printf_float+0x2dc>)
 800bf62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf66:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6a:	f7f4 fde7 	bl	8000b3c <__aeabi_dcmpun>
 800bf6e:	bb88      	cbnz	r0, 800bfd4 <_printf_float+0xd0>
 800bf70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf74:	4b9a      	ldr	r3, [pc, #616]	; (800c1e0 <_printf_float+0x2dc>)
 800bf76:	f04f 32ff 	mov.w	r2, #4294967295
 800bf7a:	f7f4 fdc1 	bl	8000b00 <__aeabi_dcmple>
 800bf7e:	bb48      	cbnz	r0, 800bfd4 <_printf_float+0xd0>
 800bf80:	2200      	movs	r2, #0
 800bf82:	2300      	movs	r3, #0
 800bf84:	4640      	mov	r0, r8
 800bf86:	4649      	mov	r1, r9
 800bf88:	f7f4 fdb0 	bl	8000aec <__aeabi_dcmplt>
 800bf8c:	b110      	cbz	r0, 800bf94 <_printf_float+0x90>
 800bf8e:	232d      	movs	r3, #45	; 0x2d
 800bf90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf94:	4b93      	ldr	r3, [pc, #588]	; (800c1e4 <_printf_float+0x2e0>)
 800bf96:	4894      	ldr	r0, [pc, #592]	; (800c1e8 <_printf_float+0x2e4>)
 800bf98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf9c:	bf94      	ite	ls
 800bf9e:	4698      	movls	r8, r3
 800bfa0:	4680      	movhi	r8, r0
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	6123      	str	r3, [r4, #16]
 800bfa6:	9b05      	ldr	r3, [sp, #20]
 800bfa8:	f023 0204 	bic.w	r2, r3, #4
 800bfac:	6022      	str	r2, [r4, #0]
 800bfae:	f04f 0900 	mov.w	r9, #0
 800bfb2:	9700      	str	r7, [sp, #0]
 800bfb4:	4633      	mov	r3, r6
 800bfb6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f000 f9d8 	bl	800c370 <_printf_common>
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	f040 8090 	bne.w	800c0e6 <_printf_float+0x1e2>
 800bfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfca:	b00d      	add	sp, #52	; 0x34
 800bfcc:	ecbd 8b02 	vpop	{d8}
 800bfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd4:	4642      	mov	r2, r8
 800bfd6:	464b      	mov	r3, r9
 800bfd8:	4640      	mov	r0, r8
 800bfda:	4649      	mov	r1, r9
 800bfdc:	f7f4 fdae 	bl	8000b3c <__aeabi_dcmpun>
 800bfe0:	b140      	cbz	r0, 800bff4 <_printf_float+0xf0>
 800bfe2:	464b      	mov	r3, r9
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	bfbc      	itt	lt
 800bfe8:	232d      	movlt	r3, #45	; 0x2d
 800bfea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bfee:	487f      	ldr	r0, [pc, #508]	; (800c1ec <_printf_float+0x2e8>)
 800bff0:	4b7f      	ldr	r3, [pc, #508]	; (800c1f0 <_printf_float+0x2ec>)
 800bff2:	e7d1      	b.n	800bf98 <_printf_float+0x94>
 800bff4:	6863      	ldr	r3, [r4, #4]
 800bff6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bffa:	9206      	str	r2, [sp, #24]
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	d13f      	bne.n	800c080 <_printf_float+0x17c>
 800c000:	2306      	movs	r3, #6
 800c002:	6063      	str	r3, [r4, #4]
 800c004:	9b05      	ldr	r3, [sp, #20]
 800c006:	6861      	ldr	r1, [r4, #4]
 800c008:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c00c:	2300      	movs	r3, #0
 800c00e:	9303      	str	r3, [sp, #12]
 800c010:	ab0a      	add	r3, sp, #40	; 0x28
 800c012:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c016:	ab09      	add	r3, sp, #36	; 0x24
 800c018:	ec49 8b10 	vmov	d0, r8, r9
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	6022      	str	r2, [r4, #0]
 800c020:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c024:	4628      	mov	r0, r5
 800c026:	f7ff fecd 	bl	800bdc4 <__cvt>
 800c02a:	9b06      	ldr	r3, [sp, #24]
 800c02c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c02e:	2b47      	cmp	r3, #71	; 0x47
 800c030:	4680      	mov	r8, r0
 800c032:	d108      	bne.n	800c046 <_printf_float+0x142>
 800c034:	1cc8      	adds	r0, r1, #3
 800c036:	db02      	blt.n	800c03e <_printf_float+0x13a>
 800c038:	6863      	ldr	r3, [r4, #4]
 800c03a:	4299      	cmp	r1, r3
 800c03c:	dd41      	ble.n	800c0c2 <_printf_float+0x1be>
 800c03e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c042:	fa5f fb8b 	uxtb.w	fp, fp
 800c046:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c04a:	d820      	bhi.n	800c08e <_printf_float+0x18a>
 800c04c:	3901      	subs	r1, #1
 800c04e:	465a      	mov	r2, fp
 800c050:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c054:	9109      	str	r1, [sp, #36]	; 0x24
 800c056:	f7ff ff17 	bl	800be88 <__exponent>
 800c05a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c05c:	1813      	adds	r3, r2, r0
 800c05e:	2a01      	cmp	r2, #1
 800c060:	4681      	mov	r9, r0
 800c062:	6123      	str	r3, [r4, #16]
 800c064:	dc02      	bgt.n	800c06c <_printf_float+0x168>
 800c066:	6822      	ldr	r2, [r4, #0]
 800c068:	07d2      	lsls	r2, r2, #31
 800c06a:	d501      	bpl.n	800c070 <_printf_float+0x16c>
 800c06c:	3301      	adds	r3, #1
 800c06e:	6123      	str	r3, [r4, #16]
 800c070:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c074:	2b00      	cmp	r3, #0
 800c076:	d09c      	beq.n	800bfb2 <_printf_float+0xae>
 800c078:	232d      	movs	r3, #45	; 0x2d
 800c07a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c07e:	e798      	b.n	800bfb2 <_printf_float+0xae>
 800c080:	9a06      	ldr	r2, [sp, #24]
 800c082:	2a47      	cmp	r2, #71	; 0x47
 800c084:	d1be      	bne.n	800c004 <_printf_float+0x100>
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1bc      	bne.n	800c004 <_printf_float+0x100>
 800c08a:	2301      	movs	r3, #1
 800c08c:	e7b9      	b.n	800c002 <_printf_float+0xfe>
 800c08e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c092:	d118      	bne.n	800c0c6 <_printf_float+0x1c2>
 800c094:	2900      	cmp	r1, #0
 800c096:	6863      	ldr	r3, [r4, #4]
 800c098:	dd0b      	ble.n	800c0b2 <_printf_float+0x1ae>
 800c09a:	6121      	str	r1, [r4, #16]
 800c09c:	b913      	cbnz	r3, 800c0a4 <_printf_float+0x1a0>
 800c09e:	6822      	ldr	r2, [r4, #0]
 800c0a0:	07d0      	lsls	r0, r2, #31
 800c0a2:	d502      	bpl.n	800c0aa <_printf_float+0x1a6>
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	440b      	add	r3, r1
 800c0a8:	6123      	str	r3, [r4, #16]
 800c0aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800c0ac:	f04f 0900 	mov.w	r9, #0
 800c0b0:	e7de      	b.n	800c070 <_printf_float+0x16c>
 800c0b2:	b913      	cbnz	r3, 800c0ba <_printf_float+0x1b6>
 800c0b4:	6822      	ldr	r2, [r4, #0]
 800c0b6:	07d2      	lsls	r2, r2, #31
 800c0b8:	d501      	bpl.n	800c0be <_printf_float+0x1ba>
 800c0ba:	3302      	adds	r3, #2
 800c0bc:	e7f4      	b.n	800c0a8 <_printf_float+0x1a4>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e7f2      	b.n	800c0a8 <_printf_float+0x1a4>
 800c0c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c0c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	db05      	blt.n	800c0d8 <_printf_float+0x1d4>
 800c0cc:	6823      	ldr	r3, [r4, #0]
 800c0ce:	6121      	str	r1, [r4, #16]
 800c0d0:	07d8      	lsls	r0, r3, #31
 800c0d2:	d5ea      	bpl.n	800c0aa <_printf_float+0x1a6>
 800c0d4:	1c4b      	adds	r3, r1, #1
 800c0d6:	e7e7      	b.n	800c0a8 <_printf_float+0x1a4>
 800c0d8:	2900      	cmp	r1, #0
 800c0da:	bfd4      	ite	le
 800c0dc:	f1c1 0202 	rsble	r2, r1, #2
 800c0e0:	2201      	movgt	r2, #1
 800c0e2:	4413      	add	r3, r2
 800c0e4:	e7e0      	b.n	800c0a8 <_printf_float+0x1a4>
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	055a      	lsls	r2, r3, #21
 800c0ea:	d407      	bmi.n	800c0fc <_printf_float+0x1f8>
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	4642      	mov	r2, r8
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	47b8      	blx	r7
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	d12c      	bne.n	800c154 <_printf_float+0x250>
 800c0fa:	e764      	b.n	800bfc6 <_printf_float+0xc2>
 800c0fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c100:	f240 80e0 	bls.w	800c2c4 <_printf_float+0x3c0>
 800c104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c108:	2200      	movs	r2, #0
 800c10a:	2300      	movs	r3, #0
 800c10c:	f7f4 fce4 	bl	8000ad8 <__aeabi_dcmpeq>
 800c110:	2800      	cmp	r0, #0
 800c112:	d034      	beq.n	800c17e <_printf_float+0x27a>
 800c114:	4a37      	ldr	r2, [pc, #220]	; (800c1f4 <_printf_float+0x2f0>)
 800c116:	2301      	movs	r3, #1
 800c118:	4631      	mov	r1, r6
 800c11a:	4628      	mov	r0, r5
 800c11c:	47b8      	blx	r7
 800c11e:	3001      	adds	r0, #1
 800c120:	f43f af51 	beq.w	800bfc6 <_printf_float+0xc2>
 800c124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c128:	429a      	cmp	r2, r3
 800c12a:	db02      	blt.n	800c132 <_printf_float+0x22e>
 800c12c:	6823      	ldr	r3, [r4, #0]
 800c12e:	07d8      	lsls	r0, r3, #31
 800c130:	d510      	bpl.n	800c154 <_printf_float+0x250>
 800c132:	ee18 3a10 	vmov	r3, s16
 800c136:	4652      	mov	r2, sl
 800c138:	4631      	mov	r1, r6
 800c13a:	4628      	mov	r0, r5
 800c13c:	47b8      	blx	r7
 800c13e:	3001      	adds	r0, #1
 800c140:	f43f af41 	beq.w	800bfc6 <_printf_float+0xc2>
 800c144:	f04f 0800 	mov.w	r8, #0
 800c148:	f104 091a 	add.w	r9, r4, #26
 800c14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c14e:	3b01      	subs	r3, #1
 800c150:	4543      	cmp	r3, r8
 800c152:	dc09      	bgt.n	800c168 <_printf_float+0x264>
 800c154:	6823      	ldr	r3, [r4, #0]
 800c156:	079b      	lsls	r3, r3, #30
 800c158:	f100 8105 	bmi.w	800c366 <_printf_float+0x462>
 800c15c:	68e0      	ldr	r0, [r4, #12]
 800c15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c160:	4298      	cmp	r0, r3
 800c162:	bfb8      	it	lt
 800c164:	4618      	movlt	r0, r3
 800c166:	e730      	b.n	800bfca <_printf_float+0xc6>
 800c168:	2301      	movs	r3, #1
 800c16a:	464a      	mov	r2, r9
 800c16c:	4631      	mov	r1, r6
 800c16e:	4628      	mov	r0, r5
 800c170:	47b8      	blx	r7
 800c172:	3001      	adds	r0, #1
 800c174:	f43f af27 	beq.w	800bfc6 <_printf_float+0xc2>
 800c178:	f108 0801 	add.w	r8, r8, #1
 800c17c:	e7e6      	b.n	800c14c <_printf_float+0x248>
 800c17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c180:	2b00      	cmp	r3, #0
 800c182:	dc39      	bgt.n	800c1f8 <_printf_float+0x2f4>
 800c184:	4a1b      	ldr	r2, [pc, #108]	; (800c1f4 <_printf_float+0x2f0>)
 800c186:	2301      	movs	r3, #1
 800c188:	4631      	mov	r1, r6
 800c18a:	4628      	mov	r0, r5
 800c18c:	47b8      	blx	r7
 800c18e:	3001      	adds	r0, #1
 800c190:	f43f af19 	beq.w	800bfc6 <_printf_float+0xc2>
 800c194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c198:	4313      	orrs	r3, r2
 800c19a:	d102      	bne.n	800c1a2 <_printf_float+0x29e>
 800c19c:	6823      	ldr	r3, [r4, #0]
 800c19e:	07d9      	lsls	r1, r3, #31
 800c1a0:	d5d8      	bpl.n	800c154 <_printf_float+0x250>
 800c1a2:	ee18 3a10 	vmov	r3, s16
 800c1a6:	4652      	mov	r2, sl
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	47b8      	blx	r7
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	f43f af09 	beq.w	800bfc6 <_printf_float+0xc2>
 800c1b4:	f04f 0900 	mov.w	r9, #0
 800c1b8:	f104 0a1a 	add.w	sl, r4, #26
 800c1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1be:	425b      	negs	r3, r3
 800c1c0:	454b      	cmp	r3, r9
 800c1c2:	dc01      	bgt.n	800c1c8 <_printf_float+0x2c4>
 800c1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1c6:	e792      	b.n	800c0ee <_printf_float+0x1ea>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	4652      	mov	r2, sl
 800c1cc:	4631      	mov	r1, r6
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	47b8      	blx	r7
 800c1d2:	3001      	adds	r0, #1
 800c1d4:	f43f aef7 	beq.w	800bfc6 <_printf_float+0xc2>
 800c1d8:	f109 0901 	add.w	r9, r9, #1
 800c1dc:	e7ee      	b.n	800c1bc <_printf_float+0x2b8>
 800c1de:	bf00      	nop
 800c1e0:	7fefffff 	.word	0x7fefffff
 800c1e4:	08010790 	.word	0x08010790
 800c1e8:	08010794 	.word	0x08010794
 800c1ec:	0801079c 	.word	0x0801079c
 800c1f0:	08010798 	.word	0x08010798
 800c1f4:	080107a0 	.word	0x080107a0
 800c1f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	bfa8      	it	ge
 800c200:	461a      	movge	r2, r3
 800c202:	2a00      	cmp	r2, #0
 800c204:	4691      	mov	r9, r2
 800c206:	dc37      	bgt.n	800c278 <_printf_float+0x374>
 800c208:	f04f 0b00 	mov.w	fp, #0
 800c20c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c210:	f104 021a 	add.w	r2, r4, #26
 800c214:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c216:	9305      	str	r3, [sp, #20]
 800c218:	eba3 0309 	sub.w	r3, r3, r9
 800c21c:	455b      	cmp	r3, fp
 800c21e:	dc33      	bgt.n	800c288 <_printf_float+0x384>
 800c220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c224:	429a      	cmp	r2, r3
 800c226:	db3b      	blt.n	800c2a0 <_printf_float+0x39c>
 800c228:	6823      	ldr	r3, [r4, #0]
 800c22a:	07da      	lsls	r2, r3, #31
 800c22c:	d438      	bmi.n	800c2a0 <_printf_float+0x39c>
 800c22e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c230:	9b05      	ldr	r3, [sp, #20]
 800c232:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	eba2 0901 	sub.w	r9, r2, r1
 800c23a:	4599      	cmp	r9, r3
 800c23c:	bfa8      	it	ge
 800c23e:	4699      	movge	r9, r3
 800c240:	f1b9 0f00 	cmp.w	r9, #0
 800c244:	dc35      	bgt.n	800c2b2 <_printf_float+0x3ae>
 800c246:	f04f 0800 	mov.w	r8, #0
 800c24a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c24e:	f104 0a1a 	add.w	sl, r4, #26
 800c252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c256:	1a9b      	subs	r3, r3, r2
 800c258:	eba3 0309 	sub.w	r3, r3, r9
 800c25c:	4543      	cmp	r3, r8
 800c25e:	f77f af79 	ble.w	800c154 <_printf_float+0x250>
 800c262:	2301      	movs	r3, #1
 800c264:	4652      	mov	r2, sl
 800c266:	4631      	mov	r1, r6
 800c268:	4628      	mov	r0, r5
 800c26a:	47b8      	blx	r7
 800c26c:	3001      	adds	r0, #1
 800c26e:	f43f aeaa 	beq.w	800bfc6 <_printf_float+0xc2>
 800c272:	f108 0801 	add.w	r8, r8, #1
 800c276:	e7ec      	b.n	800c252 <_printf_float+0x34e>
 800c278:	4613      	mov	r3, r2
 800c27a:	4631      	mov	r1, r6
 800c27c:	4642      	mov	r2, r8
 800c27e:	4628      	mov	r0, r5
 800c280:	47b8      	blx	r7
 800c282:	3001      	adds	r0, #1
 800c284:	d1c0      	bne.n	800c208 <_printf_float+0x304>
 800c286:	e69e      	b.n	800bfc6 <_printf_float+0xc2>
 800c288:	2301      	movs	r3, #1
 800c28a:	4631      	mov	r1, r6
 800c28c:	4628      	mov	r0, r5
 800c28e:	9205      	str	r2, [sp, #20]
 800c290:	47b8      	blx	r7
 800c292:	3001      	adds	r0, #1
 800c294:	f43f ae97 	beq.w	800bfc6 <_printf_float+0xc2>
 800c298:	9a05      	ldr	r2, [sp, #20]
 800c29a:	f10b 0b01 	add.w	fp, fp, #1
 800c29e:	e7b9      	b.n	800c214 <_printf_float+0x310>
 800c2a0:	ee18 3a10 	vmov	r3, s16
 800c2a4:	4652      	mov	r2, sl
 800c2a6:	4631      	mov	r1, r6
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	47b8      	blx	r7
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d1be      	bne.n	800c22e <_printf_float+0x32a>
 800c2b0:	e689      	b.n	800bfc6 <_printf_float+0xc2>
 800c2b2:	9a05      	ldr	r2, [sp, #20]
 800c2b4:	464b      	mov	r3, r9
 800c2b6:	4442      	add	r2, r8
 800c2b8:	4631      	mov	r1, r6
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	47b8      	blx	r7
 800c2be:	3001      	adds	r0, #1
 800c2c0:	d1c1      	bne.n	800c246 <_printf_float+0x342>
 800c2c2:	e680      	b.n	800bfc6 <_printf_float+0xc2>
 800c2c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2c6:	2a01      	cmp	r2, #1
 800c2c8:	dc01      	bgt.n	800c2ce <_printf_float+0x3ca>
 800c2ca:	07db      	lsls	r3, r3, #31
 800c2cc:	d538      	bpl.n	800c340 <_printf_float+0x43c>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	4642      	mov	r2, r8
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	47b8      	blx	r7
 800c2d8:	3001      	adds	r0, #1
 800c2da:	f43f ae74 	beq.w	800bfc6 <_printf_float+0xc2>
 800c2de:	ee18 3a10 	vmov	r3, s16
 800c2e2:	4652      	mov	r2, sl
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	47b8      	blx	r7
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	f43f ae6b 	beq.w	800bfc6 <_printf_float+0xc2>
 800c2f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	f7f4 fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2fc:	b9d8      	cbnz	r0, 800c336 <_printf_float+0x432>
 800c2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c300:	f108 0201 	add.w	r2, r8, #1
 800c304:	3b01      	subs	r3, #1
 800c306:	4631      	mov	r1, r6
 800c308:	4628      	mov	r0, r5
 800c30a:	47b8      	blx	r7
 800c30c:	3001      	adds	r0, #1
 800c30e:	d10e      	bne.n	800c32e <_printf_float+0x42a>
 800c310:	e659      	b.n	800bfc6 <_printf_float+0xc2>
 800c312:	2301      	movs	r3, #1
 800c314:	4652      	mov	r2, sl
 800c316:	4631      	mov	r1, r6
 800c318:	4628      	mov	r0, r5
 800c31a:	47b8      	blx	r7
 800c31c:	3001      	adds	r0, #1
 800c31e:	f43f ae52 	beq.w	800bfc6 <_printf_float+0xc2>
 800c322:	f108 0801 	add.w	r8, r8, #1
 800c326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c328:	3b01      	subs	r3, #1
 800c32a:	4543      	cmp	r3, r8
 800c32c:	dcf1      	bgt.n	800c312 <_printf_float+0x40e>
 800c32e:	464b      	mov	r3, r9
 800c330:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c334:	e6dc      	b.n	800c0f0 <_printf_float+0x1ec>
 800c336:	f04f 0800 	mov.w	r8, #0
 800c33a:	f104 0a1a 	add.w	sl, r4, #26
 800c33e:	e7f2      	b.n	800c326 <_printf_float+0x422>
 800c340:	2301      	movs	r3, #1
 800c342:	4642      	mov	r2, r8
 800c344:	e7df      	b.n	800c306 <_printf_float+0x402>
 800c346:	2301      	movs	r3, #1
 800c348:	464a      	mov	r2, r9
 800c34a:	4631      	mov	r1, r6
 800c34c:	4628      	mov	r0, r5
 800c34e:	47b8      	blx	r7
 800c350:	3001      	adds	r0, #1
 800c352:	f43f ae38 	beq.w	800bfc6 <_printf_float+0xc2>
 800c356:	f108 0801 	add.w	r8, r8, #1
 800c35a:	68e3      	ldr	r3, [r4, #12]
 800c35c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c35e:	1a5b      	subs	r3, r3, r1
 800c360:	4543      	cmp	r3, r8
 800c362:	dcf0      	bgt.n	800c346 <_printf_float+0x442>
 800c364:	e6fa      	b.n	800c15c <_printf_float+0x258>
 800c366:	f04f 0800 	mov.w	r8, #0
 800c36a:	f104 0919 	add.w	r9, r4, #25
 800c36e:	e7f4      	b.n	800c35a <_printf_float+0x456>

0800c370 <_printf_common>:
 800c370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c374:	4616      	mov	r6, r2
 800c376:	4699      	mov	r9, r3
 800c378:	688a      	ldr	r2, [r1, #8]
 800c37a:	690b      	ldr	r3, [r1, #16]
 800c37c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c380:	4293      	cmp	r3, r2
 800c382:	bfb8      	it	lt
 800c384:	4613      	movlt	r3, r2
 800c386:	6033      	str	r3, [r6, #0]
 800c388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c38c:	4607      	mov	r7, r0
 800c38e:	460c      	mov	r4, r1
 800c390:	b10a      	cbz	r2, 800c396 <_printf_common+0x26>
 800c392:	3301      	adds	r3, #1
 800c394:	6033      	str	r3, [r6, #0]
 800c396:	6823      	ldr	r3, [r4, #0]
 800c398:	0699      	lsls	r1, r3, #26
 800c39a:	bf42      	ittt	mi
 800c39c:	6833      	ldrmi	r3, [r6, #0]
 800c39e:	3302      	addmi	r3, #2
 800c3a0:	6033      	strmi	r3, [r6, #0]
 800c3a2:	6825      	ldr	r5, [r4, #0]
 800c3a4:	f015 0506 	ands.w	r5, r5, #6
 800c3a8:	d106      	bne.n	800c3b8 <_printf_common+0x48>
 800c3aa:	f104 0a19 	add.w	sl, r4, #25
 800c3ae:	68e3      	ldr	r3, [r4, #12]
 800c3b0:	6832      	ldr	r2, [r6, #0]
 800c3b2:	1a9b      	subs	r3, r3, r2
 800c3b4:	42ab      	cmp	r3, r5
 800c3b6:	dc26      	bgt.n	800c406 <_printf_common+0x96>
 800c3b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3bc:	1e13      	subs	r3, r2, #0
 800c3be:	6822      	ldr	r2, [r4, #0]
 800c3c0:	bf18      	it	ne
 800c3c2:	2301      	movne	r3, #1
 800c3c4:	0692      	lsls	r2, r2, #26
 800c3c6:	d42b      	bmi.n	800c420 <_printf_common+0xb0>
 800c3c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3cc:	4649      	mov	r1, r9
 800c3ce:	4638      	mov	r0, r7
 800c3d0:	47c0      	blx	r8
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	d01e      	beq.n	800c414 <_printf_common+0xa4>
 800c3d6:	6823      	ldr	r3, [r4, #0]
 800c3d8:	68e5      	ldr	r5, [r4, #12]
 800c3da:	6832      	ldr	r2, [r6, #0]
 800c3dc:	f003 0306 	and.w	r3, r3, #6
 800c3e0:	2b04      	cmp	r3, #4
 800c3e2:	bf08      	it	eq
 800c3e4:	1aad      	subeq	r5, r5, r2
 800c3e6:	68a3      	ldr	r3, [r4, #8]
 800c3e8:	6922      	ldr	r2, [r4, #16]
 800c3ea:	bf0c      	ite	eq
 800c3ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3f0:	2500      	movne	r5, #0
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	bfc4      	itt	gt
 800c3f6:	1a9b      	subgt	r3, r3, r2
 800c3f8:	18ed      	addgt	r5, r5, r3
 800c3fa:	2600      	movs	r6, #0
 800c3fc:	341a      	adds	r4, #26
 800c3fe:	42b5      	cmp	r5, r6
 800c400:	d11a      	bne.n	800c438 <_printf_common+0xc8>
 800c402:	2000      	movs	r0, #0
 800c404:	e008      	b.n	800c418 <_printf_common+0xa8>
 800c406:	2301      	movs	r3, #1
 800c408:	4652      	mov	r2, sl
 800c40a:	4649      	mov	r1, r9
 800c40c:	4638      	mov	r0, r7
 800c40e:	47c0      	blx	r8
 800c410:	3001      	adds	r0, #1
 800c412:	d103      	bne.n	800c41c <_printf_common+0xac>
 800c414:	f04f 30ff 	mov.w	r0, #4294967295
 800c418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c41c:	3501      	adds	r5, #1
 800c41e:	e7c6      	b.n	800c3ae <_printf_common+0x3e>
 800c420:	18e1      	adds	r1, r4, r3
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	2030      	movs	r0, #48	; 0x30
 800c426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c42a:	4422      	add	r2, r4
 800c42c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c434:	3302      	adds	r3, #2
 800c436:	e7c7      	b.n	800c3c8 <_printf_common+0x58>
 800c438:	2301      	movs	r3, #1
 800c43a:	4622      	mov	r2, r4
 800c43c:	4649      	mov	r1, r9
 800c43e:	4638      	mov	r0, r7
 800c440:	47c0      	blx	r8
 800c442:	3001      	adds	r0, #1
 800c444:	d0e6      	beq.n	800c414 <_printf_common+0xa4>
 800c446:	3601      	adds	r6, #1
 800c448:	e7d9      	b.n	800c3fe <_printf_common+0x8e>
	...

0800c44c <_printf_i>:
 800c44c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c450:	460c      	mov	r4, r1
 800c452:	4691      	mov	r9, r2
 800c454:	7e27      	ldrb	r7, [r4, #24]
 800c456:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c458:	2f78      	cmp	r7, #120	; 0x78
 800c45a:	4680      	mov	r8, r0
 800c45c:	469a      	mov	sl, r3
 800c45e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c462:	d807      	bhi.n	800c474 <_printf_i+0x28>
 800c464:	2f62      	cmp	r7, #98	; 0x62
 800c466:	d80a      	bhi.n	800c47e <_printf_i+0x32>
 800c468:	2f00      	cmp	r7, #0
 800c46a:	f000 80d8 	beq.w	800c61e <_printf_i+0x1d2>
 800c46e:	2f58      	cmp	r7, #88	; 0x58
 800c470:	f000 80a3 	beq.w	800c5ba <_printf_i+0x16e>
 800c474:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c47c:	e03a      	b.n	800c4f4 <_printf_i+0xa8>
 800c47e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c482:	2b15      	cmp	r3, #21
 800c484:	d8f6      	bhi.n	800c474 <_printf_i+0x28>
 800c486:	a001      	add	r0, pc, #4	; (adr r0, 800c48c <_printf_i+0x40>)
 800c488:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c48c:	0800c4e5 	.word	0x0800c4e5
 800c490:	0800c4f9 	.word	0x0800c4f9
 800c494:	0800c475 	.word	0x0800c475
 800c498:	0800c475 	.word	0x0800c475
 800c49c:	0800c475 	.word	0x0800c475
 800c4a0:	0800c475 	.word	0x0800c475
 800c4a4:	0800c4f9 	.word	0x0800c4f9
 800c4a8:	0800c475 	.word	0x0800c475
 800c4ac:	0800c475 	.word	0x0800c475
 800c4b0:	0800c475 	.word	0x0800c475
 800c4b4:	0800c475 	.word	0x0800c475
 800c4b8:	0800c605 	.word	0x0800c605
 800c4bc:	0800c529 	.word	0x0800c529
 800c4c0:	0800c5e7 	.word	0x0800c5e7
 800c4c4:	0800c475 	.word	0x0800c475
 800c4c8:	0800c475 	.word	0x0800c475
 800c4cc:	0800c627 	.word	0x0800c627
 800c4d0:	0800c475 	.word	0x0800c475
 800c4d4:	0800c529 	.word	0x0800c529
 800c4d8:	0800c475 	.word	0x0800c475
 800c4dc:	0800c475 	.word	0x0800c475
 800c4e0:	0800c5ef 	.word	0x0800c5ef
 800c4e4:	680b      	ldr	r3, [r1, #0]
 800c4e6:	1d1a      	adds	r2, r3, #4
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	600a      	str	r2, [r1, #0]
 800c4ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c4f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e0a3      	b.n	800c640 <_printf_i+0x1f4>
 800c4f8:	6825      	ldr	r5, [r4, #0]
 800c4fa:	6808      	ldr	r0, [r1, #0]
 800c4fc:	062e      	lsls	r6, r5, #24
 800c4fe:	f100 0304 	add.w	r3, r0, #4
 800c502:	d50a      	bpl.n	800c51a <_printf_i+0xce>
 800c504:	6805      	ldr	r5, [r0, #0]
 800c506:	600b      	str	r3, [r1, #0]
 800c508:	2d00      	cmp	r5, #0
 800c50a:	da03      	bge.n	800c514 <_printf_i+0xc8>
 800c50c:	232d      	movs	r3, #45	; 0x2d
 800c50e:	426d      	negs	r5, r5
 800c510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c514:	485e      	ldr	r0, [pc, #376]	; (800c690 <_printf_i+0x244>)
 800c516:	230a      	movs	r3, #10
 800c518:	e019      	b.n	800c54e <_printf_i+0x102>
 800c51a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c51e:	6805      	ldr	r5, [r0, #0]
 800c520:	600b      	str	r3, [r1, #0]
 800c522:	bf18      	it	ne
 800c524:	b22d      	sxthne	r5, r5
 800c526:	e7ef      	b.n	800c508 <_printf_i+0xbc>
 800c528:	680b      	ldr	r3, [r1, #0]
 800c52a:	6825      	ldr	r5, [r4, #0]
 800c52c:	1d18      	adds	r0, r3, #4
 800c52e:	6008      	str	r0, [r1, #0]
 800c530:	0628      	lsls	r0, r5, #24
 800c532:	d501      	bpl.n	800c538 <_printf_i+0xec>
 800c534:	681d      	ldr	r5, [r3, #0]
 800c536:	e002      	b.n	800c53e <_printf_i+0xf2>
 800c538:	0669      	lsls	r1, r5, #25
 800c53a:	d5fb      	bpl.n	800c534 <_printf_i+0xe8>
 800c53c:	881d      	ldrh	r5, [r3, #0]
 800c53e:	4854      	ldr	r0, [pc, #336]	; (800c690 <_printf_i+0x244>)
 800c540:	2f6f      	cmp	r7, #111	; 0x6f
 800c542:	bf0c      	ite	eq
 800c544:	2308      	moveq	r3, #8
 800c546:	230a      	movne	r3, #10
 800c548:	2100      	movs	r1, #0
 800c54a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c54e:	6866      	ldr	r6, [r4, #4]
 800c550:	60a6      	str	r6, [r4, #8]
 800c552:	2e00      	cmp	r6, #0
 800c554:	bfa2      	ittt	ge
 800c556:	6821      	ldrge	r1, [r4, #0]
 800c558:	f021 0104 	bicge.w	r1, r1, #4
 800c55c:	6021      	strge	r1, [r4, #0]
 800c55e:	b90d      	cbnz	r5, 800c564 <_printf_i+0x118>
 800c560:	2e00      	cmp	r6, #0
 800c562:	d04d      	beq.n	800c600 <_printf_i+0x1b4>
 800c564:	4616      	mov	r6, r2
 800c566:	fbb5 f1f3 	udiv	r1, r5, r3
 800c56a:	fb03 5711 	mls	r7, r3, r1, r5
 800c56e:	5dc7      	ldrb	r7, [r0, r7]
 800c570:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c574:	462f      	mov	r7, r5
 800c576:	42bb      	cmp	r3, r7
 800c578:	460d      	mov	r5, r1
 800c57a:	d9f4      	bls.n	800c566 <_printf_i+0x11a>
 800c57c:	2b08      	cmp	r3, #8
 800c57e:	d10b      	bne.n	800c598 <_printf_i+0x14c>
 800c580:	6823      	ldr	r3, [r4, #0]
 800c582:	07df      	lsls	r7, r3, #31
 800c584:	d508      	bpl.n	800c598 <_printf_i+0x14c>
 800c586:	6923      	ldr	r3, [r4, #16]
 800c588:	6861      	ldr	r1, [r4, #4]
 800c58a:	4299      	cmp	r1, r3
 800c58c:	bfde      	ittt	le
 800c58e:	2330      	movle	r3, #48	; 0x30
 800c590:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c594:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c598:	1b92      	subs	r2, r2, r6
 800c59a:	6122      	str	r2, [r4, #16]
 800c59c:	f8cd a000 	str.w	sl, [sp]
 800c5a0:	464b      	mov	r3, r9
 800c5a2:	aa03      	add	r2, sp, #12
 800c5a4:	4621      	mov	r1, r4
 800c5a6:	4640      	mov	r0, r8
 800c5a8:	f7ff fee2 	bl	800c370 <_printf_common>
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	d14c      	bne.n	800c64a <_printf_i+0x1fe>
 800c5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b4:	b004      	add	sp, #16
 800c5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ba:	4835      	ldr	r0, [pc, #212]	; (800c690 <_printf_i+0x244>)
 800c5bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	680e      	ldr	r6, [r1, #0]
 800c5c4:	061f      	lsls	r7, r3, #24
 800c5c6:	f856 5b04 	ldr.w	r5, [r6], #4
 800c5ca:	600e      	str	r6, [r1, #0]
 800c5cc:	d514      	bpl.n	800c5f8 <_printf_i+0x1ac>
 800c5ce:	07d9      	lsls	r1, r3, #31
 800c5d0:	bf44      	itt	mi
 800c5d2:	f043 0320 	orrmi.w	r3, r3, #32
 800c5d6:	6023      	strmi	r3, [r4, #0]
 800c5d8:	b91d      	cbnz	r5, 800c5e2 <_printf_i+0x196>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	f023 0320 	bic.w	r3, r3, #32
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	2310      	movs	r3, #16
 800c5e4:	e7b0      	b.n	800c548 <_printf_i+0xfc>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	f043 0320 	orr.w	r3, r3, #32
 800c5ec:	6023      	str	r3, [r4, #0]
 800c5ee:	2378      	movs	r3, #120	; 0x78
 800c5f0:	4828      	ldr	r0, [pc, #160]	; (800c694 <_printf_i+0x248>)
 800c5f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5f6:	e7e3      	b.n	800c5c0 <_printf_i+0x174>
 800c5f8:	065e      	lsls	r6, r3, #25
 800c5fa:	bf48      	it	mi
 800c5fc:	b2ad      	uxthmi	r5, r5
 800c5fe:	e7e6      	b.n	800c5ce <_printf_i+0x182>
 800c600:	4616      	mov	r6, r2
 800c602:	e7bb      	b.n	800c57c <_printf_i+0x130>
 800c604:	680b      	ldr	r3, [r1, #0]
 800c606:	6826      	ldr	r6, [r4, #0]
 800c608:	6960      	ldr	r0, [r4, #20]
 800c60a:	1d1d      	adds	r5, r3, #4
 800c60c:	600d      	str	r5, [r1, #0]
 800c60e:	0635      	lsls	r5, r6, #24
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	d501      	bpl.n	800c618 <_printf_i+0x1cc>
 800c614:	6018      	str	r0, [r3, #0]
 800c616:	e002      	b.n	800c61e <_printf_i+0x1d2>
 800c618:	0671      	lsls	r1, r6, #25
 800c61a:	d5fb      	bpl.n	800c614 <_printf_i+0x1c8>
 800c61c:	8018      	strh	r0, [r3, #0]
 800c61e:	2300      	movs	r3, #0
 800c620:	6123      	str	r3, [r4, #16]
 800c622:	4616      	mov	r6, r2
 800c624:	e7ba      	b.n	800c59c <_printf_i+0x150>
 800c626:	680b      	ldr	r3, [r1, #0]
 800c628:	1d1a      	adds	r2, r3, #4
 800c62a:	600a      	str	r2, [r1, #0]
 800c62c:	681e      	ldr	r6, [r3, #0]
 800c62e:	6862      	ldr	r2, [r4, #4]
 800c630:	2100      	movs	r1, #0
 800c632:	4630      	mov	r0, r6
 800c634:	f7f3 fddc 	bl	80001f0 <memchr>
 800c638:	b108      	cbz	r0, 800c63e <_printf_i+0x1f2>
 800c63a:	1b80      	subs	r0, r0, r6
 800c63c:	6060      	str	r0, [r4, #4]
 800c63e:	6863      	ldr	r3, [r4, #4]
 800c640:	6123      	str	r3, [r4, #16]
 800c642:	2300      	movs	r3, #0
 800c644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c648:	e7a8      	b.n	800c59c <_printf_i+0x150>
 800c64a:	6923      	ldr	r3, [r4, #16]
 800c64c:	4632      	mov	r2, r6
 800c64e:	4649      	mov	r1, r9
 800c650:	4640      	mov	r0, r8
 800c652:	47d0      	blx	sl
 800c654:	3001      	adds	r0, #1
 800c656:	d0ab      	beq.n	800c5b0 <_printf_i+0x164>
 800c658:	6823      	ldr	r3, [r4, #0]
 800c65a:	079b      	lsls	r3, r3, #30
 800c65c:	d413      	bmi.n	800c686 <_printf_i+0x23a>
 800c65e:	68e0      	ldr	r0, [r4, #12]
 800c660:	9b03      	ldr	r3, [sp, #12]
 800c662:	4298      	cmp	r0, r3
 800c664:	bfb8      	it	lt
 800c666:	4618      	movlt	r0, r3
 800c668:	e7a4      	b.n	800c5b4 <_printf_i+0x168>
 800c66a:	2301      	movs	r3, #1
 800c66c:	4632      	mov	r2, r6
 800c66e:	4649      	mov	r1, r9
 800c670:	4640      	mov	r0, r8
 800c672:	47d0      	blx	sl
 800c674:	3001      	adds	r0, #1
 800c676:	d09b      	beq.n	800c5b0 <_printf_i+0x164>
 800c678:	3501      	adds	r5, #1
 800c67a:	68e3      	ldr	r3, [r4, #12]
 800c67c:	9903      	ldr	r1, [sp, #12]
 800c67e:	1a5b      	subs	r3, r3, r1
 800c680:	42ab      	cmp	r3, r5
 800c682:	dcf2      	bgt.n	800c66a <_printf_i+0x21e>
 800c684:	e7eb      	b.n	800c65e <_printf_i+0x212>
 800c686:	2500      	movs	r5, #0
 800c688:	f104 0619 	add.w	r6, r4, #25
 800c68c:	e7f5      	b.n	800c67a <_printf_i+0x22e>
 800c68e:	bf00      	nop
 800c690:	080107a2 	.word	0x080107a2
 800c694:	080107b3 	.word	0x080107b3

0800c698 <_scanf_float>:
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	b087      	sub	sp, #28
 800c69e:	4617      	mov	r7, r2
 800c6a0:	9303      	str	r3, [sp, #12]
 800c6a2:	688b      	ldr	r3, [r1, #8]
 800c6a4:	1e5a      	subs	r2, r3, #1
 800c6a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c6aa:	bf83      	ittte	hi
 800c6ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c6b0:	195b      	addhi	r3, r3, r5
 800c6b2:	9302      	strhi	r3, [sp, #8]
 800c6b4:	2300      	movls	r3, #0
 800c6b6:	bf86      	itte	hi
 800c6b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c6bc:	608b      	strhi	r3, [r1, #8]
 800c6be:	9302      	strls	r3, [sp, #8]
 800c6c0:	680b      	ldr	r3, [r1, #0]
 800c6c2:	468b      	mov	fp, r1
 800c6c4:	2500      	movs	r5, #0
 800c6c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c6ca:	f84b 3b1c 	str.w	r3, [fp], #28
 800c6ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c6d2:	4680      	mov	r8, r0
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	465e      	mov	r6, fp
 800c6d8:	46aa      	mov	sl, r5
 800c6da:	46a9      	mov	r9, r5
 800c6dc:	9501      	str	r5, [sp, #4]
 800c6de:	68a2      	ldr	r2, [r4, #8]
 800c6e0:	b152      	cbz	r2, 800c6f8 <_scanf_float+0x60>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b4e      	cmp	r3, #78	; 0x4e
 800c6e8:	d864      	bhi.n	800c7b4 <_scanf_float+0x11c>
 800c6ea:	2b40      	cmp	r3, #64	; 0x40
 800c6ec:	d83c      	bhi.n	800c768 <_scanf_float+0xd0>
 800c6ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c6f2:	b2c8      	uxtb	r0, r1
 800c6f4:	280e      	cmp	r0, #14
 800c6f6:	d93a      	bls.n	800c76e <_scanf_float+0xd6>
 800c6f8:	f1b9 0f00 	cmp.w	r9, #0
 800c6fc:	d003      	beq.n	800c706 <_scanf_float+0x6e>
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c704:	6023      	str	r3, [r4, #0]
 800c706:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c70a:	f1ba 0f01 	cmp.w	sl, #1
 800c70e:	f200 8113 	bhi.w	800c938 <_scanf_float+0x2a0>
 800c712:	455e      	cmp	r6, fp
 800c714:	f200 8105 	bhi.w	800c922 <_scanf_float+0x28a>
 800c718:	2501      	movs	r5, #1
 800c71a:	4628      	mov	r0, r5
 800c71c:	b007      	add	sp, #28
 800c71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c722:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c726:	2a0d      	cmp	r2, #13
 800c728:	d8e6      	bhi.n	800c6f8 <_scanf_float+0x60>
 800c72a:	a101      	add	r1, pc, #4	; (adr r1, 800c730 <_scanf_float+0x98>)
 800c72c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c730:	0800c86f 	.word	0x0800c86f
 800c734:	0800c6f9 	.word	0x0800c6f9
 800c738:	0800c6f9 	.word	0x0800c6f9
 800c73c:	0800c6f9 	.word	0x0800c6f9
 800c740:	0800c8cf 	.word	0x0800c8cf
 800c744:	0800c8a7 	.word	0x0800c8a7
 800c748:	0800c6f9 	.word	0x0800c6f9
 800c74c:	0800c6f9 	.word	0x0800c6f9
 800c750:	0800c87d 	.word	0x0800c87d
 800c754:	0800c6f9 	.word	0x0800c6f9
 800c758:	0800c6f9 	.word	0x0800c6f9
 800c75c:	0800c6f9 	.word	0x0800c6f9
 800c760:	0800c6f9 	.word	0x0800c6f9
 800c764:	0800c835 	.word	0x0800c835
 800c768:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c76c:	e7db      	b.n	800c726 <_scanf_float+0x8e>
 800c76e:	290e      	cmp	r1, #14
 800c770:	d8c2      	bhi.n	800c6f8 <_scanf_float+0x60>
 800c772:	a001      	add	r0, pc, #4	; (adr r0, 800c778 <_scanf_float+0xe0>)
 800c774:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c778:	0800c827 	.word	0x0800c827
 800c77c:	0800c6f9 	.word	0x0800c6f9
 800c780:	0800c827 	.word	0x0800c827
 800c784:	0800c8bb 	.word	0x0800c8bb
 800c788:	0800c6f9 	.word	0x0800c6f9
 800c78c:	0800c7d5 	.word	0x0800c7d5
 800c790:	0800c811 	.word	0x0800c811
 800c794:	0800c811 	.word	0x0800c811
 800c798:	0800c811 	.word	0x0800c811
 800c79c:	0800c811 	.word	0x0800c811
 800c7a0:	0800c811 	.word	0x0800c811
 800c7a4:	0800c811 	.word	0x0800c811
 800c7a8:	0800c811 	.word	0x0800c811
 800c7ac:	0800c811 	.word	0x0800c811
 800c7b0:	0800c811 	.word	0x0800c811
 800c7b4:	2b6e      	cmp	r3, #110	; 0x6e
 800c7b6:	d809      	bhi.n	800c7cc <_scanf_float+0x134>
 800c7b8:	2b60      	cmp	r3, #96	; 0x60
 800c7ba:	d8b2      	bhi.n	800c722 <_scanf_float+0x8a>
 800c7bc:	2b54      	cmp	r3, #84	; 0x54
 800c7be:	d077      	beq.n	800c8b0 <_scanf_float+0x218>
 800c7c0:	2b59      	cmp	r3, #89	; 0x59
 800c7c2:	d199      	bne.n	800c6f8 <_scanf_float+0x60>
 800c7c4:	2d07      	cmp	r5, #7
 800c7c6:	d197      	bne.n	800c6f8 <_scanf_float+0x60>
 800c7c8:	2508      	movs	r5, #8
 800c7ca:	e029      	b.n	800c820 <_scanf_float+0x188>
 800c7cc:	2b74      	cmp	r3, #116	; 0x74
 800c7ce:	d06f      	beq.n	800c8b0 <_scanf_float+0x218>
 800c7d0:	2b79      	cmp	r3, #121	; 0x79
 800c7d2:	e7f6      	b.n	800c7c2 <_scanf_float+0x12a>
 800c7d4:	6821      	ldr	r1, [r4, #0]
 800c7d6:	05c8      	lsls	r0, r1, #23
 800c7d8:	d51a      	bpl.n	800c810 <_scanf_float+0x178>
 800c7da:	9b02      	ldr	r3, [sp, #8]
 800c7dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c7e0:	6021      	str	r1, [r4, #0]
 800c7e2:	f109 0901 	add.w	r9, r9, #1
 800c7e6:	b11b      	cbz	r3, 800c7f0 <_scanf_float+0x158>
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	3201      	adds	r2, #1
 800c7ec:	9302      	str	r3, [sp, #8]
 800c7ee:	60a2      	str	r2, [r4, #8]
 800c7f0:	68a3      	ldr	r3, [r4, #8]
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	60a3      	str	r3, [r4, #8]
 800c7f6:	6923      	ldr	r3, [r4, #16]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	6123      	str	r3, [r4, #16]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3b01      	subs	r3, #1
 800c800:	2b00      	cmp	r3, #0
 800c802:	607b      	str	r3, [r7, #4]
 800c804:	f340 8084 	ble.w	800c910 <_scanf_float+0x278>
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	3301      	adds	r3, #1
 800c80c:	603b      	str	r3, [r7, #0]
 800c80e:	e766      	b.n	800c6de <_scanf_float+0x46>
 800c810:	eb1a 0f05 	cmn.w	sl, r5
 800c814:	f47f af70 	bne.w	800c6f8 <_scanf_float+0x60>
 800c818:	6822      	ldr	r2, [r4, #0]
 800c81a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c81e:	6022      	str	r2, [r4, #0]
 800c820:	f806 3b01 	strb.w	r3, [r6], #1
 800c824:	e7e4      	b.n	800c7f0 <_scanf_float+0x158>
 800c826:	6822      	ldr	r2, [r4, #0]
 800c828:	0610      	lsls	r0, r2, #24
 800c82a:	f57f af65 	bpl.w	800c6f8 <_scanf_float+0x60>
 800c82e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c832:	e7f4      	b.n	800c81e <_scanf_float+0x186>
 800c834:	f1ba 0f00 	cmp.w	sl, #0
 800c838:	d10e      	bne.n	800c858 <_scanf_float+0x1c0>
 800c83a:	f1b9 0f00 	cmp.w	r9, #0
 800c83e:	d10e      	bne.n	800c85e <_scanf_float+0x1c6>
 800c840:	6822      	ldr	r2, [r4, #0]
 800c842:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c846:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c84a:	d108      	bne.n	800c85e <_scanf_float+0x1c6>
 800c84c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c850:	6022      	str	r2, [r4, #0]
 800c852:	f04f 0a01 	mov.w	sl, #1
 800c856:	e7e3      	b.n	800c820 <_scanf_float+0x188>
 800c858:	f1ba 0f02 	cmp.w	sl, #2
 800c85c:	d055      	beq.n	800c90a <_scanf_float+0x272>
 800c85e:	2d01      	cmp	r5, #1
 800c860:	d002      	beq.n	800c868 <_scanf_float+0x1d0>
 800c862:	2d04      	cmp	r5, #4
 800c864:	f47f af48 	bne.w	800c6f8 <_scanf_float+0x60>
 800c868:	3501      	adds	r5, #1
 800c86a:	b2ed      	uxtb	r5, r5
 800c86c:	e7d8      	b.n	800c820 <_scanf_float+0x188>
 800c86e:	f1ba 0f01 	cmp.w	sl, #1
 800c872:	f47f af41 	bne.w	800c6f8 <_scanf_float+0x60>
 800c876:	f04f 0a02 	mov.w	sl, #2
 800c87a:	e7d1      	b.n	800c820 <_scanf_float+0x188>
 800c87c:	b97d      	cbnz	r5, 800c89e <_scanf_float+0x206>
 800c87e:	f1b9 0f00 	cmp.w	r9, #0
 800c882:	f47f af3c 	bne.w	800c6fe <_scanf_float+0x66>
 800c886:	6822      	ldr	r2, [r4, #0]
 800c888:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c88c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c890:	f47f af39 	bne.w	800c706 <_scanf_float+0x6e>
 800c894:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c898:	6022      	str	r2, [r4, #0]
 800c89a:	2501      	movs	r5, #1
 800c89c:	e7c0      	b.n	800c820 <_scanf_float+0x188>
 800c89e:	2d03      	cmp	r5, #3
 800c8a0:	d0e2      	beq.n	800c868 <_scanf_float+0x1d0>
 800c8a2:	2d05      	cmp	r5, #5
 800c8a4:	e7de      	b.n	800c864 <_scanf_float+0x1cc>
 800c8a6:	2d02      	cmp	r5, #2
 800c8a8:	f47f af26 	bne.w	800c6f8 <_scanf_float+0x60>
 800c8ac:	2503      	movs	r5, #3
 800c8ae:	e7b7      	b.n	800c820 <_scanf_float+0x188>
 800c8b0:	2d06      	cmp	r5, #6
 800c8b2:	f47f af21 	bne.w	800c6f8 <_scanf_float+0x60>
 800c8b6:	2507      	movs	r5, #7
 800c8b8:	e7b2      	b.n	800c820 <_scanf_float+0x188>
 800c8ba:	6822      	ldr	r2, [r4, #0]
 800c8bc:	0591      	lsls	r1, r2, #22
 800c8be:	f57f af1b 	bpl.w	800c6f8 <_scanf_float+0x60>
 800c8c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c8c6:	6022      	str	r2, [r4, #0]
 800c8c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800c8cc:	e7a8      	b.n	800c820 <_scanf_float+0x188>
 800c8ce:	6822      	ldr	r2, [r4, #0]
 800c8d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c8d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c8d8:	d006      	beq.n	800c8e8 <_scanf_float+0x250>
 800c8da:	0550      	lsls	r0, r2, #21
 800c8dc:	f57f af0c 	bpl.w	800c6f8 <_scanf_float+0x60>
 800c8e0:	f1b9 0f00 	cmp.w	r9, #0
 800c8e4:	f43f af0f 	beq.w	800c706 <_scanf_float+0x6e>
 800c8e8:	0591      	lsls	r1, r2, #22
 800c8ea:	bf58      	it	pl
 800c8ec:	9901      	ldrpl	r1, [sp, #4]
 800c8ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8f2:	bf58      	it	pl
 800c8f4:	eba9 0101 	subpl.w	r1, r9, r1
 800c8f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c8fc:	bf58      	it	pl
 800c8fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c902:	6022      	str	r2, [r4, #0]
 800c904:	f04f 0900 	mov.w	r9, #0
 800c908:	e78a      	b.n	800c820 <_scanf_float+0x188>
 800c90a:	f04f 0a03 	mov.w	sl, #3
 800c90e:	e787      	b.n	800c820 <_scanf_float+0x188>
 800c910:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c914:	4639      	mov	r1, r7
 800c916:	4640      	mov	r0, r8
 800c918:	4798      	blx	r3
 800c91a:	2800      	cmp	r0, #0
 800c91c:	f43f aedf 	beq.w	800c6de <_scanf_float+0x46>
 800c920:	e6ea      	b.n	800c6f8 <_scanf_float+0x60>
 800c922:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c926:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c92a:	463a      	mov	r2, r7
 800c92c:	4640      	mov	r0, r8
 800c92e:	4798      	blx	r3
 800c930:	6923      	ldr	r3, [r4, #16]
 800c932:	3b01      	subs	r3, #1
 800c934:	6123      	str	r3, [r4, #16]
 800c936:	e6ec      	b.n	800c712 <_scanf_float+0x7a>
 800c938:	1e6b      	subs	r3, r5, #1
 800c93a:	2b06      	cmp	r3, #6
 800c93c:	d825      	bhi.n	800c98a <_scanf_float+0x2f2>
 800c93e:	2d02      	cmp	r5, #2
 800c940:	d836      	bhi.n	800c9b0 <_scanf_float+0x318>
 800c942:	455e      	cmp	r6, fp
 800c944:	f67f aee8 	bls.w	800c718 <_scanf_float+0x80>
 800c948:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c94c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c950:	463a      	mov	r2, r7
 800c952:	4640      	mov	r0, r8
 800c954:	4798      	blx	r3
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	3b01      	subs	r3, #1
 800c95a:	6123      	str	r3, [r4, #16]
 800c95c:	e7f1      	b.n	800c942 <_scanf_float+0x2aa>
 800c95e:	9802      	ldr	r0, [sp, #8]
 800c960:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c964:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c968:	9002      	str	r0, [sp, #8]
 800c96a:	463a      	mov	r2, r7
 800c96c:	4640      	mov	r0, r8
 800c96e:	4798      	blx	r3
 800c970:	6923      	ldr	r3, [r4, #16]
 800c972:	3b01      	subs	r3, #1
 800c974:	6123      	str	r3, [r4, #16]
 800c976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c97a:	fa5f fa8a 	uxtb.w	sl, sl
 800c97e:	f1ba 0f02 	cmp.w	sl, #2
 800c982:	d1ec      	bne.n	800c95e <_scanf_float+0x2c6>
 800c984:	3d03      	subs	r5, #3
 800c986:	b2ed      	uxtb	r5, r5
 800c988:	1b76      	subs	r6, r6, r5
 800c98a:	6823      	ldr	r3, [r4, #0]
 800c98c:	05da      	lsls	r2, r3, #23
 800c98e:	d52f      	bpl.n	800c9f0 <_scanf_float+0x358>
 800c990:	055b      	lsls	r3, r3, #21
 800c992:	d510      	bpl.n	800c9b6 <_scanf_float+0x31e>
 800c994:	455e      	cmp	r6, fp
 800c996:	f67f aebf 	bls.w	800c718 <_scanf_float+0x80>
 800c99a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c99e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9a2:	463a      	mov	r2, r7
 800c9a4:	4640      	mov	r0, r8
 800c9a6:	4798      	blx	r3
 800c9a8:	6923      	ldr	r3, [r4, #16]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	6123      	str	r3, [r4, #16]
 800c9ae:	e7f1      	b.n	800c994 <_scanf_float+0x2fc>
 800c9b0:	46aa      	mov	sl, r5
 800c9b2:	9602      	str	r6, [sp, #8]
 800c9b4:	e7df      	b.n	800c976 <_scanf_float+0x2de>
 800c9b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c9ba:	6923      	ldr	r3, [r4, #16]
 800c9bc:	2965      	cmp	r1, #101	; 0x65
 800c9be:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9c2:	f106 35ff 	add.w	r5, r6, #4294967295
 800c9c6:	6123      	str	r3, [r4, #16]
 800c9c8:	d00c      	beq.n	800c9e4 <_scanf_float+0x34c>
 800c9ca:	2945      	cmp	r1, #69	; 0x45
 800c9cc:	d00a      	beq.n	800c9e4 <_scanf_float+0x34c>
 800c9ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9d2:	463a      	mov	r2, r7
 800c9d4:	4640      	mov	r0, r8
 800c9d6:	4798      	blx	r3
 800c9d8:	6923      	ldr	r3, [r4, #16]
 800c9da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	1eb5      	subs	r5, r6, #2
 800c9e2:	6123      	str	r3, [r4, #16]
 800c9e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9e8:	463a      	mov	r2, r7
 800c9ea:	4640      	mov	r0, r8
 800c9ec:	4798      	blx	r3
 800c9ee:	462e      	mov	r6, r5
 800c9f0:	6825      	ldr	r5, [r4, #0]
 800c9f2:	f015 0510 	ands.w	r5, r5, #16
 800c9f6:	d158      	bne.n	800caaa <_scanf_float+0x412>
 800c9f8:	7035      	strb	r5, [r6, #0]
 800c9fa:	6823      	ldr	r3, [r4, #0]
 800c9fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca04:	d11c      	bne.n	800ca40 <_scanf_float+0x3a8>
 800ca06:	9b01      	ldr	r3, [sp, #4]
 800ca08:	454b      	cmp	r3, r9
 800ca0a:	eba3 0209 	sub.w	r2, r3, r9
 800ca0e:	d124      	bne.n	800ca5a <_scanf_float+0x3c2>
 800ca10:	2200      	movs	r2, #0
 800ca12:	4659      	mov	r1, fp
 800ca14:	4640      	mov	r0, r8
 800ca16:	f000 fead 	bl	800d774 <_strtod_r>
 800ca1a:	9b03      	ldr	r3, [sp, #12]
 800ca1c:	6821      	ldr	r1, [r4, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f011 0f02 	tst.w	r1, #2
 800ca24:	ec57 6b10 	vmov	r6, r7, d0
 800ca28:	f103 0204 	add.w	r2, r3, #4
 800ca2c:	d020      	beq.n	800ca70 <_scanf_float+0x3d8>
 800ca2e:	9903      	ldr	r1, [sp, #12]
 800ca30:	600a      	str	r2, [r1, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	e9c3 6700 	strd	r6, r7, [r3]
 800ca38:	68e3      	ldr	r3, [r4, #12]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	60e3      	str	r3, [r4, #12]
 800ca3e:	e66c      	b.n	800c71a <_scanf_float+0x82>
 800ca40:	9b04      	ldr	r3, [sp, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d0e4      	beq.n	800ca10 <_scanf_float+0x378>
 800ca46:	9905      	ldr	r1, [sp, #20]
 800ca48:	230a      	movs	r3, #10
 800ca4a:	462a      	mov	r2, r5
 800ca4c:	3101      	adds	r1, #1
 800ca4e:	4640      	mov	r0, r8
 800ca50:	f000 ff1a 	bl	800d888 <_strtol_r>
 800ca54:	9b04      	ldr	r3, [sp, #16]
 800ca56:	9e05      	ldr	r6, [sp, #20]
 800ca58:	1ac2      	subs	r2, r0, r3
 800ca5a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ca5e:	429e      	cmp	r6, r3
 800ca60:	bf28      	it	cs
 800ca62:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ca66:	4912      	ldr	r1, [pc, #72]	; (800cab0 <_scanf_float+0x418>)
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f000 f83b 	bl	800cae4 <siprintf>
 800ca6e:	e7cf      	b.n	800ca10 <_scanf_float+0x378>
 800ca70:	f011 0f04 	tst.w	r1, #4
 800ca74:	9903      	ldr	r1, [sp, #12]
 800ca76:	600a      	str	r2, [r1, #0]
 800ca78:	d1db      	bne.n	800ca32 <_scanf_float+0x39a>
 800ca7a:	f8d3 8000 	ldr.w	r8, [r3]
 800ca7e:	ee10 2a10 	vmov	r2, s0
 800ca82:	ee10 0a10 	vmov	r0, s0
 800ca86:	463b      	mov	r3, r7
 800ca88:	4639      	mov	r1, r7
 800ca8a:	f7f4 f857 	bl	8000b3c <__aeabi_dcmpun>
 800ca8e:	b128      	cbz	r0, 800ca9c <_scanf_float+0x404>
 800ca90:	4808      	ldr	r0, [pc, #32]	; (800cab4 <_scanf_float+0x41c>)
 800ca92:	f000 f821 	bl	800cad8 <nanf>
 800ca96:	ed88 0a00 	vstr	s0, [r8]
 800ca9a:	e7cd      	b.n	800ca38 <_scanf_float+0x3a0>
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	4639      	mov	r1, r7
 800caa0:	f7f4 f8aa 	bl	8000bf8 <__aeabi_d2f>
 800caa4:	f8c8 0000 	str.w	r0, [r8]
 800caa8:	e7c6      	b.n	800ca38 <_scanf_float+0x3a0>
 800caaa:	2500      	movs	r5, #0
 800caac:	e635      	b.n	800c71a <_scanf_float+0x82>
 800caae:	bf00      	nop
 800cab0:	080107c4 	.word	0x080107c4
 800cab4:	08010be0 	.word	0x08010be0

0800cab8 <_sbrk_r>:
 800cab8:	b538      	push	{r3, r4, r5, lr}
 800caba:	4d06      	ldr	r5, [pc, #24]	; (800cad4 <_sbrk_r+0x1c>)
 800cabc:	2300      	movs	r3, #0
 800cabe:	4604      	mov	r4, r0
 800cac0:	4608      	mov	r0, r1
 800cac2:	602b      	str	r3, [r5, #0]
 800cac4:	f7f4 ff6e 	bl	80019a4 <_sbrk>
 800cac8:	1c43      	adds	r3, r0, #1
 800caca:	d102      	bne.n	800cad2 <_sbrk_r+0x1a>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	b103      	cbz	r3, 800cad2 <_sbrk_r+0x1a>
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	bd38      	pop	{r3, r4, r5, pc}
 800cad4:	20000b04 	.word	0x20000b04

0800cad8 <nanf>:
 800cad8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cae0 <nanf+0x8>
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	7fc00000 	.word	0x7fc00000

0800cae4 <siprintf>:
 800cae4:	b40e      	push	{r1, r2, r3}
 800cae6:	b500      	push	{lr}
 800cae8:	b09c      	sub	sp, #112	; 0x70
 800caea:	ab1d      	add	r3, sp, #116	; 0x74
 800caec:	9002      	str	r0, [sp, #8]
 800caee:	9006      	str	r0, [sp, #24]
 800caf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800caf4:	4809      	ldr	r0, [pc, #36]	; (800cb1c <siprintf+0x38>)
 800caf6:	9107      	str	r1, [sp, #28]
 800caf8:	9104      	str	r1, [sp, #16]
 800cafa:	4909      	ldr	r1, [pc, #36]	; (800cb20 <siprintf+0x3c>)
 800cafc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb00:	9105      	str	r1, [sp, #20]
 800cb02:	6800      	ldr	r0, [r0, #0]
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	a902      	add	r1, sp, #8
 800cb08:	f002 fe00 	bl	800f70c <_svfiprintf_r>
 800cb0c:	9b02      	ldr	r3, [sp, #8]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	701a      	strb	r2, [r3, #0]
 800cb12:	b01c      	add	sp, #112	; 0x70
 800cb14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb18:	b003      	add	sp, #12
 800cb1a:	4770      	bx	lr
 800cb1c:	2000002c 	.word	0x2000002c
 800cb20:	ffff0208 	.word	0xffff0208

0800cb24 <sulp>:
 800cb24:	b570      	push	{r4, r5, r6, lr}
 800cb26:	4604      	mov	r4, r0
 800cb28:	460d      	mov	r5, r1
 800cb2a:	ec45 4b10 	vmov	d0, r4, r5
 800cb2e:	4616      	mov	r6, r2
 800cb30:	f002 fc32 	bl	800f398 <__ulp>
 800cb34:	ec51 0b10 	vmov	r0, r1, d0
 800cb38:	b17e      	cbz	r6, 800cb5a <sulp+0x36>
 800cb3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cb3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	dd09      	ble.n	800cb5a <sulp+0x36>
 800cb46:	051b      	lsls	r3, r3, #20
 800cb48:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cb4c:	2400      	movs	r4, #0
 800cb4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cb52:	4622      	mov	r2, r4
 800cb54:	462b      	mov	r3, r5
 800cb56:	f7f3 fd57 	bl	8000608 <__aeabi_dmul>
 800cb5a:	bd70      	pop	{r4, r5, r6, pc}
 800cb5c:	0000      	movs	r0, r0
	...

0800cb60 <_strtod_l>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	b0a3      	sub	sp, #140	; 0x8c
 800cb66:	461f      	mov	r7, r3
 800cb68:	2300      	movs	r3, #0
 800cb6a:	931e      	str	r3, [sp, #120]	; 0x78
 800cb6c:	4ba4      	ldr	r3, [pc, #656]	; (800ce00 <_strtod_l+0x2a0>)
 800cb6e:	9219      	str	r2, [sp, #100]	; 0x64
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	9307      	str	r3, [sp, #28]
 800cb74:	4604      	mov	r4, r0
 800cb76:	4618      	mov	r0, r3
 800cb78:	4688      	mov	r8, r1
 800cb7a:	f7f3 fb31 	bl	80001e0 <strlen>
 800cb7e:	f04f 0a00 	mov.w	sl, #0
 800cb82:	4605      	mov	r5, r0
 800cb84:	f04f 0b00 	mov.w	fp, #0
 800cb88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cb8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb8e:	781a      	ldrb	r2, [r3, #0]
 800cb90:	2a2b      	cmp	r2, #43	; 0x2b
 800cb92:	d04c      	beq.n	800cc2e <_strtod_l+0xce>
 800cb94:	d839      	bhi.n	800cc0a <_strtod_l+0xaa>
 800cb96:	2a0d      	cmp	r2, #13
 800cb98:	d832      	bhi.n	800cc00 <_strtod_l+0xa0>
 800cb9a:	2a08      	cmp	r2, #8
 800cb9c:	d832      	bhi.n	800cc04 <_strtod_l+0xa4>
 800cb9e:	2a00      	cmp	r2, #0
 800cba0:	d03c      	beq.n	800cc1c <_strtod_l+0xbc>
 800cba2:	2300      	movs	r3, #0
 800cba4:	930e      	str	r3, [sp, #56]	; 0x38
 800cba6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cba8:	7833      	ldrb	r3, [r6, #0]
 800cbaa:	2b30      	cmp	r3, #48	; 0x30
 800cbac:	f040 80b4 	bne.w	800cd18 <_strtod_l+0x1b8>
 800cbb0:	7873      	ldrb	r3, [r6, #1]
 800cbb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cbb6:	2b58      	cmp	r3, #88	; 0x58
 800cbb8:	d16c      	bne.n	800cc94 <_strtod_l+0x134>
 800cbba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	ab1e      	add	r3, sp, #120	; 0x78
 800cbc0:	9702      	str	r7, [sp, #8]
 800cbc2:	9300      	str	r3, [sp, #0]
 800cbc4:	4a8f      	ldr	r2, [pc, #572]	; (800ce04 <_strtod_l+0x2a4>)
 800cbc6:	ab1f      	add	r3, sp, #124	; 0x7c
 800cbc8:	a91d      	add	r1, sp, #116	; 0x74
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f001 fd40 	bl	800e650 <__gethex>
 800cbd0:	f010 0707 	ands.w	r7, r0, #7
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	d005      	beq.n	800cbe4 <_strtod_l+0x84>
 800cbd8:	2f06      	cmp	r7, #6
 800cbda:	d12a      	bne.n	800cc32 <_strtod_l+0xd2>
 800cbdc:	3601      	adds	r6, #1
 800cbde:	2300      	movs	r3, #0
 800cbe0:	961d      	str	r6, [sp, #116]	; 0x74
 800cbe2:	930e      	str	r3, [sp, #56]	; 0x38
 800cbe4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f040 8596 	bne.w	800d718 <_strtod_l+0xbb8>
 800cbec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbee:	b1db      	cbz	r3, 800cc28 <_strtod_l+0xc8>
 800cbf0:	4652      	mov	r2, sl
 800cbf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cbf6:	ec43 2b10 	vmov	d0, r2, r3
 800cbfa:	b023      	add	sp, #140	; 0x8c
 800cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc00:	2a20      	cmp	r2, #32
 800cc02:	d1ce      	bne.n	800cba2 <_strtod_l+0x42>
 800cc04:	3301      	adds	r3, #1
 800cc06:	931d      	str	r3, [sp, #116]	; 0x74
 800cc08:	e7c0      	b.n	800cb8c <_strtod_l+0x2c>
 800cc0a:	2a2d      	cmp	r2, #45	; 0x2d
 800cc0c:	d1c9      	bne.n	800cba2 <_strtod_l+0x42>
 800cc0e:	2201      	movs	r2, #1
 800cc10:	920e      	str	r2, [sp, #56]	; 0x38
 800cc12:	1c5a      	adds	r2, r3, #1
 800cc14:	921d      	str	r2, [sp, #116]	; 0x74
 800cc16:	785b      	ldrb	r3, [r3, #1]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d1c4      	bne.n	800cba6 <_strtod_l+0x46>
 800cc1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc1e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f040 8576 	bne.w	800d714 <_strtod_l+0xbb4>
 800cc28:	4652      	mov	r2, sl
 800cc2a:	465b      	mov	r3, fp
 800cc2c:	e7e3      	b.n	800cbf6 <_strtod_l+0x96>
 800cc2e:	2200      	movs	r2, #0
 800cc30:	e7ee      	b.n	800cc10 <_strtod_l+0xb0>
 800cc32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cc34:	b13a      	cbz	r2, 800cc46 <_strtod_l+0xe6>
 800cc36:	2135      	movs	r1, #53	; 0x35
 800cc38:	a820      	add	r0, sp, #128	; 0x80
 800cc3a:	f002 fcb8 	bl	800f5ae <__copybits>
 800cc3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cc40:	4620      	mov	r0, r4
 800cc42:	f002 f87d 	bl	800ed40 <_Bfree>
 800cc46:	3f01      	subs	r7, #1
 800cc48:	2f05      	cmp	r7, #5
 800cc4a:	d807      	bhi.n	800cc5c <_strtod_l+0xfc>
 800cc4c:	e8df f007 	tbb	[pc, r7]
 800cc50:	1d180b0e 	.word	0x1d180b0e
 800cc54:	030e      	.short	0x030e
 800cc56:	f04f 0b00 	mov.w	fp, #0
 800cc5a:	46da      	mov	sl, fp
 800cc5c:	0728      	lsls	r0, r5, #28
 800cc5e:	d5c1      	bpl.n	800cbe4 <_strtod_l+0x84>
 800cc60:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cc64:	e7be      	b.n	800cbe4 <_strtod_l+0x84>
 800cc66:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800cc6a:	e7f7      	b.n	800cc5c <_strtod_l+0xfc>
 800cc6c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800cc70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cc72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cc76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cc7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cc7e:	e7ed      	b.n	800cc5c <_strtod_l+0xfc>
 800cc80:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ce08 <_strtod_l+0x2a8>
 800cc84:	f04f 0a00 	mov.w	sl, #0
 800cc88:	e7e8      	b.n	800cc5c <_strtod_l+0xfc>
 800cc8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cc8e:	f04f 3aff 	mov.w	sl, #4294967295
 800cc92:	e7e3      	b.n	800cc5c <_strtod_l+0xfc>
 800cc94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	921d      	str	r2, [sp, #116]	; 0x74
 800cc9a:	785b      	ldrb	r3, [r3, #1]
 800cc9c:	2b30      	cmp	r3, #48	; 0x30
 800cc9e:	d0f9      	beq.n	800cc94 <_strtod_l+0x134>
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d09f      	beq.n	800cbe4 <_strtod_l+0x84>
 800cca4:	2301      	movs	r3, #1
 800cca6:	f04f 0900 	mov.w	r9, #0
 800ccaa:	9304      	str	r3, [sp, #16]
 800ccac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ccae:	930a      	str	r3, [sp, #40]	; 0x28
 800ccb0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ccb4:	464f      	mov	r7, r9
 800ccb6:	220a      	movs	r2, #10
 800ccb8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ccba:	7806      	ldrb	r6, [r0, #0]
 800ccbc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ccc0:	b2d9      	uxtb	r1, r3
 800ccc2:	2909      	cmp	r1, #9
 800ccc4:	d92a      	bls.n	800cd1c <_strtod_l+0x1bc>
 800ccc6:	9907      	ldr	r1, [sp, #28]
 800ccc8:	462a      	mov	r2, r5
 800ccca:	f002 fe29 	bl	800f920 <strncmp>
 800ccce:	b398      	cbz	r0, 800cd38 <_strtod_l+0x1d8>
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	4633      	mov	r3, r6
 800ccd4:	463d      	mov	r5, r7
 800ccd6:	9007      	str	r0, [sp, #28]
 800ccd8:	4602      	mov	r2, r0
 800ccda:	2b65      	cmp	r3, #101	; 0x65
 800ccdc:	d001      	beq.n	800cce2 <_strtod_l+0x182>
 800ccde:	2b45      	cmp	r3, #69	; 0x45
 800cce0:	d118      	bne.n	800cd14 <_strtod_l+0x1b4>
 800cce2:	b91d      	cbnz	r5, 800ccec <_strtod_l+0x18c>
 800cce4:	9b04      	ldr	r3, [sp, #16]
 800cce6:	4303      	orrs	r3, r0
 800cce8:	d098      	beq.n	800cc1c <_strtod_l+0xbc>
 800ccea:	2500      	movs	r5, #0
 800ccec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ccf0:	f108 0301 	add.w	r3, r8, #1
 800ccf4:	931d      	str	r3, [sp, #116]	; 0x74
 800ccf6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ccfa:	2b2b      	cmp	r3, #43	; 0x2b
 800ccfc:	d075      	beq.n	800cdea <_strtod_l+0x28a>
 800ccfe:	2b2d      	cmp	r3, #45	; 0x2d
 800cd00:	d07b      	beq.n	800cdfa <_strtod_l+0x29a>
 800cd02:	f04f 0c00 	mov.w	ip, #0
 800cd06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cd0a:	2909      	cmp	r1, #9
 800cd0c:	f240 8082 	bls.w	800ce14 <_strtod_l+0x2b4>
 800cd10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cd14:	2600      	movs	r6, #0
 800cd16:	e09d      	b.n	800ce54 <_strtod_l+0x2f4>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	e7c4      	b.n	800cca6 <_strtod_l+0x146>
 800cd1c:	2f08      	cmp	r7, #8
 800cd1e:	bfd8      	it	le
 800cd20:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cd22:	f100 0001 	add.w	r0, r0, #1
 800cd26:	bfda      	itte	le
 800cd28:	fb02 3301 	mlale	r3, r2, r1, r3
 800cd2c:	9309      	strle	r3, [sp, #36]	; 0x24
 800cd2e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cd32:	3701      	adds	r7, #1
 800cd34:	901d      	str	r0, [sp, #116]	; 0x74
 800cd36:	e7bf      	b.n	800ccb8 <_strtod_l+0x158>
 800cd38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd3a:	195a      	adds	r2, r3, r5
 800cd3c:	921d      	str	r2, [sp, #116]	; 0x74
 800cd3e:	5d5b      	ldrb	r3, [r3, r5]
 800cd40:	2f00      	cmp	r7, #0
 800cd42:	d037      	beq.n	800cdb4 <_strtod_l+0x254>
 800cd44:	9007      	str	r0, [sp, #28]
 800cd46:	463d      	mov	r5, r7
 800cd48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800cd4c:	2a09      	cmp	r2, #9
 800cd4e:	d912      	bls.n	800cd76 <_strtod_l+0x216>
 800cd50:	2201      	movs	r2, #1
 800cd52:	e7c2      	b.n	800ccda <_strtod_l+0x17a>
 800cd54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	921d      	str	r2, [sp, #116]	; 0x74
 800cd5a:	785b      	ldrb	r3, [r3, #1]
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	2b30      	cmp	r3, #48	; 0x30
 800cd60:	d0f8      	beq.n	800cd54 <_strtod_l+0x1f4>
 800cd62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cd66:	2a08      	cmp	r2, #8
 800cd68:	f200 84db 	bhi.w	800d722 <_strtod_l+0xbc2>
 800cd6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cd6e:	9007      	str	r0, [sp, #28]
 800cd70:	2000      	movs	r0, #0
 800cd72:	920a      	str	r2, [sp, #40]	; 0x28
 800cd74:	4605      	mov	r5, r0
 800cd76:	3b30      	subs	r3, #48	; 0x30
 800cd78:	f100 0201 	add.w	r2, r0, #1
 800cd7c:	d014      	beq.n	800cda8 <_strtod_l+0x248>
 800cd7e:	9907      	ldr	r1, [sp, #28]
 800cd80:	4411      	add	r1, r2
 800cd82:	9107      	str	r1, [sp, #28]
 800cd84:	462a      	mov	r2, r5
 800cd86:	eb00 0e05 	add.w	lr, r0, r5
 800cd8a:	210a      	movs	r1, #10
 800cd8c:	4572      	cmp	r2, lr
 800cd8e:	d113      	bne.n	800cdb8 <_strtod_l+0x258>
 800cd90:	182a      	adds	r2, r5, r0
 800cd92:	2a08      	cmp	r2, #8
 800cd94:	f105 0501 	add.w	r5, r5, #1
 800cd98:	4405      	add	r5, r0
 800cd9a:	dc1c      	bgt.n	800cdd6 <_strtod_l+0x276>
 800cd9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd9e:	220a      	movs	r2, #10
 800cda0:	fb02 3301 	mla	r3, r2, r1, r3
 800cda4:	9309      	str	r3, [sp, #36]	; 0x24
 800cda6:	2200      	movs	r2, #0
 800cda8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cdaa:	1c59      	adds	r1, r3, #1
 800cdac:	911d      	str	r1, [sp, #116]	; 0x74
 800cdae:	785b      	ldrb	r3, [r3, #1]
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	e7c9      	b.n	800cd48 <_strtod_l+0x1e8>
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	e7d2      	b.n	800cd5e <_strtod_l+0x1fe>
 800cdb8:	2a08      	cmp	r2, #8
 800cdba:	dc04      	bgt.n	800cdc6 <_strtod_l+0x266>
 800cdbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cdbe:	434e      	muls	r6, r1
 800cdc0:	9609      	str	r6, [sp, #36]	; 0x24
 800cdc2:	3201      	adds	r2, #1
 800cdc4:	e7e2      	b.n	800cd8c <_strtod_l+0x22c>
 800cdc6:	f102 0c01 	add.w	ip, r2, #1
 800cdca:	f1bc 0f10 	cmp.w	ip, #16
 800cdce:	bfd8      	it	le
 800cdd0:	fb01 f909 	mulle.w	r9, r1, r9
 800cdd4:	e7f5      	b.n	800cdc2 <_strtod_l+0x262>
 800cdd6:	2d10      	cmp	r5, #16
 800cdd8:	bfdc      	itt	le
 800cdda:	220a      	movle	r2, #10
 800cddc:	fb02 3909 	mlale	r9, r2, r9, r3
 800cde0:	e7e1      	b.n	800cda6 <_strtod_l+0x246>
 800cde2:	2300      	movs	r3, #0
 800cde4:	9307      	str	r3, [sp, #28]
 800cde6:	2201      	movs	r2, #1
 800cde8:	e77c      	b.n	800cce4 <_strtod_l+0x184>
 800cdea:	f04f 0c00 	mov.w	ip, #0
 800cdee:	f108 0302 	add.w	r3, r8, #2
 800cdf2:	931d      	str	r3, [sp, #116]	; 0x74
 800cdf4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800cdf8:	e785      	b.n	800cd06 <_strtod_l+0x1a6>
 800cdfa:	f04f 0c01 	mov.w	ip, #1
 800cdfe:	e7f6      	b.n	800cdee <_strtod_l+0x28e>
 800ce00:	08010a20 	.word	0x08010a20
 800ce04:	080107cc 	.word	0x080107cc
 800ce08:	7ff00000 	.word	0x7ff00000
 800ce0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce0e:	1c59      	adds	r1, r3, #1
 800ce10:	911d      	str	r1, [sp, #116]	; 0x74
 800ce12:	785b      	ldrb	r3, [r3, #1]
 800ce14:	2b30      	cmp	r3, #48	; 0x30
 800ce16:	d0f9      	beq.n	800ce0c <_strtod_l+0x2ac>
 800ce18:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ce1c:	2908      	cmp	r1, #8
 800ce1e:	f63f af79 	bhi.w	800cd14 <_strtod_l+0x1b4>
 800ce22:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ce26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce28:	9308      	str	r3, [sp, #32]
 800ce2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce2c:	1c59      	adds	r1, r3, #1
 800ce2e:	911d      	str	r1, [sp, #116]	; 0x74
 800ce30:	785b      	ldrb	r3, [r3, #1]
 800ce32:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ce36:	2e09      	cmp	r6, #9
 800ce38:	d937      	bls.n	800ceaa <_strtod_l+0x34a>
 800ce3a:	9e08      	ldr	r6, [sp, #32]
 800ce3c:	1b89      	subs	r1, r1, r6
 800ce3e:	2908      	cmp	r1, #8
 800ce40:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ce44:	dc02      	bgt.n	800ce4c <_strtod_l+0x2ec>
 800ce46:	4576      	cmp	r6, lr
 800ce48:	bfa8      	it	ge
 800ce4a:	4676      	movge	r6, lr
 800ce4c:	f1bc 0f00 	cmp.w	ip, #0
 800ce50:	d000      	beq.n	800ce54 <_strtod_l+0x2f4>
 800ce52:	4276      	negs	r6, r6
 800ce54:	2d00      	cmp	r5, #0
 800ce56:	d14f      	bne.n	800cef8 <_strtod_l+0x398>
 800ce58:	9904      	ldr	r1, [sp, #16]
 800ce5a:	4301      	orrs	r1, r0
 800ce5c:	f47f aec2 	bne.w	800cbe4 <_strtod_l+0x84>
 800ce60:	2a00      	cmp	r2, #0
 800ce62:	f47f aedb 	bne.w	800cc1c <_strtod_l+0xbc>
 800ce66:	2b69      	cmp	r3, #105	; 0x69
 800ce68:	d027      	beq.n	800ceba <_strtod_l+0x35a>
 800ce6a:	dc24      	bgt.n	800ceb6 <_strtod_l+0x356>
 800ce6c:	2b49      	cmp	r3, #73	; 0x49
 800ce6e:	d024      	beq.n	800ceba <_strtod_l+0x35a>
 800ce70:	2b4e      	cmp	r3, #78	; 0x4e
 800ce72:	f47f aed3 	bne.w	800cc1c <_strtod_l+0xbc>
 800ce76:	499e      	ldr	r1, [pc, #632]	; (800d0f0 <_strtod_l+0x590>)
 800ce78:	a81d      	add	r0, sp, #116	; 0x74
 800ce7a:	f001 fe41 	bl	800eb00 <__match>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	f43f aecc 	beq.w	800cc1c <_strtod_l+0xbc>
 800ce84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	2b28      	cmp	r3, #40	; 0x28
 800ce8a:	d12d      	bne.n	800cee8 <_strtod_l+0x388>
 800ce8c:	4999      	ldr	r1, [pc, #612]	; (800d0f4 <_strtod_l+0x594>)
 800ce8e:	aa20      	add	r2, sp, #128	; 0x80
 800ce90:	a81d      	add	r0, sp, #116	; 0x74
 800ce92:	f001 fe49 	bl	800eb28 <__hexnan>
 800ce96:	2805      	cmp	r0, #5
 800ce98:	d126      	bne.n	800cee8 <_strtod_l+0x388>
 800ce9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce9c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800cea0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cea4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cea8:	e69c      	b.n	800cbe4 <_strtod_l+0x84>
 800ceaa:	210a      	movs	r1, #10
 800ceac:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ceb0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ceb4:	e7b9      	b.n	800ce2a <_strtod_l+0x2ca>
 800ceb6:	2b6e      	cmp	r3, #110	; 0x6e
 800ceb8:	e7db      	b.n	800ce72 <_strtod_l+0x312>
 800ceba:	498f      	ldr	r1, [pc, #572]	; (800d0f8 <_strtod_l+0x598>)
 800cebc:	a81d      	add	r0, sp, #116	; 0x74
 800cebe:	f001 fe1f 	bl	800eb00 <__match>
 800cec2:	2800      	cmp	r0, #0
 800cec4:	f43f aeaa 	beq.w	800cc1c <_strtod_l+0xbc>
 800cec8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ceca:	498c      	ldr	r1, [pc, #560]	; (800d0fc <_strtod_l+0x59c>)
 800cecc:	3b01      	subs	r3, #1
 800cece:	a81d      	add	r0, sp, #116	; 0x74
 800ced0:	931d      	str	r3, [sp, #116]	; 0x74
 800ced2:	f001 fe15 	bl	800eb00 <__match>
 800ced6:	b910      	cbnz	r0, 800cede <_strtod_l+0x37e>
 800ced8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ceda:	3301      	adds	r3, #1
 800cedc:	931d      	str	r3, [sp, #116]	; 0x74
 800cede:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d10c <_strtod_l+0x5ac>
 800cee2:	f04f 0a00 	mov.w	sl, #0
 800cee6:	e67d      	b.n	800cbe4 <_strtod_l+0x84>
 800cee8:	4885      	ldr	r0, [pc, #532]	; (800d100 <_strtod_l+0x5a0>)
 800ceea:	f002 fd11 	bl	800f910 <nan>
 800ceee:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cef2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cef6:	e675      	b.n	800cbe4 <_strtod_l+0x84>
 800cef8:	9b07      	ldr	r3, [sp, #28]
 800cefa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cefc:	1af3      	subs	r3, r6, r3
 800cefe:	2f00      	cmp	r7, #0
 800cf00:	bf08      	it	eq
 800cf02:	462f      	moveq	r7, r5
 800cf04:	2d10      	cmp	r5, #16
 800cf06:	9308      	str	r3, [sp, #32]
 800cf08:	46a8      	mov	r8, r5
 800cf0a:	bfa8      	it	ge
 800cf0c:	f04f 0810 	movge.w	r8, #16
 800cf10:	f7f3 fb00 	bl	8000514 <__aeabi_ui2d>
 800cf14:	2d09      	cmp	r5, #9
 800cf16:	4682      	mov	sl, r0
 800cf18:	468b      	mov	fp, r1
 800cf1a:	dd13      	ble.n	800cf44 <_strtod_l+0x3e4>
 800cf1c:	4b79      	ldr	r3, [pc, #484]	; (800d104 <_strtod_l+0x5a4>)
 800cf1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cf22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cf26:	f7f3 fb6f 	bl	8000608 <__aeabi_dmul>
 800cf2a:	4682      	mov	sl, r0
 800cf2c:	4648      	mov	r0, r9
 800cf2e:	468b      	mov	fp, r1
 800cf30:	f7f3 faf0 	bl	8000514 <__aeabi_ui2d>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4650      	mov	r0, sl
 800cf3a:	4659      	mov	r1, fp
 800cf3c:	f7f3 f9ae 	bl	800029c <__adddf3>
 800cf40:	4682      	mov	sl, r0
 800cf42:	468b      	mov	fp, r1
 800cf44:	2d0f      	cmp	r5, #15
 800cf46:	dc38      	bgt.n	800cfba <_strtod_l+0x45a>
 800cf48:	9b08      	ldr	r3, [sp, #32]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f43f ae4a 	beq.w	800cbe4 <_strtod_l+0x84>
 800cf50:	dd24      	ble.n	800cf9c <_strtod_l+0x43c>
 800cf52:	2b16      	cmp	r3, #22
 800cf54:	dc0b      	bgt.n	800cf6e <_strtod_l+0x40e>
 800cf56:	4d6b      	ldr	r5, [pc, #428]	; (800d104 <_strtod_l+0x5a4>)
 800cf58:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800cf5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cf60:	4652      	mov	r2, sl
 800cf62:	465b      	mov	r3, fp
 800cf64:	f7f3 fb50 	bl	8000608 <__aeabi_dmul>
 800cf68:	4682      	mov	sl, r0
 800cf6a:	468b      	mov	fp, r1
 800cf6c:	e63a      	b.n	800cbe4 <_strtod_l+0x84>
 800cf6e:	9a08      	ldr	r2, [sp, #32]
 800cf70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cf74:	4293      	cmp	r3, r2
 800cf76:	db20      	blt.n	800cfba <_strtod_l+0x45a>
 800cf78:	4c62      	ldr	r4, [pc, #392]	; (800d104 <_strtod_l+0x5a4>)
 800cf7a:	f1c5 050f 	rsb	r5, r5, #15
 800cf7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf82:	4652      	mov	r2, sl
 800cf84:	465b      	mov	r3, fp
 800cf86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf8a:	f7f3 fb3d 	bl	8000608 <__aeabi_dmul>
 800cf8e:	9b08      	ldr	r3, [sp, #32]
 800cf90:	1b5d      	subs	r5, r3, r5
 800cf92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf9a:	e7e3      	b.n	800cf64 <_strtod_l+0x404>
 800cf9c:	9b08      	ldr	r3, [sp, #32]
 800cf9e:	3316      	adds	r3, #22
 800cfa0:	db0b      	blt.n	800cfba <_strtod_l+0x45a>
 800cfa2:	9b07      	ldr	r3, [sp, #28]
 800cfa4:	4a57      	ldr	r2, [pc, #348]	; (800d104 <_strtod_l+0x5a4>)
 800cfa6:	1b9e      	subs	r6, r3, r6
 800cfa8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800cfac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfb0:	4650      	mov	r0, sl
 800cfb2:	4659      	mov	r1, fp
 800cfb4:	f7f3 fc52 	bl	800085c <__aeabi_ddiv>
 800cfb8:	e7d6      	b.n	800cf68 <_strtod_l+0x408>
 800cfba:	9b08      	ldr	r3, [sp, #32]
 800cfbc:	eba5 0808 	sub.w	r8, r5, r8
 800cfc0:	4498      	add	r8, r3
 800cfc2:	f1b8 0f00 	cmp.w	r8, #0
 800cfc6:	dd71      	ble.n	800d0ac <_strtod_l+0x54c>
 800cfc8:	f018 030f 	ands.w	r3, r8, #15
 800cfcc:	d00a      	beq.n	800cfe4 <_strtod_l+0x484>
 800cfce:	494d      	ldr	r1, [pc, #308]	; (800d104 <_strtod_l+0x5a4>)
 800cfd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cfd4:	4652      	mov	r2, sl
 800cfd6:	465b      	mov	r3, fp
 800cfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfdc:	f7f3 fb14 	bl	8000608 <__aeabi_dmul>
 800cfe0:	4682      	mov	sl, r0
 800cfe2:	468b      	mov	fp, r1
 800cfe4:	f038 080f 	bics.w	r8, r8, #15
 800cfe8:	d04d      	beq.n	800d086 <_strtod_l+0x526>
 800cfea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cfee:	dd22      	ble.n	800d036 <_strtod_l+0x4d6>
 800cff0:	2500      	movs	r5, #0
 800cff2:	462e      	mov	r6, r5
 800cff4:	9509      	str	r5, [sp, #36]	; 0x24
 800cff6:	9507      	str	r5, [sp, #28]
 800cff8:	2322      	movs	r3, #34	; 0x22
 800cffa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d10c <_strtod_l+0x5ac>
 800cffe:	6023      	str	r3, [r4, #0]
 800d000:	f04f 0a00 	mov.w	sl, #0
 800d004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d006:	2b00      	cmp	r3, #0
 800d008:	f43f adec 	beq.w	800cbe4 <_strtod_l+0x84>
 800d00c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d00e:	4620      	mov	r0, r4
 800d010:	f001 fe96 	bl	800ed40 <_Bfree>
 800d014:	9907      	ldr	r1, [sp, #28]
 800d016:	4620      	mov	r0, r4
 800d018:	f001 fe92 	bl	800ed40 <_Bfree>
 800d01c:	4631      	mov	r1, r6
 800d01e:	4620      	mov	r0, r4
 800d020:	f001 fe8e 	bl	800ed40 <_Bfree>
 800d024:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d026:	4620      	mov	r0, r4
 800d028:	f001 fe8a 	bl	800ed40 <_Bfree>
 800d02c:	4629      	mov	r1, r5
 800d02e:	4620      	mov	r0, r4
 800d030:	f001 fe86 	bl	800ed40 <_Bfree>
 800d034:	e5d6      	b.n	800cbe4 <_strtod_l+0x84>
 800d036:	2300      	movs	r3, #0
 800d038:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d03c:	4650      	mov	r0, sl
 800d03e:	4659      	mov	r1, fp
 800d040:	4699      	mov	r9, r3
 800d042:	f1b8 0f01 	cmp.w	r8, #1
 800d046:	dc21      	bgt.n	800d08c <_strtod_l+0x52c>
 800d048:	b10b      	cbz	r3, 800d04e <_strtod_l+0x4ee>
 800d04a:	4682      	mov	sl, r0
 800d04c:	468b      	mov	fp, r1
 800d04e:	4b2e      	ldr	r3, [pc, #184]	; (800d108 <_strtod_l+0x5a8>)
 800d050:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d054:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d058:	4652      	mov	r2, sl
 800d05a:	465b      	mov	r3, fp
 800d05c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d060:	f7f3 fad2 	bl	8000608 <__aeabi_dmul>
 800d064:	4b29      	ldr	r3, [pc, #164]	; (800d10c <_strtod_l+0x5ac>)
 800d066:	460a      	mov	r2, r1
 800d068:	400b      	ands	r3, r1
 800d06a:	4929      	ldr	r1, [pc, #164]	; (800d110 <_strtod_l+0x5b0>)
 800d06c:	428b      	cmp	r3, r1
 800d06e:	4682      	mov	sl, r0
 800d070:	d8be      	bhi.n	800cff0 <_strtod_l+0x490>
 800d072:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d076:	428b      	cmp	r3, r1
 800d078:	bf86      	itte	hi
 800d07a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d114 <_strtod_l+0x5b4>
 800d07e:	f04f 3aff 	movhi.w	sl, #4294967295
 800d082:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d086:	2300      	movs	r3, #0
 800d088:	9304      	str	r3, [sp, #16]
 800d08a:	e081      	b.n	800d190 <_strtod_l+0x630>
 800d08c:	f018 0f01 	tst.w	r8, #1
 800d090:	d007      	beq.n	800d0a2 <_strtod_l+0x542>
 800d092:	4b1d      	ldr	r3, [pc, #116]	; (800d108 <_strtod_l+0x5a8>)
 800d094:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09c:	f7f3 fab4 	bl	8000608 <__aeabi_dmul>
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	f109 0901 	add.w	r9, r9, #1
 800d0a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d0aa:	e7ca      	b.n	800d042 <_strtod_l+0x4e2>
 800d0ac:	d0eb      	beq.n	800d086 <_strtod_l+0x526>
 800d0ae:	f1c8 0800 	rsb	r8, r8, #0
 800d0b2:	f018 020f 	ands.w	r2, r8, #15
 800d0b6:	d00a      	beq.n	800d0ce <_strtod_l+0x56e>
 800d0b8:	4b12      	ldr	r3, [pc, #72]	; (800d104 <_strtod_l+0x5a4>)
 800d0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0be:	4650      	mov	r0, sl
 800d0c0:	4659      	mov	r1, fp
 800d0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c6:	f7f3 fbc9 	bl	800085c <__aeabi_ddiv>
 800d0ca:	4682      	mov	sl, r0
 800d0cc:	468b      	mov	fp, r1
 800d0ce:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d0d2:	d0d8      	beq.n	800d086 <_strtod_l+0x526>
 800d0d4:	f1b8 0f1f 	cmp.w	r8, #31
 800d0d8:	dd1e      	ble.n	800d118 <_strtod_l+0x5b8>
 800d0da:	2500      	movs	r5, #0
 800d0dc:	462e      	mov	r6, r5
 800d0de:	9509      	str	r5, [sp, #36]	; 0x24
 800d0e0:	9507      	str	r5, [sp, #28]
 800d0e2:	2322      	movs	r3, #34	; 0x22
 800d0e4:	f04f 0a00 	mov.w	sl, #0
 800d0e8:	f04f 0b00 	mov.w	fp, #0
 800d0ec:	6023      	str	r3, [r4, #0]
 800d0ee:	e789      	b.n	800d004 <_strtod_l+0x4a4>
 800d0f0:	0801079d 	.word	0x0801079d
 800d0f4:	080107e0 	.word	0x080107e0
 800d0f8:	08010795 	.word	0x08010795
 800d0fc:	08010924 	.word	0x08010924
 800d100:	08010be0 	.word	0x08010be0
 800d104:	08010ac0 	.word	0x08010ac0
 800d108:	08010a98 	.word	0x08010a98
 800d10c:	7ff00000 	.word	0x7ff00000
 800d110:	7ca00000 	.word	0x7ca00000
 800d114:	7fefffff 	.word	0x7fefffff
 800d118:	f018 0310 	ands.w	r3, r8, #16
 800d11c:	bf18      	it	ne
 800d11e:	236a      	movne	r3, #106	; 0x6a
 800d120:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d4d8 <_strtod_l+0x978>
 800d124:	9304      	str	r3, [sp, #16]
 800d126:	4650      	mov	r0, sl
 800d128:	4659      	mov	r1, fp
 800d12a:	2300      	movs	r3, #0
 800d12c:	f018 0f01 	tst.w	r8, #1
 800d130:	d004      	beq.n	800d13c <_strtod_l+0x5dc>
 800d132:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d136:	f7f3 fa67 	bl	8000608 <__aeabi_dmul>
 800d13a:	2301      	movs	r3, #1
 800d13c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d140:	f109 0908 	add.w	r9, r9, #8
 800d144:	d1f2      	bne.n	800d12c <_strtod_l+0x5cc>
 800d146:	b10b      	cbz	r3, 800d14c <_strtod_l+0x5ec>
 800d148:	4682      	mov	sl, r0
 800d14a:	468b      	mov	fp, r1
 800d14c:	9b04      	ldr	r3, [sp, #16]
 800d14e:	b1bb      	cbz	r3, 800d180 <_strtod_l+0x620>
 800d150:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d154:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d158:	2b00      	cmp	r3, #0
 800d15a:	4659      	mov	r1, fp
 800d15c:	dd10      	ble.n	800d180 <_strtod_l+0x620>
 800d15e:	2b1f      	cmp	r3, #31
 800d160:	f340 8128 	ble.w	800d3b4 <_strtod_l+0x854>
 800d164:	2b34      	cmp	r3, #52	; 0x34
 800d166:	bfde      	ittt	le
 800d168:	3b20      	suble	r3, #32
 800d16a:	f04f 32ff 	movle.w	r2, #4294967295
 800d16e:	fa02 f303 	lslle.w	r3, r2, r3
 800d172:	f04f 0a00 	mov.w	sl, #0
 800d176:	bfcc      	ite	gt
 800d178:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d17c:	ea03 0b01 	andle.w	fp, r3, r1
 800d180:	2200      	movs	r2, #0
 800d182:	2300      	movs	r3, #0
 800d184:	4650      	mov	r0, sl
 800d186:	4659      	mov	r1, fp
 800d188:	f7f3 fca6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d1a4      	bne.n	800d0da <_strtod_l+0x57a>
 800d190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d196:	462b      	mov	r3, r5
 800d198:	463a      	mov	r2, r7
 800d19a:	4620      	mov	r0, r4
 800d19c:	f001 fe3c 	bl	800ee18 <__s2b>
 800d1a0:	9009      	str	r0, [sp, #36]	; 0x24
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	f43f af24 	beq.w	800cff0 <_strtod_l+0x490>
 800d1a8:	9b07      	ldr	r3, [sp, #28]
 800d1aa:	1b9e      	subs	r6, r3, r6
 800d1ac:	9b08      	ldr	r3, [sp, #32]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bfb4      	ite	lt
 800d1b2:	4633      	movlt	r3, r6
 800d1b4:	2300      	movge	r3, #0
 800d1b6:	9310      	str	r3, [sp, #64]	; 0x40
 800d1b8:	9b08      	ldr	r3, [sp, #32]
 800d1ba:	2500      	movs	r5, #0
 800d1bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d1c0:	9318      	str	r3, [sp, #96]	; 0x60
 800d1c2:	462e      	mov	r6, r5
 800d1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	6859      	ldr	r1, [r3, #4]
 800d1ca:	f001 fd79 	bl	800ecc0 <_Balloc>
 800d1ce:	9007      	str	r0, [sp, #28]
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	f43f af11 	beq.w	800cff8 <_strtod_l+0x498>
 800d1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1d8:	691a      	ldr	r2, [r3, #16]
 800d1da:	3202      	adds	r2, #2
 800d1dc:	f103 010c 	add.w	r1, r3, #12
 800d1e0:	0092      	lsls	r2, r2, #2
 800d1e2:	300c      	adds	r0, #12
 800d1e4:	f001 fd52 	bl	800ec8c <memcpy>
 800d1e8:	ec4b ab10 	vmov	d0, sl, fp
 800d1ec:	aa20      	add	r2, sp, #128	; 0x80
 800d1ee:	a91f      	add	r1, sp, #124	; 0x7c
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d1f6:	f002 f94b 	bl	800f490 <__d2b>
 800d1fa:	901e      	str	r0, [sp, #120]	; 0x78
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	f43f aefb 	beq.w	800cff8 <_strtod_l+0x498>
 800d202:	2101      	movs	r1, #1
 800d204:	4620      	mov	r0, r4
 800d206:	f001 fea1 	bl	800ef4c <__i2b>
 800d20a:	4606      	mov	r6, r0
 800d20c:	2800      	cmp	r0, #0
 800d20e:	f43f aef3 	beq.w	800cff8 <_strtod_l+0x498>
 800d212:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d214:	9904      	ldr	r1, [sp, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	bfab      	itete	ge
 800d21a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d21c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d21e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d220:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d224:	bfac      	ite	ge
 800d226:	eb03 0902 	addge.w	r9, r3, r2
 800d22a:	1ad7      	sublt	r7, r2, r3
 800d22c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d22e:	eba3 0801 	sub.w	r8, r3, r1
 800d232:	4490      	add	r8, r2
 800d234:	4ba3      	ldr	r3, [pc, #652]	; (800d4c4 <_strtod_l+0x964>)
 800d236:	f108 38ff 	add.w	r8, r8, #4294967295
 800d23a:	4598      	cmp	r8, r3
 800d23c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d240:	f280 80cc 	bge.w	800d3dc <_strtod_l+0x87c>
 800d244:	eba3 0308 	sub.w	r3, r3, r8
 800d248:	2b1f      	cmp	r3, #31
 800d24a:	eba2 0203 	sub.w	r2, r2, r3
 800d24e:	f04f 0101 	mov.w	r1, #1
 800d252:	f300 80b6 	bgt.w	800d3c2 <_strtod_l+0x862>
 800d256:	fa01 f303 	lsl.w	r3, r1, r3
 800d25a:	9311      	str	r3, [sp, #68]	; 0x44
 800d25c:	2300      	movs	r3, #0
 800d25e:	930c      	str	r3, [sp, #48]	; 0x30
 800d260:	eb09 0802 	add.w	r8, r9, r2
 800d264:	9b04      	ldr	r3, [sp, #16]
 800d266:	45c1      	cmp	r9, r8
 800d268:	4417      	add	r7, r2
 800d26a:	441f      	add	r7, r3
 800d26c:	464b      	mov	r3, r9
 800d26e:	bfa8      	it	ge
 800d270:	4643      	movge	r3, r8
 800d272:	42bb      	cmp	r3, r7
 800d274:	bfa8      	it	ge
 800d276:	463b      	movge	r3, r7
 800d278:	2b00      	cmp	r3, #0
 800d27a:	bfc2      	ittt	gt
 800d27c:	eba8 0803 	subgt.w	r8, r8, r3
 800d280:	1aff      	subgt	r7, r7, r3
 800d282:	eba9 0903 	subgt.w	r9, r9, r3
 800d286:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d288:	2b00      	cmp	r3, #0
 800d28a:	dd17      	ble.n	800d2bc <_strtod_l+0x75c>
 800d28c:	4631      	mov	r1, r6
 800d28e:	461a      	mov	r2, r3
 800d290:	4620      	mov	r0, r4
 800d292:	f001 ff17 	bl	800f0c4 <__pow5mult>
 800d296:	4606      	mov	r6, r0
 800d298:	2800      	cmp	r0, #0
 800d29a:	f43f aead 	beq.w	800cff8 <_strtod_l+0x498>
 800d29e:	4601      	mov	r1, r0
 800d2a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f001 fe68 	bl	800ef78 <__multiply>
 800d2a8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	f43f aea4 	beq.w	800cff8 <_strtod_l+0x498>
 800d2b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f001 fd44 	bl	800ed40 <_Bfree>
 800d2b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2ba:	931e      	str	r3, [sp, #120]	; 0x78
 800d2bc:	f1b8 0f00 	cmp.w	r8, #0
 800d2c0:	f300 8091 	bgt.w	800d3e6 <_strtod_l+0x886>
 800d2c4:	9b08      	ldr	r3, [sp, #32]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	dd08      	ble.n	800d2dc <_strtod_l+0x77c>
 800d2ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d2cc:	9907      	ldr	r1, [sp, #28]
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f001 fef8 	bl	800f0c4 <__pow5mult>
 800d2d4:	9007      	str	r0, [sp, #28]
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	f43f ae8e 	beq.w	800cff8 <_strtod_l+0x498>
 800d2dc:	2f00      	cmp	r7, #0
 800d2de:	dd08      	ble.n	800d2f2 <_strtod_l+0x792>
 800d2e0:	9907      	ldr	r1, [sp, #28]
 800d2e2:	463a      	mov	r2, r7
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f001 ff47 	bl	800f178 <__lshift>
 800d2ea:	9007      	str	r0, [sp, #28]
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	f43f ae83 	beq.w	800cff8 <_strtod_l+0x498>
 800d2f2:	f1b9 0f00 	cmp.w	r9, #0
 800d2f6:	dd08      	ble.n	800d30a <_strtod_l+0x7aa>
 800d2f8:	4631      	mov	r1, r6
 800d2fa:	464a      	mov	r2, r9
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f001 ff3b 	bl	800f178 <__lshift>
 800d302:	4606      	mov	r6, r0
 800d304:	2800      	cmp	r0, #0
 800d306:	f43f ae77 	beq.w	800cff8 <_strtod_l+0x498>
 800d30a:	9a07      	ldr	r2, [sp, #28]
 800d30c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d30e:	4620      	mov	r0, r4
 800d310:	f001 ffba 	bl	800f288 <__mdiff>
 800d314:	4605      	mov	r5, r0
 800d316:	2800      	cmp	r0, #0
 800d318:	f43f ae6e 	beq.w	800cff8 <_strtod_l+0x498>
 800d31c:	68c3      	ldr	r3, [r0, #12]
 800d31e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d320:	2300      	movs	r3, #0
 800d322:	60c3      	str	r3, [r0, #12]
 800d324:	4631      	mov	r1, r6
 800d326:	f001 ff93 	bl	800f250 <__mcmp>
 800d32a:	2800      	cmp	r0, #0
 800d32c:	da65      	bge.n	800d3fa <_strtod_l+0x89a>
 800d32e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d330:	ea53 030a 	orrs.w	r3, r3, sl
 800d334:	f040 8087 	bne.w	800d446 <_strtod_l+0x8e6>
 800d338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f040 8082 	bne.w	800d446 <_strtod_l+0x8e6>
 800d342:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d346:	0d1b      	lsrs	r3, r3, #20
 800d348:	051b      	lsls	r3, r3, #20
 800d34a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d34e:	d97a      	bls.n	800d446 <_strtod_l+0x8e6>
 800d350:	696b      	ldr	r3, [r5, #20]
 800d352:	b913      	cbnz	r3, 800d35a <_strtod_l+0x7fa>
 800d354:	692b      	ldr	r3, [r5, #16]
 800d356:	2b01      	cmp	r3, #1
 800d358:	dd75      	ble.n	800d446 <_strtod_l+0x8e6>
 800d35a:	4629      	mov	r1, r5
 800d35c:	2201      	movs	r2, #1
 800d35e:	4620      	mov	r0, r4
 800d360:	f001 ff0a 	bl	800f178 <__lshift>
 800d364:	4631      	mov	r1, r6
 800d366:	4605      	mov	r5, r0
 800d368:	f001 ff72 	bl	800f250 <__mcmp>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	dd6a      	ble.n	800d446 <_strtod_l+0x8e6>
 800d370:	9904      	ldr	r1, [sp, #16]
 800d372:	4a55      	ldr	r2, [pc, #340]	; (800d4c8 <_strtod_l+0x968>)
 800d374:	465b      	mov	r3, fp
 800d376:	2900      	cmp	r1, #0
 800d378:	f000 8085 	beq.w	800d486 <_strtod_l+0x926>
 800d37c:	ea02 010b 	and.w	r1, r2, fp
 800d380:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d384:	dc7f      	bgt.n	800d486 <_strtod_l+0x926>
 800d386:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d38a:	f77f aeaa 	ble.w	800d0e2 <_strtod_l+0x582>
 800d38e:	4a4f      	ldr	r2, [pc, #316]	; (800d4cc <_strtod_l+0x96c>)
 800d390:	2300      	movs	r3, #0
 800d392:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d396:	4650      	mov	r0, sl
 800d398:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d39c:	4659      	mov	r1, fp
 800d39e:	f7f3 f933 	bl	8000608 <__aeabi_dmul>
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	4303      	orrs	r3, r0
 800d3a6:	bf08      	it	eq
 800d3a8:	2322      	moveq	r3, #34	; 0x22
 800d3aa:	4682      	mov	sl, r0
 800d3ac:	468b      	mov	fp, r1
 800d3ae:	bf08      	it	eq
 800d3b0:	6023      	streq	r3, [r4, #0]
 800d3b2:	e62b      	b.n	800d00c <_strtod_l+0x4ac>
 800d3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3bc:	ea03 0a0a 	and.w	sl, r3, sl
 800d3c0:	e6de      	b.n	800d180 <_strtod_l+0x620>
 800d3c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d3c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d3ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d3ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d3d2:	fa01 f308 	lsl.w	r3, r1, r8
 800d3d6:	930c      	str	r3, [sp, #48]	; 0x30
 800d3d8:	9111      	str	r1, [sp, #68]	; 0x44
 800d3da:	e741      	b.n	800d260 <_strtod_l+0x700>
 800d3dc:	2300      	movs	r3, #0
 800d3de:	930c      	str	r3, [sp, #48]	; 0x30
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	9311      	str	r3, [sp, #68]	; 0x44
 800d3e4:	e73c      	b.n	800d260 <_strtod_l+0x700>
 800d3e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d3e8:	4642      	mov	r2, r8
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f001 fec4 	bl	800f178 <__lshift>
 800d3f0:	901e      	str	r0, [sp, #120]	; 0x78
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	f47f af66 	bne.w	800d2c4 <_strtod_l+0x764>
 800d3f8:	e5fe      	b.n	800cff8 <_strtod_l+0x498>
 800d3fa:	465f      	mov	r7, fp
 800d3fc:	d16e      	bne.n	800d4dc <_strtod_l+0x97c>
 800d3fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d400:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d404:	b342      	cbz	r2, 800d458 <_strtod_l+0x8f8>
 800d406:	4a32      	ldr	r2, [pc, #200]	; (800d4d0 <_strtod_l+0x970>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d128      	bne.n	800d45e <_strtod_l+0x8fe>
 800d40c:	9b04      	ldr	r3, [sp, #16]
 800d40e:	4650      	mov	r0, sl
 800d410:	b1eb      	cbz	r3, 800d44e <_strtod_l+0x8ee>
 800d412:	4a2d      	ldr	r2, [pc, #180]	; (800d4c8 <_strtod_l+0x968>)
 800d414:	403a      	ands	r2, r7
 800d416:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d41a:	f04f 31ff 	mov.w	r1, #4294967295
 800d41e:	d819      	bhi.n	800d454 <_strtod_l+0x8f4>
 800d420:	0d12      	lsrs	r2, r2, #20
 800d422:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d426:	fa01 f303 	lsl.w	r3, r1, r3
 800d42a:	4298      	cmp	r0, r3
 800d42c:	d117      	bne.n	800d45e <_strtod_l+0x8fe>
 800d42e:	4b29      	ldr	r3, [pc, #164]	; (800d4d4 <_strtod_l+0x974>)
 800d430:	429f      	cmp	r7, r3
 800d432:	d102      	bne.n	800d43a <_strtod_l+0x8da>
 800d434:	3001      	adds	r0, #1
 800d436:	f43f addf 	beq.w	800cff8 <_strtod_l+0x498>
 800d43a:	4b23      	ldr	r3, [pc, #140]	; (800d4c8 <_strtod_l+0x968>)
 800d43c:	403b      	ands	r3, r7
 800d43e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d442:	f04f 0a00 	mov.w	sl, #0
 800d446:	9b04      	ldr	r3, [sp, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1a0      	bne.n	800d38e <_strtod_l+0x82e>
 800d44c:	e5de      	b.n	800d00c <_strtod_l+0x4ac>
 800d44e:	f04f 33ff 	mov.w	r3, #4294967295
 800d452:	e7ea      	b.n	800d42a <_strtod_l+0x8ca>
 800d454:	460b      	mov	r3, r1
 800d456:	e7e8      	b.n	800d42a <_strtod_l+0x8ca>
 800d458:	ea53 030a 	orrs.w	r3, r3, sl
 800d45c:	d088      	beq.n	800d370 <_strtod_l+0x810>
 800d45e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d460:	b1db      	cbz	r3, 800d49a <_strtod_l+0x93a>
 800d462:	423b      	tst	r3, r7
 800d464:	d0ef      	beq.n	800d446 <_strtod_l+0x8e6>
 800d466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d468:	9a04      	ldr	r2, [sp, #16]
 800d46a:	4650      	mov	r0, sl
 800d46c:	4659      	mov	r1, fp
 800d46e:	b1c3      	cbz	r3, 800d4a2 <_strtod_l+0x942>
 800d470:	f7ff fb58 	bl	800cb24 <sulp>
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d47c:	f7f2 ff0e 	bl	800029c <__adddf3>
 800d480:	4682      	mov	sl, r0
 800d482:	468b      	mov	fp, r1
 800d484:	e7df      	b.n	800d446 <_strtod_l+0x8e6>
 800d486:	4013      	ands	r3, r2
 800d488:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d48c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d490:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d494:	f04f 3aff 	mov.w	sl, #4294967295
 800d498:	e7d5      	b.n	800d446 <_strtod_l+0x8e6>
 800d49a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d49c:	ea13 0f0a 	tst.w	r3, sl
 800d4a0:	e7e0      	b.n	800d464 <_strtod_l+0x904>
 800d4a2:	f7ff fb3f 	bl	800cb24 <sulp>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d4ae:	f7f2 fef3 	bl	8000298 <__aeabi_dsub>
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4682      	mov	sl, r0
 800d4b8:	468b      	mov	fp, r1
 800d4ba:	f7f3 fb0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d0c1      	beq.n	800d446 <_strtod_l+0x8e6>
 800d4c2:	e60e      	b.n	800d0e2 <_strtod_l+0x582>
 800d4c4:	fffffc02 	.word	0xfffffc02
 800d4c8:	7ff00000 	.word	0x7ff00000
 800d4cc:	39500000 	.word	0x39500000
 800d4d0:	000fffff 	.word	0x000fffff
 800d4d4:	7fefffff 	.word	0x7fefffff
 800d4d8:	080107f8 	.word	0x080107f8
 800d4dc:	4631      	mov	r1, r6
 800d4de:	4628      	mov	r0, r5
 800d4e0:	f002 f832 	bl	800f548 <__ratio>
 800d4e4:	ec59 8b10 	vmov	r8, r9, d0
 800d4e8:	ee10 0a10 	vmov	r0, s0
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4f2:	4649      	mov	r1, r9
 800d4f4:	f7f3 fb04 	bl	8000b00 <__aeabi_dcmple>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d07c      	beq.n	800d5f6 <_strtod_l+0xa96>
 800d4fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d04c      	beq.n	800d59c <_strtod_l+0xa3c>
 800d502:	4b95      	ldr	r3, [pc, #596]	; (800d758 <_strtod_l+0xbf8>)
 800d504:	2200      	movs	r2, #0
 800d506:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d50a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d758 <_strtod_l+0xbf8>
 800d50e:	f04f 0800 	mov.w	r8, #0
 800d512:	4b92      	ldr	r3, [pc, #584]	; (800d75c <_strtod_l+0xbfc>)
 800d514:	403b      	ands	r3, r7
 800d516:	9311      	str	r3, [sp, #68]	; 0x44
 800d518:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d51a:	4b91      	ldr	r3, [pc, #580]	; (800d760 <_strtod_l+0xc00>)
 800d51c:	429a      	cmp	r2, r3
 800d51e:	f040 80b2 	bne.w	800d686 <_strtod_l+0xb26>
 800d522:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d52a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d52e:	ec4b ab10 	vmov	d0, sl, fp
 800d532:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d536:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d53a:	f001 ff2d 	bl	800f398 <__ulp>
 800d53e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d542:	ec53 2b10 	vmov	r2, r3, d0
 800d546:	f7f3 f85f 	bl	8000608 <__aeabi_dmul>
 800d54a:	4652      	mov	r2, sl
 800d54c:	465b      	mov	r3, fp
 800d54e:	f7f2 fea5 	bl	800029c <__adddf3>
 800d552:	460b      	mov	r3, r1
 800d554:	4981      	ldr	r1, [pc, #516]	; (800d75c <_strtod_l+0xbfc>)
 800d556:	4a83      	ldr	r2, [pc, #524]	; (800d764 <_strtod_l+0xc04>)
 800d558:	4019      	ands	r1, r3
 800d55a:	4291      	cmp	r1, r2
 800d55c:	4682      	mov	sl, r0
 800d55e:	d95e      	bls.n	800d61e <_strtod_l+0xabe>
 800d560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d562:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d566:	4293      	cmp	r3, r2
 800d568:	d103      	bne.n	800d572 <_strtod_l+0xa12>
 800d56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d56c:	3301      	adds	r3, #1
 800d56e:	f43f ad43 	beq.w	800cff8 <_strtod_l+0x498>
 800d572:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d770 <_strtod_l+0xc10>
 800d576:	f04f 3aff 	mov.w	sl, #4294967295
 800d57a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d57c:	4620      	mov	r0, r4
 800d57e:	f001 fbdf 	bl	800ed40 <_Bfree>
 800d582:	9907      	ldr	r1, [sp, #28]
 800d584:	4620      	mov	r0, r4
 800d586:	f001 fbdb 	bl	800ed40 <_Bfree>
 800d58a:	4631      	mov	r1, r6
 800d58c:	4620      	mov	r0, r4
 800d58e:	f001 fbd7 	bl	800ed40 <_Bfree>
 800d592:	4629      	mov	r1, r5
 800d594:	4620      	mov	r0, r4
 800d596:	f001 fbd3 	bl	800ed40 <_Bfree>
 800d59a:	e613      	b.n	800d1c4 <_strtod_l+0x664>
 800d59c:	f1ba 0f00 	cmp.w	sl, #0
 800d5a0:	d11b      	bne.n	800d5da <_strtod_l+0xa7a>
 800d5a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5a6:	b9f3      	cbnz	r3, 800d5e6 <_strtod_l+0xa86>
 800d5a8:	4b6b      	ldr	r3, [pc, #428]	; (800d758 <_strtod_l+0xbf8>)
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	4640      	mov	r0, r8
 800d5ae:	4649      	mov	r1, r9
 800d5b0:	f7f3 fa9c 	bl	8000aec <__aeabi_dcmplt>
 800d5b4:	b9d0      	cbnz	r0, 800d5ec <_strtod_l+0xa8c>
 800d5b6:	4640      	mov	r0, r8
 800d5b8:	4649      	mov	r1, r9
 800d5ba:	4b6b      	ldr	r3, [pc, #428]	; (800d768 <_strtod_l+0xc08>)
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f7f3 f823 	bl	8000608 <__aeabi_dmul>
 800d5c2:	4680      	mov	r8, r0
 800d5c4:	4689      	mov	r9, r1
 800d5c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d5ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d5ce:	931b      	str	r3, [sp, #108]	; 0x6c
 800d5d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d5d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d5d8:	e79b      	b.n	800d512 <_strtod_l+0x9b2>
 800d5da:	f1ba 0f01 	cmp.w	sl, #1
 800d5de:	d102      	bne.n	800d5e6 <_strtod_l+0xa86>
 800d5e0:	2f00      	cmp	r7, #0
 800d5e2:	f43f ad7e 	beq.w	800d0e2 <_strtod_l+0x582>
 800d5e6:	4b61      	ldr	r3, [pc, #388]	; (800d76c <_strtod_l+0xc0c>)
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	e78c      	b.n	800d506 <_strtod_l+0x9a6>
 800d5ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d768 <_strtod_l+0xc08>
 800d5f0:	f04f 0800 	mov.w	r8, #0
 800d5f4:	e7e7      	b.n	800d5c6 <_strtod_l+0xa66>
 800d5f6:	4b5c      	ldr	r3, [pc, #368]	; (800d768 <_strtod_l+0xc08>)
 800d5f8:	4640      	mov	r0, r8
 800d5fa:	4649      	mov	r1, r9
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f7f3 f803 	bl	8000608 <__aeabi_dmul>
 800d602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d604:	4680      	mov	r8, r0
 800d606:	4689      	mov	r9, r1
 800d608:	b933      	cbnz	r3, 800d618 <_strtod_l+0xab8>
 800d60a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d60e:	9012      	str	r0, [sp, #72]	; 0x48
 800d610:	9313      	str	r3, [sp, #76]	; 0x4c
 800d612:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d616:	e7dd      	b.n	800d5d4 <_strtod_l+0xa74>
 800d618:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d61c:	e7f9      	b.n	800d612 <_strtod_l+0xab2>
 800d61e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d622:	9b04      	ldr	r3, [sp, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1a8      	bne.n	800d57a <_strtod_l+0xa1a>
 800d628:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d62c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d62e:	0d1b      	lsrs	r3, r3, #20
 800d630:	051b      	lsls	r3, r3, #20
 800d632:	429a      	cmp	r2, r3
 800d634:	d1a1      	bne.n	800d57a <_strtod_l+0xa1a>
 800d636:	4640      	mov	r0, r8
 800d638:	4649      	mov	r1, r9
 800d63a:	f7f3 fb45 	bl	8000cc8 <__aeabi_d2lz>
 800d63e:	f7f2 ffb5 	bl	80005ac <__aeabi_l2d>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	4640      	mov	r0, r8
 800d648:	4649      	mov	r1, r9
 800d64a:	f7f2 fe25 	bl	8000298 <__aeabi_dsub>
 800d64e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d654:	ea43 030a 	orr.w	r3, r3, sl
 800d658:	4313      	orrs	r3, r2
 800d65a:	4680      	mov	r8, r0
 800d65c:	4689      	mov	r9, r1
 800d65e:	d053      	beq.n	800d708 <_strtod_l+0xba8>
 800d660:	a335      	add	r3, pc, #212	; (adr r3, 800d738 <_strtod_l+0xbd8>)
 800d662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d666:	f7f3 fa41 	bl	8000aec <__aeabi_dcmplt>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	f47f acce 	bne.w	800d00c <_strtod_l+0x4ac>
 800d670:	a333      	add	r3, pc, #204	; (adr r3, 800d740 <_strtod_l+0xbe0>)
 800d672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d676:	4640      	mov	r0, r8
 800d678:	4649      	mov	r1, r9
 800d67a:	f7f3 fa55 	bl	8000b28 <__aeabi_dcmpgt>
 800d67e:	2800      	cmp	r0, #0
 800d680:	f43f af7b 	beq.w	800d57a <_strtod_l+0xa1a>
 800d684:	e4c2      	b.n	800d00c <_strtod_l+0x4ac>
 800d686:	9b04      	ldr	r3, [sp, #16]
 800d688:	b333      	cbz	r3, 800d6d8 <_strtod_l+0xb78>
 800d68a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d68c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d690:	d822      	bhi.n	800d6d8 <_strtod_l+0xb78>
 800d692:	a32d      	add	r3, pc, #180	; (adr r3, 800d748 <_strtod_l+0xbe8>)
 800d694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d698:	4640      	mov	r0, r8
 800d69a:	4649      	mov	r1, r9
 800d69c:	f7f3 fa30 	bl	8000b00 <__aeabi_dcmple>
 800d6a0:	b1a0      	cbz	r0, 800d6cc <_strtod_l+0xb6c>
 800d6a2:	4649      	mov	r1, r9
 800d6a4:	4640      	mov	r0, r8
 800d6a6:	f7f3 fa87 	bl	8000bb8 <__aeabi_d2uiz>
 800d6aa:	2801      	cmp	r0, #1
 800d6ac:	bf38      	it	cc
 800d6ae:	2001      	movcc	r0, #1
 800d6b0:	f7f2 ff30 	bl	8000514 <__aeabi_ui2d>
 800d6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6b6:	4680      	mov	r8, r0
 800d6b8:	4689      	mov	r9, r1
 800d6ba:	bb13      	cbnz	r3, 800d702 <_strtod_l+0xba2>
 800d6bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6c0:	9014      	str	r0, [sp, #80]	; 0x50
 800d6c2:	9315      	str	r3, [sp, #84]	; 0x54
 800d6c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d6c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d6d4:	1a9b      	subs	r3, r3, r2
 800d6d6:	930d      	str	r3, [sp, #52]	; 0x34
 800d6d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6dc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d6e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d6e4:	f001 fe58 	bl	800f398 <__ulp>
 800d6e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6ec:	ec53 2b10 	vmov	r2, r3, d0
 800d6f0:	f7f2 ff8a 	bl	8000608 <__aeabi_dmul>
 800d6f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d6f8:	f7f2 fdd0 	bl	800029c <__adddf3>
 800d6fc:	4682      	mov	sl, r0
 800d6fe:	468b      	mov	fp, r1
 800d700:	e78f      	b.n	800d622 <_strtod_l+0xac2>
 800d702:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d706:	e7dd      	b.n	800d6c4 <_strtod_l+0xb64>
 800d708:	a311      	add	r3, pc, #68	; (adr r3, 800d750 <_strtod_l+0xbf0>)
 800d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70e:	f7f3 f9ed 	bl	8000aec <__aeabi_dcmplt>
 800d712:	e7b4      	b.n	800d67e <_strtod_l+0xb1e>
 800d714:	2300      	movs	r3, #0
 800d716:	930e      	str	r3, [sp, #56]	; 0x38
 800d718:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d71a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d71c:	6013      	str	r3, [r2, #0]
 800d71e:	f7ff ba65 	b.w	800cbec <_strtod_l+0x8c>
 800d722:	2b65      	cmp	r3, #101	; 0x65
 800d724:	f43f ab5d 	beq.w	800cde2 <_strtod_l+0x282>
 800d728:	2b45      	cmp	r3, #69	; 0x45
 800d72a:	f43f ab5a 	beq.w	800cde2 <_strtod_l+0x282>
 800d72e:	2201      	movs	r2, #1
 800d730:	f7ff bb92 	b.w	800ce58 <_strtod_l+0x2f8>
 800d734:	f3af 8000 	nop.w
 800d738:	94a03595 	.word	0x94a03595
 800d73c:	3fdfffff 	.word	0x3fdfffff
 800d740:	35afe535 	.word	0x35afe535
 800d744:	3fe00000 	.word	0x3fe00000
 800d748:	ffc00000 	.word	0xffc00000
 800d74c:	41dfffff 	.word	0x41dfffff
 800d750:	94a03595 	.word	0x94a03595
 800d754:	3fcfffff 	.word	0x3fcfffff
 800d758:	3ff00000 	.word	0x3ff00000
 800d75c:	7ff00000 	.word	0x7ff00000
 800d760:	7fe00000 	.word	0x7fe00000
 800d764:	7c9fffff 	.word	0x7c9fffff
 800d768:	3fe00000 	.word	0x3fe00000
 800d76c:	bff00000 	.word	0xbff00000
 800d770:	7fefffff 	.word	0x7fefffff

0800d774 <_strtod_r>:
 800d774:	4b01      	ldr	r3, [pc, #4]	; (800d77c <_strtod_r+0x8>)
 800d776:	f7ff b9f3 	b.w	800cb60 <_strtod_l>
 800d77a:	bf00      	nop
 800d77c:	20000094 	.word	0x20000094

0800d780 <_strtol_l.isra.0>:
 800d780:	2b01      	cmp	r3, #1
 800d782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d786:	d001      	beq.n	800d78c <_strtol_l.isra.0+0xc>
 800d788:	2b24      	cmp	r3, #36	; 0x24
 800d78a:	d906      	bls.n	800d79a <_strtol_l.isra.0+0x1a>
 800d78c:	f7fe fa2e 	bl	800bbec <__errno>
 800d790:	2316      	movs	r3, #22
 800d792:	6003      	str	r3, [r0, #0]
 800d794:	2000      	movs	r0, #0
 800d796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d79a:	4f3a      	ldr	r7, [pc, #232]	; (800d884 <_strtol_l.isra.0+0x104>)
 800d79c:	468e      	mov	lr, r1
 800d79e:	4676      	mov	r6, lr
 800d7a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d7a4:	5de5      	ldrb	r5, [r4, r7]
 800d7a6:	f015 0508 	ands.w	r5, r5, #8
 800d7aa:	d1f8      	bne.n	800d79e <_strtol_l.isra.0+0x1e>
 800d7ac:	2c2d      	cmp	r4, #45	; 0x2d
 800d7ae:	d134      	bne.n	800d81a <_strtol_l.isra.0+0x9a>
 800d7b0:	f89e 4000 	ldrb.w	r4, [lr]
 800d7b4:	f04f 0801 	mov.w	r8, #1
 800d7b8:	f106 0e02 	add.w	lr, r6, #2
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d05c      	beq.n	800d87a <_strtol_l.isra.0+0xfa>
 800d7c0:	2b10      	cmp	r3, #16
 800d7c2:	d10c      	bne.n	800d7de <_strtol_l.isra.0+0x5e>
 800d7c4:	2c30      	cmp	r4, #48	; 0x30
 800d7c6:	d10a      	bne.n	800d7de <_strtol_l.isra.0+0x5e>
 800d7c8:	f89e 4000 	ldrb.w	r4, [lr]
 800d7cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d7d0:	2c58      	cmp	r4, #88	; 0x58
 800d7d2:	d14d      	bne.n	800d870 <_strtol_l.isra.0+0xf0>
 800d7d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d7d8:	2310      	movs	r3, #16
 800d7da:	f10e 0e02 	add.w	lr, lr, #2
 800d7de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d7e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d7e6:	2600      	movs	r6, #0
 800d7e8:	fbbc f9f3 	udiv	r9, ip, r3
 800d7ec:	4635      	mov	r5, r6
 800d7ee:	fb03 ca19 	mls	sl, r3, r9, ip
 800d7f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d7f6:	2f09      	cmp	r7, #9
 800d7f8:	d818      	bhi.n	800d82c <_strtol_l.isra.0+0xac>
 800d7fa:	463c      	mov	r4, r7
 800d7fc:	42a3      	cmp	r3, r4
 800d7fe:	dd24      	ble.n	800d84a <_strtol_l.isra.0+0xca>
 800d800:	2e00      	cmp	r6, #0
 800d802:	db1f      	blt.n	800d844 <_strtol_l.isra.0+0xc4>
 800d804:	45a9      	cmp	r9, r5
 800d806:	d31d      	bcc.n	800d844 <_strtol_l.isra.0+0xc4>
 800d808:	d101      	bne.n	800d80e <_strtol_l.isra.0+0x8e>
 800d80a:	45a2      	cmp	sl, r4
 800d80c:	db1a      	blt.n	800d844 <_strtol_l.isra.0+0xc4>
 800d80e:	fb05 4503 	mla	r5, r5, r3, r4
 800d812:	2601      	movs	r6, #1
 800d814:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d818:	e7eb      	b.n	800d7f2 <_strtol_l.isra.0+0x72>
 800d81a:	2c2b      	cmp	r4, #43	; 0x2b
 800d81c:	bf08      	it	eq
 800d81e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d822:	46a8      	mov	r8, r5
 800d824:	bf08      	it	eq
 800d826:	f106 0e02 	addeq.w	lr, r6, #2
 800d82a:	e7c7      	b.n	800d7bc <_strtol_l.isra.0+0x3c>
 800d82c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d830:	2f19      	cmp	r7, #25
 800d832:	d801      	bhi.n	800d838 <_strtol_l.isra.0+0xb8>
 800d834:	3c37      	subs	r4, #55	; 0x37
 800d836:	e7e1      	b.n	800d7fc <_strtol_l.isra.0+0x7c>
 800d838:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d83c:	2f19      	cmp	r7, #25
 800d83e:	d804      	bhi.n	800d84a <_strtol_l.isra.0+0xca>
 800d840:	3c57      	subs	r4, #87	; 0x57
 800d842:	e7db      	b.n	800d7fc <_strtol_l.isra.0+0x7c>
 800d844:	f04f 36ff 	mov.w	r6, #4294967295
 800d848:	e7e4      	b.n	800d814 <_strtol_l.isra.0+0x94>
 800d84a:	2e00      	cmp	r6, #0
 800d84c:	da05      	bge.n	800d85a <_strtol_l.isra.0+0xda>
 800d84e:	2322      	movs	r3, #34	; 0x22
 800d850:	6003      	str	r3, [r0, #0]
 800d852:	4665      	mov	r5, ip
 800d854:	b942      	cbnz	r2, 800d868 <_strtol_l.isra.0+0xe8>
 800d856:	4628      	mov	r0, r5
 800d858:	e79d      	b.n	800d796 <_strtol_l.isra.0+0x16>
 800d85a:	f1b8 0f00 	cmp.w	r8, #0
 800d85e:	d000      	beq.n	800d862 <_strtol_l.isra.0+0xe2>
 800d860:	426d      	negs	r5, r5
 800d862:	2a00      	cmp	r2, #0
 800d864:	d0f7      	beq.n	800d856 <_strtol_l.isra.0+0xd6>
 800d866:	b10e      	cbz	r6, 800d86c <_strtol_l.isra.0+0xec>
 800d868:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d86c:	6011      	str	r1, [r2, #0]
 800d86e:	e7f2      	b.n	800d856 <_strtol_l.isra.0+0xd6>
 800d870:	2430      	movs	r4, #48	; 0x30
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1b3      	bne.n	800d7de <_strtol_l.isra.0+0x5e>
 800d876:	2308      	movs	r3, #8
 800d878:	e7b1      	b.n	800d7de <_strtol_l.isra.0+0x5e>
 800d87a:	2c30      	cmp	r4, #48	; 0x30
 800d87c:	d0a4      	beq.n	800d7c8 <_strtol_l.isra.0+0x48>
 800d87e:	230a      	movs	r3, #10
 800d880:	e7ad      	b.n	800d7de <_strtol_l.isra.0+0x5e>
 800d882:	bf00      	nop
 800d884:	08010821 	.word	0x08010821

0800d888 <_strtol_r>:
 800d888:	f7ff bf7a 	b.w	800d780 <_strtol_l.isra.0>

0800d88c <quorem>:
 800d88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d890:	6903      	ldr	r3, [r0, #16]
 800d892:	690c      	ldr	r4, [r1, #16]
 800d894:	42a3      	cmp	r3, r4
 800d896:	4607      	mov	r7, r0
 800d898:	f2c0 8081 	blt.w	800d99e <quorem+0x112>
 800d89c:	3c01      	subs	r4, #1
 800d89e:	f101 0814 	add.w	r8, r1, #20
 800d8a2:	f100 0514 	add.w	r5, r0, #20
 800d8a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8aa:	9301      	str	r3, [sp, #4]
 800d8ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d8b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d8bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d8c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d8c4:	d331      	bcc.n	800d92a <quorem+0x9e>
 800d8c6:	f04f 0e00 	mov.w	lr, #0
 800d8ca:	4640      	mov	r0, r8
 800d8cc:	46ac      	mov	ip, r5
 800d8ce:	46f2      	mov	sl, lr
 800d8d0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d8d4:	b293      	uxth	r3, r2
 800d8d6:	fb06 e303 	mla	r3, r6, r3, lr
 800d8da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	ebaa 0303 	sub.w	r3, sl, r3
 800d8e4:	0c12      	lsrs	r2, r2, #16
 800d8e6:	f8dc a000 	ldr.w	sl, [ip]
 800d8ea:	fb06 e202 	mla	r2, r6, r2, lr
 800d8ee:	fa13 f38a 	uxtah	r3, r3, sl
 800d8f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d8f6:	fa1f fa82 	uxth.w	sl, r2
 800d8fa:	f8dc 2000 	ldr.w	r2, [ip]
 800d8fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d902:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d906:	b29b      	uxth	r3, r3
 800d908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d90c:	4581      	cmp	r9, r0
 800d90e:	f84c 3b04 	str.w	r3, [ip], #4
 800d912:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d916:	d2db      	bcs.n	800d8d0 <quorem+0x44>
 800d918:	f855 300b 	ldr.w	r3, [r5, fp]
 800d91c:	b92b      	cbnz	r3, 800d92a <quorem+0x9e>
 800d91e:	9b01      	ldr	r3, [sp, #4]
 800d920:	3b04      	subs	r3, #4
 800d922:	429d      	cmp	r5, r3
 800d924:	461a      	mov	r2, r3
 800d926:	d32e      	bcc.n	800d986 <quorem+0xfa>
 800d928:	613c      	str	r4, [r7, #16]
 800d92a:	4638      	mov	r0, r7
 800d92c:	f001 fc90 	bl	800f250 <__mcmp>
 800d930:	2800      	cmp	r0, #0
 800d932:	db24      	blt.n	800d97e <quorem+0xf2>
 800d934:	3601      	adds	r6, #1
 800d936:	4628      	mov	r0, r5
 800d938:	f04f 0c00 	mov.w	ip, #0
 800d93c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d940:	f8d0 e000 	ldr.w	lr, [r0]
 800d944:	b293      	uxth	r3, r2
 800d946:	ebac 0303 	sub.w	r3, ip, r3
 800d94a:	0c12      	lsrs	r2, r2, #16
 800d94c:	fa13 f38e 	uxtah	r3, r3, lr
 800d950:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d958:	b29b      	uxth	r3, r3
 800d95a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d95e:	45c1      	cmp	r9, r8
 800d960:	f840 3b04 	str.w	r3, [r0], #4
 800d964:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d968:	d2e8      	bcs.n	800d93c <quorem+0xb0>
 800d96a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d96e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d972:	b922      	cbnz	r2, 800d97e <quorem+0xf2>
 800d974:	3b04      	subs	r3, #4
 800d976:	429d      	cmp	r5, r3
 800d978:	461a      	mov	r2, r3
 800d97a:	d30a      	bcc.n	800d992 <quorem+0x106>
 800d97c:	613c      	str	r4, [r7, #16]
 800d97e:	4630      	mov	r0, r6
 800d980:	b003      	add	sp, #12
 800d982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d986:	6812      	ldr	r2, [r2, #0]
 800d988:	3b04      	subs	r3, #4
 800d98a:	2a00      	cmp	r2, #0
 800d98c:	d1cc      	bne.n	800d928 <quorem+0x9c>
 800d98e:	3c01      	subs	r4, #1
 800d990:	e7c7      	b.n	800d922 <quorem+0x96>
 800d992:	6812      	ldr	r2, [r2, #0]
 800d994:	3b04      	subs	r3, #4
 800d996:	2a00      	cmp	r2, #0
 800d998:	d1f0      	bne.n	800d97c <quorem+0xf0>
 800d99a:	3c01      	subs	r4, #1
 800d99c:	e7eb      	b.n	800d976 <quorem+0xea>
 800d99e:	2000      	movs	r0, #0
 800d9a0:	e7ee      	b.n	800d980 <quorem+0xf4>
 800d9a2:	0000      	movs	r0, r0
 800d9a4:	0000      	movs	r0, r0
	...

0800d9a8 <_dtoa_r>:
 800d9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ac:	ed2d 8b02 	vpush	{d8}
 800d9b0:	ec57 6b10 	vmov	r6, r7, d0
 800d9b4:	b095      	sub	sp, #84	; 0x54
 800d9b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d9b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d9bc:	9105      	str	r1, [sp, #20]
 800d9be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	9209      	str	r2, [sp, #36]	; 0x24
 800d9c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9c8:	b975      	cbnz	r5, 800d9e8 <_dtoa_r+0x40>
 800d9ca:	2010      	movs	r0, #16
 800d9cc:	f7fe f938 	bl	800bc40 <malloc>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	6260      	str	r0, [r4, #36]	; 0x24
 800d9d4:	b920      	cbnz	r0, 800d9e0 <_dtoa_r+0x38>
 800d9d6:	4bb2      	ldr	r3, [pc, #712]	; (800dca0 <_dtoa_r+0x2f8>)
 800d9d8:	21ea      	movs	r1, #234	; 0xea
 800d9da:	48b2      	ldr	r0, [pc, #712]	; (800dca4 <_dtoa_r+0x2fc>)
 800d9dc:	f001 ffc0 	bl	800f960 <__assert_func>
 800d9e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d9e4:	6005      	str	r5, [r0, #0]
 800d9e6:	60c5      	str	r5, [r0, #12]
 800d9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9ea:	6819      	ldr	r1, [r3, #0]
 800d9ec:	b151      	cbz	r1, 800da04 <_dtoa_r+0x5c>
 800d9ee:	685a      	ldr	r2, [r3, #4]
 800d9f0:	604a      	str	r2, [r1, #4]
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	4093      	lsls	r3, r2
 800d9f6:	608b      	str	r3, [r1, #8]
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f001 f9a1 	bl	800ed40 <_Bfree>
 800d9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da00:	2200      	movs	r2, #0
 800da02:	601a      	str	r2, [r3, #0]
 800da04:	1e3b      	subs	r3, r7, #0
 800da06:	bfb9      	ittee	lt
 800da08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800da0c:	9303      	strlt	r3, [sp, #12]
 800da0e:	2300      	movge	r3, #0
 800da10:	f8c8 3000 	strge.w	r3, [r8]
 800da14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800da18:	4ba3      	ldr	r3, [pc, #652]	; (800dca8 <_dtoa_r+0x300>)
 800da1a:	bfbc      	itt	lt
 800da1c:	2201      	movlt	r2, #1
 800da1e:	f8c8 2000 	strlt.w	r2, [r8]
 800da22:	ea33 0309 	bics.w	r3, r3, r9
 800da26:	d11b      	bne.n	800da60 <_dtoa_r+0xb8>
 800da28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da2a:	f242 730f 	movw	r3, #9999	; 0x270f
 800da2e:	6013      	str	r3, [r2, #0]
 800da30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da34:	4333      	orrs	r3, r6
 800da36:	f000 857a 	beq.w	800e52e <_dtoa_r+0xb86>
 800da3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da3c:	b963      	cbnz	r3, 800da58 <_dtoa_r+0xb0>
 800da3e:	4b9b      	ldr	r3, [pc, #620]	; (800dcac <_dtoa_r+0x304>)
 800da40:	e024      	b.n	800da8c <_dtoa_r+0xe4>
 800da42:	4b9b      	ldr	r3, [pc, #620]	; (800dcb0 <_dtoa_r+0x308>)
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	3308      	adds	r3, #8
 800da48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da4a:	6013      	str	r3, [r2, #0]
 800da4c:	9800      	ldr	r0, [sp, #0]
 800da4e:	b015      	add	sp, #84	; 0x54
 800da50:	ecbd 8b02 	vpop	{d8}
 800da54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da58:	4b94      	ldr	r3, [pc, #592]	; (800dcac <_dtoa_r+0x304>)
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	3303      	adds	r3, #3
 800da5e:	e7f3      	b.n	800da48 <_dtoa_r+0xa0>
 800da60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da64:	2200      	movs	r2, #0
 800da66:	ec51 0b17 	vmov	r0, r1, d7
 800da6a:	2300      	movs	r3, #0
 800da6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800da70:	f7f3 f832 	bl	8000ad8 <__aeabi_dcmpeq>
 800da74:	4680      	mov	r8, r0
 800da76:	b158      	cbz	r0, 800da90 <_dtoa_r+0xe8>
 800da78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da7a:	2301      	movs	r3, #1
 800da7c:	6013      	str	r3, [r2, #0]
 800da7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da80:	2b00      	cmp	r3, #0
 800da82:	f000 8551 	beq.w	800e528 <_dtoa_r+0xb80>
 800da86:	488b      	ldr	r0, [pc, #556]	; (800dcb4 <_dtoa_r+0x30c>)
 800da88:	6018      	str	r0, [r3, #0]
 800da8a:	1e43      	subs	r3, r0, #1
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	e7dd      	b.n	800da4c <_dtoa_r+0xa4>
 800da90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800da94:	aa12      	add	r2, sp, #72	; 0x48
 800da96:	a913      	add	r1, sp, #76	; 0x4c
 800da98:	4620      	mov	r0, r4
 800da9a:	f001 fcf9 	bl	800f490 <__d2b>
 800da9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800daa2:	4683      	mov	fp, r0
 800daa4:	2d00      	cmp	r5, #0
 800daa6:	d07c      	beq.n	800dba2 <_dtoa_r+0x1fa>
 800daa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daaa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800daae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dab2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800dab6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800daba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dabe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dac2:	4b7d      	ldr	r3, [pc, #500]	; (800dcb8 <_dtoa_r+0x310>)
 800dac4:	2200      	movs	r2, #0
 800dac6:	4630      	mov	r0, r6
 800dac8:	4639      	mov	r1, r7
 800daca:	f7f2 fbe5 	bl	8000298 <__aeabi_dsub>
 800dace:	a36e      	add	r3, pc, #440	; (adr r3, 800dc88 <_dtoa_r+0x2e0>)
 800dad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad4:	f7f2 fd98 	bl	8000608 <__aeabi_dmul>
 800dad8:	a36d      	add	r3, pc, #436	; (adr r3, 800dc90 <_dtoa_r+0x2e8>)
 800dada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dade:	f7f2 fbdd 	bl	800029c <__adddf3>
 800dae2:	4606      	mov	r6, r0
 800dae4:	4628      	mov	r0, r5
 800dae6:	460f      	mov	r7, r1
 800dae8:	f7f2 fd24 	bl	8000534 <__aeabi_i2d>
 800daec:	a36a      	add	r3, pc, #424	; (adr r3, 800dc98 <_dtoa_r+0x2f0>)
 800daee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf2:	f7f2 fd89 	bl	8000608 <__aeabi_dmul>
 800daf6:	4602      	mov	r2, r0
 800daf8:	460b      	mov	r3, r1
 800dafa:	4630      	mov	r0, r6
 800dafc:	4639      	mov	r1, r7
 800dafe:	f7f2 fbcd 	bl	800029c <__adddf3>
 800db02:	4606      	mov	r6, r0
 800db04:	460f      	mov	r7, r1
 800db06:	f7f3 f82f 	bl	8000b68 <__aeabi_d2iz>
 800db0a:	2200      	movs	r2, #0
 800db0c:	4682      	mov	sl, r0
 800db0e:	2300      	movs	r3, #0
 800db10:	4630      	mov	r0, r6
 800db12:	4639      	mov	r1, r7
 800db14:	f7f2 ffea 	bl	8000aec <__aeabi_dcmplt>
 800db18:	b148      	cbz	r0, 800db2e <_dtoa_r+0x186>
 800db1a:	4650      	mov	r0, sl
 800db1c:	f7f2 fd0a 	bl	8000534 <__aeabi_i2d>
 800db20:	4632      	mov	r2, r6
 800db22:	463b      	mov	r3, r7
 800db24:	f7f2 ffd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800db28:	b908      	cbnz	r0, 800db2e <_dtoa_r+0x186>
 800db2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db2e:	f1ba 0f16 	cmp.w	sl, #22
 800db32:	d854      	bhi.n	800dbde <_dtoa_r+0x236>
 800db34:	4b61      	ldr	r3, [pc, #388]	; (800dcbc <_dtoa_r+0x314>)
 800db36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800db3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db42:	f7f2 ffd3 	bl	8000aec <__aeabi_dcmplt>
 800db46:	2800      	cmp	r0, #0
 800db48:	d04b      	beq.n	800dbe2 <_dtoa_r+0x23a>
 800db4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db4e:	2300      	movs	r3, #0
 800db50:	930e      	str	r3, [sp, #56]	; 0x38
 800db52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db54:	1b5d      	subs	r5, r3, r5
 800db56:	1e6b      	subs	r3, r5, #1
 800db58:	9304      	str	r3, [sp, #16]
 800db5a:	bf43      	ittte	mi
 800db5c:	2300      	movmi	r3, #0
 800db5e:	f1c5 0801 	rsbmi	r8, r5, #1
 800db62:	9304      	strmi	r3, [sp, #16]
 800db64:	f04f 0800 	movpl.w	r8, #0
 800db68:	f1ba 0f00 	cmp.w	sl, #0
 800db6c:	db3b      	blt.n	800dbe6 <_dtoa_r+0x23e>
 800db6e:	9b04      	ldr	r3, [sp, #16]
 800db70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800db74:	4453      	add	r3, sl
 800db76:	9304      	str	r3, [sp, #16]
 800db78:	2300      	movs	r3, #0
 800db7a:	9306      	str	r3, [sp, #24]
 800db7c:	9b05      	ldr	r3, [sp, #20]
 800db7e:	2b09      	cmp	r3, #9
 800db80:	d869      	bhi.n	800dc56 <_dtoa_r+0x2ae>
 800db82:	2b05      	cmp	r3, #5
 800db84:	bfc4      	itt	gt
 800db86:	3b04      	subgt	r3, #4
 800db88:	9305      	strgt	r3, [sp, #20]
 800db8a:	9b05      	ldr	r3, [sp, #20]
 800db8c:	f1a3 0302 	sub.w	r3, r3, #2
 800db90:	bfcc      	ite	gt
 800db92:	2500      	movgt	r5, #0
 800db94:	2501      	movle	r5, #1
 800db96:	2b03      	cmp	r3, #3
 800db98:	d869      	bhi.n	800dc6e <_dtoa_r+0x2c6>
 800db9a:	e8df f003 	tbb	[pc, r3]
 800db9e:	4e2c      	.short	0x4e2c
 800dba0:	5a4c      	.short	0x5a4c
 800dba2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dba6:	441d      	add	r5, r3
 800dba8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dbac:	2b20      	cmp	r3, #32
 800dbae:	bfc1      	itttt	gt
 800dbb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dbb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dbb8:	fa09 f303 	lslgt.w	r3, r9, r3
 800dbbc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dbc0:	bfda      	itte	le
 800dbc2:	f1c3 0320 	rsble	r3, r3, #32
 800dbc6:	fa06 f003 	lslle.w	r0, r6, r3
 800dbca:	4318      	orrgt	r0, r3
 800dbcc:	f7f2 fca2 	bl	8000514 <__aeabi_ui2d>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dbd8:	3d01      	subs	r5, #1
 800dbda:	9310      	str	r3, [sp, #64]	; 0x40
 800dbdc:	e771      	b.n	800dac2 <_dtoa_r+0x11a>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e7b6      	b.n	800db50 <_dtoa_r+0x1a8>
 800dbe2:	900e      	str	r0, [sp, #56]	; 0x38
 800dbe4:	e7b5      	b.n	800db52 <_dtoa_r+0x1aa>
 800dbe6:	f1ca 0300 	rsb	r3, sl, #0
 800dbea:	9306      	str	r3, [sp, #24]
 800dbec:	2300      	movs	r3, #0
 800dbee:	eba8 080a 	sub.w	r8, r8, sl
 800dbf2:	930d      	str	r3, [sp, #52]	; 0x34
 800dbf4:	e7c2      	b.n	800db7c <_dtoa_r+0x1d4>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	9308      	str	r3, [sp, #32]
 800dbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	dc39      	bgt.n	800dc74 <_dtoa_r+0x2cc>
 800dc00:	f04f 0901 	mov.w	r9, #1
 800dc04:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc08:	464b      	mov	r3, r9
 800dc0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dc0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dc10:	2200      	movs	r2, #0
 800dc12:	6042      	str	r2, [r0, #4]
 800dc14:	2204      	movs	r2, #4
 800dc16:	f102 0614 	add.w	r6, r2, #20
 800dc1a:	429e      	cmp	r6, r3
 800dc1c:	6841      	ldr	r1, [r0, #4]
 800dc1e:	d92f      	bls.n	800dc80 <_dtoa_r+0x2d8>
 800dc20:	4620      	mov	r0, r4
 800dc22:	f001 f84d 	bl	800ecc0 <_Balloc>
 800dc26:	9000      	str	r0, [sp, #0]
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d14b      	bne.n	800dcc4 <_dtoa_r+0x31c>
 800dc2c:	4b24      	ldr	r3, [pc, #144]	; (800dcc0 <_dtoa_r+0x318>)
 800dc2e:	4602      	mov	r2, r0
 800dc30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dc34:	e6d1      	b.n	800d9da <_dtoa_r+0x32>
 800dc36:	2301      	movs	r3, #1
 800dc38:	e7de      	b.n	800dbf8 <_dtoa_r+0x250>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	9308      	str	r3, [sp, #32]
 800dc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc40:	eb0a 0903 	add.w	r9, sl, r3
 800dc44:	f109 0301 	add.w	r3, r9, #1
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	9301      	str	r3, [sp, #4]
 800dc4c:	bfb8      	it	lt
 800dc4e:	2301      	movlt	r3, #1
 800dc50:	e7dd      	b.n	800dc0e <_dtoa_r+0x266>
 800dc52:	2301      	movs	r3, #1
 800dc54:	e7f2      	b.n	800dc3c <_dtoa_r+0x294>
 800dc56:	2501      	movs	r5, #1
 800dc58:	2300      	movs	r3, #0
 800dc5a:	9305      	str	r3, [sp, #20]
 800dc5c:	9508      	str	r5, [sp, #32]
 800dc5e:	f04f 39ff 	mov.w	r9, #4294967295
 800dc62:	2200      	movs	r2, #0
 800dc64:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc68:	2312      	movs	r3, #18
 800dc6a:	9209      	str	r2, [sp, #36]	; 0x24
 800dc6c:	e7cf      	b.n	800dc0e <_dtoa_r+0x266>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	9308      	str	r3, [sp, #32]
 800dc72:	e7f4      	b.n	800dc5e <_dtoa_r+0x2b6>
 800dc74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dc78:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc7c:	464b      	mov	r3, r9
 800dc7e:	e7c6      	b.n	800dc0e <_dtoa_r+0x266>
 800dc80:	3101      	adds	r1, #1
 800dc82:	6041      	str	r1, [r0, #4]
 800dc84:	0052      	lsls	r2, r2, #1
 800dc86:	e7c6      	b.n	800dc16 <_dtoa_r+0x26e>
 800dc88:	636f4361 	.word	0x636f4361
 800dc8c:	3fd287a7 	.word	0x3fd287a7
 800dc90:	8b60c8b3 	.word	0x8b60c8b3
 800dc94:	3fc68a28 	.word	0x3fc68a28
 800dc98:	509f79fb 	.word	0x509f79fb
 800dc9c:	3fd34413 	.word	0x3fd34413
 800dca0:	0801092e 	.word	0x0801092e
 800dca4:	08010945 	.word	0x08010945
 800dca8:	7ff00000 	.word	0x7ff00000
 800dcac:	0801092a 	.word	0x0801092a
 800dcb0:	08010921 	.word	0x08010921
 800dcb4:	080107a1 	.word	0x080107a1
 800dcb8:	3ff80000 	.word	0x3ff80000
 800dcbc:	08010ac0 	.word	0x08010ac0
 800dcc0:	080109a4 	.word	0x080109a4
 800dcc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcc6:	9a00      	ldr	r2, [sp, #0]
 800dcc8:	601a      	str	r2, [r3, #0]
 800dcca:	9b01      	ldr	r3, [sp, #4]
 800dccc:	2b0e      	cmp	r3, #14
 800dcce:	f200 80ad 	bhi.w	800de2c <_dtoa_r+0x484>
 800dcd2:	2d00      	cmp	r5, #0
 800dcd4:	f000 80aa 	beq.w	800de2c <_dtoa_r+0x484>
 800dcd8:	f1ba 0f00 	cmp.w	sl, #0
 800dcdc:	dd36      	ble.n	800dd4c <_dtoa_r+0x3a4>
 800dcde:	4ac3      	ldr	r2, [pc, #780]	; (800dfec <_dtoa_r+0x644>)
 800dce0:	f00a 030f 	and.w	r3, sl, #15
 800dce4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dce8:	ed93 7b00 	vldr	d7, [r3]
 800dcec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800dcf0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800dcf4:	eeb0 8a47 	vmov.f32	s16, s14
 800dcf8:	eef0 8a67 	vmov.f32	s17, s15
 800dcfc:	d016      	beq.n	800dd2c <_dtoa_r+0x384>
 800dcfe:	4bbc      	ldr	r3, [pc, #752]	; (800dff0 <_dtoa_r+0x648>)
 800dd00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd08:	f7f2 fda8 	bl	800085c <__aeabi_ddiv>
 800dd0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd10:	f007 070f 	and.w	r7, r7, #15
 800dd14:	2503      	movs	r5, #3
 800dd16:	4eb6      	ldr	r6, [pc, #728]	; (800dff0 <_dtoa_r+0x648>)
 800dd18:	b957      	cbnz	r7, 800dd30 <_dtoa_r+0x388>
 800dd1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd1e:	ec53 2b18 	vmov	r2, r3, d8
 800dd22:	f7f2 fd9b 	bl	800085c <__aeabi_ddiv>
 800dd26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd2a:	e029      	b.n	800dd80 <_dtoa_r+0x3d8>
 800dd2c:	2502      	movs	r5, #2
 800dd2e:	e7f2      	b.n	800dd16 <_dtoa_r+0x36e>
 800dd30:	07f9      	lsls	r1, r7, #31
 800dd32:	d508      	bpl.n	800dd46 <_dtoa_r+0x39e>
 800dd34:	ec51 0b18 	vmov	r0, r1, d8
 800dd38:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dd3c:	f7f2 fc64 	bl	8000608 <__aeabi_dmul>
 800dd40:	ec41 0b18 	vmov	d8, r0, r1
 800dd44:	3501      	adds	r5, #1
 800dd46:	107f      	asrs	r7, r7, #1
 800dd48:	3608      	adds	r6, #8
 800dd4a:	e7e5      	b.n	800dd18 <_dtoa_r+0x370>
 800dd4c:	f000 80a6 	beq.w	800de9c <_dtoa_r+0x4f4>
 800dd50:	f1ca 0600 	rsb	r6, sl, #0
 800dd54:	4ba5      	ldr	r3, [pc, #660]	; (800dfec <_dtoa_r+0x644>)
 800dd56:	4fa6      	ldr	r7, [pc, #664]	; (800dff0 <_dtoa_r+0x648>)
 800dd58:	f006 020f 	and.w	r2, r6, #15
 800dd5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd68:	f7f2 fc4e 	bl	8000608 <__aeabi_dmul>
 800dd6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd70:	1136      	asrs	r6, r6, #4
 800dd72:	2300      	movs	r3, #0
 800dd74:	2502      	movs	r5, #2
 800dd76:	2e00      	cmp	r6, #0
 800dd78:	f040 8085 	bne.w	800de86 <_dtoa_r+0x4de>
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1d2      	bne.n	800dd26 <_dtoa_r+0x37e>
 800dd80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f000 808c 	beq.w	800dea0 <_dtoa_r+0x4f8>
 800dd88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dd8c:	4b99      	ldr	r3, [pc, #612]	; (800dff4 <_dtoa_r+0x64c>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	4630      	mov	r0, r6
 800dd92:	4639      	mov	r1, r7
 800dd94:	f7f2 feaa 	bl	8000aec <__aeabi_dcmplt>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	f000 8081 	beq.w	800dea0 <_dtoa_r+0x4f8>
 800dd9e:	9b01      	ldr	r3, [sp, #4]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d07d      	beq.n	800dea0 <_dtoa_r+0x4f8>
 800dda4:	f1b9 0f00 	cmp.w	r9, #0
 800dda8:	dd3c      	ble.n	800de24 <_dtoa_r+0x47c>
 800ddaa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ddae:	9307      	str	r3, [sp, #28]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4b91      	ldr	r3, [pc, #580]	; (800dff8 <_dtoa_r+0x650>)
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	4639      	mov	r1, r7
 800ddb8:	f7f2 fc26 	bl	8000608 <__aeabi_dmul>
 800ddbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddc0:	3501      	adds	r5, #1
 800ddc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ddc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ddca:	4628      	mov	r0, r5
 800ddcc:	f7f2 fbb2 	bl	8000534 <__aeabi_i2d>
 800ddd0:	4632      	mov	r2, r6
 800ddd2:	463b      	mov	r3, r7
 800ddd4:	f7f2 fc18 	bl	8000608 <__aeabi_dmul>
 800ddd8:	4b88      	ldr	r3, [pc, #544]	; (800dffc <_dtoa_r+0x654>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	f7f2 fa5e 	bl	800029c <__adddf3>
 800dde0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dde4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dde8:	9303      	str	r3, [sp, #12]
 800ddea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d15c      	bne.n	800deaa <_dtoa_r+0x502>
 800ddf0:	4b83      	ldr	r3, [pc, #524]	; (800e000 <_dtoa_r+0x658>)
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	f7f2 fa4e 	bl	8000298 <__aeabi_dsub>
 800ddfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de00:	4606      	mov	r6, r0
 800de02:	460f      	mov	r7, r1
 800de04:	f7f2 fe90 	bl	8000b28 <__aeabi_dcmpgt>
 800de08:	2800      	cmp	r0, #0
 800de0a:	f040 8296 	bne.w	800e33a <_dtoa_r+0x992>
 800de0e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800de12:	4630      	mov	r0, r6
 800de14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de18:	4639      	mov	r1, r7
 800de1a:	f7f2 fe67 	bl	8000aec <__aeabi_dcmplt>
 800de1e:	2800      	cmp	r0, #0
 800de20:	f040 8288 	bne.w	800e334 <_dtoa_r+0x98c>
 800de24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800de2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f2c0 8158 	blt.w	800e0e4 <_dtoa_r+0x73c>
 800de34:	f1ba 0f0e 	cmp.w	sl, #14
 800de38:	f300 8154 	bgt.w	800e0e4 <_dtoa_r+0x73c>
 800de3c:	4b6b      	ldr	r3, [pc, #428]	; (800dfec <_dtoa_r+0x644>)
 800de3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800de42:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f280 80e3 	bge.w	800e014 <_dtoa_r+0x66c>
 800de4e:	9b01      	ldr	r3, [sp, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	f300 80df 	bgt.w	800e014 <_dtoa_r+0x66c>
 800de56:	f040 826d 	bne.w	800e334 <_dtoa_r+0x98c>
 800de5a:	4b69      	ldr	r3, [pc, #420]	; (800e000 <_dtoa_r+0x658>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	4640      	mov	r0, r8
 800de60:	4649      	mov	r1, r9
 800de62:	f7f2 fbd1 	bl	8000608 <__aeabi_dmul>
 800de66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de6a:	f7f2 fe53 	bl	8000b14 <__aeabi_dcmpge>
 800de6e:	9e01      	ldr	r6, [sp, #4]
 800de70:	4637      	mov	r7, r6
 800de72:	2800      	cmp	r0, #0
 800de74:	f040 8243 	bne.w	800e2fe <_dtoa_r+0x956>
 800de78:	9d00      	ldr	r5, [sp, #0]
 800de7a:	2331      	movs	r3, #49	; 0x31
 800de7c:	f805 3b01 	strb.w	r3, [r5], #1
 800de80:	f10a 0a01 	add.w	sl, sl, #1
 800de84:	e23f      	b.n	800e306 <_dtoa_r+0x95e>
 800de86:	07f2      	lsls	r2, r6, #31
 800de88:	d505      	bpl.n	800de96 <_dtoa_r+0x4ee>
 800de8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de8e:	f7f2 fbbb 	bl	8000608 <__aeabi_dmul>
 800de92:	3501      	adds	r5, #1
 800de94:	2301      	movs	r3, #1
 800de96:	1076      	asrs	r6, r6, #1
 800de98:	3708      	adds	r7, #8
 800de9a:	e76c      	b.n	800dd76 <_dtoa_r+0x3ce>
 800de9c:	2502      	movs	r5, #2
 800de9e:	e76f      	b.n	800dd80 <_dtoa_r+0x3d8>
 800dea0:	9b01      	ldr	r3, [sp, #4]
 800dea2:	f8cd a01c 	str.w	sl, [sp, #28]
 800dea6:	930c      	str	r3, [sp, #48]	; 0x30
 800dea8:	e78d      	b.n	800ddc6 <_dtoa_r+0x41e>
 800deaa:	9900      	ldr	r1, [sp, #0]
 800deac:	980c      	ldr	r0, [sp, #48]	; 0x30
 800deae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800deb0:	4b4e      	ldr	r3, [pc, #312]	; (800dfec <_dtoa_r+0x644>)
 800deb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800deb6:	4401      	add	r1, r0
 800deb8:	9102      	str	r1, [sp, #8]
 800deba:	9908      	ldr	r1, [sp, #32]
 800debc:	eeb0 8a47 	vmov.f32	s16, s14
 800dec0:	eef0 8a67 	vmov.f32	s17, s15
 800dec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dec8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800decc:	2900      	cmp	r1, #0
 800dece:	d045      	beq.n	800df5c <_dtoa_r+0x5b4>
 800ded0:	494c      	ldr	r1, [pc, #304]	; (800e004 <_dtoa_r+0x65c>)
 800ded2:	2000      	movs	r0, #0
 800ded4:	f7f2 fcc2 	bl	800085c <__aeabi_ddiv>
 800ded8:	ec53 2b18 	vmov	r2, r3, d8
 800dedc:	f7f2 f9dc 	bl	8000298 <__aeabi_dsub>
 800dee0:	9d00      	ldr	r5, [sp, #0]
 800dee2:	ec41 0b18 	vmov	d8, r0, r1
 800dee6:	4639      	mov	r1, r7
 800dee8:	4630      	mov	r0, r6
 800deea:	f7f2 fe3d 	bl	8000b68 <__aeabi_d2iz>
 800deee:	900c      	str	r0, [sp, #48]	; 0x30
 800def0:	f7f2 fb20 	bl	8000534 <__aeabi_i2d>
 800def4:	4602      	mov	r2, r0
 800def6:	460b      	mov	r3, r1
 800def8:	4630      	mov	r0, r6
 800defa:	4639      	mov	r1, r7
 800defc:	f7f2 f9cc 	bl	8000298 <__aeabi_dsub>
 800df00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df02:	3330      	adds	r3, #48	; 0x30
 800df04:	f805 3b01 	strb.w	r3, [r5], #1
 800df08:	ec53 2b18 	vmov	r2, r3, d8
 800df0c:	4606      	mov	r6, r0
 800df0e:	460f      	mov	r7, r1
 800df10:	f7f2 fdec 	bl	8000aec <__aeabi_dcmplt>
 800df14:	2800      	cmp	r0, #0
 800df16:	d165      	bne.n	800dfe4 <_dtoa_r+0x63c>
 800df18:	4632      	mov	r2, r6
 800df1a:	463b      	mov	r3, r7
 800df1c:	4935      	ldr	r1, [pc, #212]	; (800dff4 <_dtoa_r+0x64c>)
 800df1e:	2000      	movs	r0, #0
 800df20:	f7f2 f9ba 	bl	8000298 <__aeabi_dsub>
 800df24:	ec53 2b18 	vmov	r2, r3, d8
 800df28:	f7f2 fde0 	bl	8000aec <__aeabi_dcmplt>
 800df2c:	2800      	cmp	r0, #0
 800df2e:	f040 80b9 	bne.w	800e0a4 <_dtoa_r+0x6fc>
 800df32:	9b02      	ldr	r3, [sp, #8]
 800df34:	429d      	cmp	r5, r3
 800df36:	f43f af75 	beq.w	800de24 <_dtoa_r+0x47c>
 800df3a:	4b2f      	ldr	r3, [pc, #188]	; (800dff8 <_dtoa_r+0x650>)
 800df3c:	ec51 0b18 	vmov	r0, r1, d8
 800df40:	2200      	movs	r2, #0
 800df42:	f7f2 fb61 	bl	8000608 <__aeabi_dmul>
 800df46:	4b2c      	ldr	r3, [pc, #176]	; (800dff8 <_dtoa_r+0x650>)
 800df48:	ec41 0b18 	vmov	d8, r0, r1
 800df4c:	2200      	movs	r2, #0
 800df4e:	4630      	mov	r0, r6
 800df50:	4639      	mov	r1, r7
 800df52:	f7f2 fb59 	bl	8000608 <__aeabi_dmul>
 800df56:	4606      	mov	r6, r0
 800df58:	460f      	mov	r7, r1
 800df5a:	e7c4      	b.n	800dee6 <_dtoa_r+0x53e>
 800df5c:	ec51 0b17 	vmov	r0, r1, d7
 800df60:	f7f2 fb52 	bl	8000608 <__aeabi_dmul>
 800df64:	9b02      	ldr	r3, [sp, #8]
 800df66:	9d00      	ldr	r5, [sp, #0]
 800df68:	930c      	str	r3, [sp, #48]	; 0x30
 800df6a:	ec41 0b18 	vmov	d8, r0, r1
 800df6e:	4639      	mov	r1, r7
 800df70:	4630      	mov	r0, r6
 800df72:	f7f2 fdf9 	bl	8000b68 <__aeabi_d2iz>
 800df76:	9011      	str	r0, [sp, #68]	; 0x44
 800df78:	f7f2 fadc 	bl	8000534 <__aeabi_i2d>
 800df7c:	4602      	mov	r2, r0
 800df7e:	460b      	mov	r3, r1
 800df80:	4630      	mov	r0, r6
 800df82:	4639      	mov	r1, r7
 800df84:	f7f2 f988 	bl	8000298 <__aeabi_dsub>
 800df88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df8a:	3330      	adds	r3, #48	; 0x30
 800df8c:	f805 3b01 	strb.w	r3, [r5], #1
 800df90:	9b02      	ldr	r3, [sp, #8]
 800df92:	429d      	cmp	r5, r3
 800df94:	4606      	mov	r6, r0
 800df96:	460f      	mov	r7, r1
 800df98:	f04f 0200 	mov.w	r2, #0
 800df9c:	d134      	bne.n	800e008 <_dtoa_r+0x660>
 800df9e:	4b19      	ldr	r3, [pc, #100]	; (800e004 <_dtoa_r+0x65c>)
 800dfa0:	ec51 0b18 	vmov	r0, r1, d8
 800dfa4:	f7f2 f97a 	bl	800029c <__adddf3>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	4630      	mov	r0, r6
 800dfae:	4639      	mov	r1, r7
 800dfb0:	f7f2 fdba 	bl	8000b28 <__aeabi_dcmpgt>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d175      	bne.n	800e0a4 <_dtoa_r+0x6fc>
 800dfb8:	ec53 2b18 	vmov	r2, r3, d8
 800dfbc:	4911      	ldr	r1, [pc, #68]	; (800e004 <_dtoa_r+0x65c>)
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	f7f2 f96a 	bl	8000298 <__aeabi_dsub>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	4630      	mov	r0, r6
 800dfca:	4639      	mov	r1, r7
 800dfcc:	f7f2 fd8e 	bl	8000aec <__aeabi_dcmplt>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	f43f af27 	beq.w	800de24 <_dtoa_r+0x47c>
 800dfd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dfd8:	1e6b      	subs	r3, r5, #1
 800dfda:	930c      	str	r3, [sp, #48]	; 0x30
 800dfdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dfe0:	2b30      	cmp	r3, #48	; 0x30
 800dfe2:	d0f8      	beq.n	800dfd6 <_dtoa_r+0x62e>
 800dfe4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dfe8:	e04a      	b.n	800e080 <_dtoa_r+0x6d8>
 800dfea:	bf00      	nop
 800dfec:	08010ac0 	.word	0x08010ac0
 800dff0:	08010a98 	.word	0x08010a98
 800dff4:	3ff00000 	.word	0x3ff00000
 800dff8:	40240000 	.word	0x40240000
 800dffc:	401c0000 	.word	0x401c0000
 800e000:	40140000 	.word	0x40140000
 800e004:	3fe00000 	.word	0x3fe00000
 800e008:	4baf      	ldr	r3, [pc, #700]	; (800e2c8 <_dtoa_r+0x920>)
 800e00a:	f7f2 fafd 	bl	8000608 <__aeabi_dmul>
 800e00e:	4606      	mov	r6, r0
 800e010:	460f      	mov	r7, r1
 800e012:	e7ac      	b.n	800df6e <_dtoa_r+0x5c6>
 800e014:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e018:	9d00      	ldr	r5, [sp, #0]
 800e01a:	4642      	mov	r2, r8
 800e01c:	464b      	mov	r3, r9
 800e01e:	4630      	mov	r0, r6
 800e020:	4639      	mov	r1, r7
 800e022:	f7f2 fc1b 	bl	800085c <__aeabi_ddiv>
 800e026:	f7f2 fd9f 	bl	8000b68 <__aeabi_d2iz>
 800e02a:	9002      	str	r0, [sp, #8]
 800e02c:	f7f2 fa82 	bl	8000534 <__aeabi_i2d>
 800e030:	4642      	mov	r2, r8
 800e032:	464b      	mov	r3, r9
 800e034:	f7f2 fae8 	bl	8000608 <__aeabi_dmul>
 800e038:	4602      	mov	r2, r0
 800e03a:	460b      	mov	r3, r1
 800e03c:	4630      	mov	r0, r6
 800e03e:	4639      	mov	r1, r7
 800e040:	f7f2 f92a 	bl	8000298 <__aeabi_dsub>
 800e044:	9e02      	ldr	r6, [sp, #8]
 800e046:	9f01      	ldr	r7, [sp, #4]
 800e048:	3630      	adds	r6, #48	; 0x30
 800e04a:	f805 6b01 	strb.w	r6, [r5], #1
 800e04e:	9e00      	ldr	r6, [sp, #0]
 800e050:	1bae      	subs	r6, r5, r6
 800e052:	42b7      	cmp	r7, r6
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	d137      	bne.n	800e0ca <_dtoa_r+0x722>
 800e05a:	f7f2 f91f 	bl	800029c <__adddf3>
 800e05e:	4642      	mov	r2, r8
 800e060:	464b      	mov	r3, r9
 800e062:	4606      	mov	r6, r0
 800e064:	460f      	mov	r7, r1
 800e066:	f7f2 fd5f 	bl	8000b28 <__aeabi_dcmpgt>
 800e06a:	b9c8      	cbnz	r0, 800e0a0 <_dtoa_r+0x6f8>
 800e06c:	4642      	mov	r2, r8
 800e06e:	464b      	mov	r3, r9
 800e070:	4630      	mov	r0, r6
 800e072:	4639      	mov	r1, r7
 800e074:	f7f2 fd30 	bl	8000ad8 <__aeabi_dcmpeq>
 800e078:	b110      	cbz	r0, 800e080 <_dtoa_r+0x6d8>
 800e07a:	9b02      	ldr	r3, [sp, #8]
 800e07c:	07d9      	lsls	r1, r3, #31
 800e07e:	d40f      	bmi.n	800e0a0 <_dtoa_r+0x6f8>
 800e080:	4620      	mov	r0, r4
 800e082:	4659      	mov	r1, fp
 800e084:	f000 fe5c 	bl	800ed40 <_Bfree>
 800e088:	2300      	movs	r3, #0
 800e08a:	702b      	strb	r3, [r5, #0]
 800e08c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e08e:	f10a 0001 	add.w	r0, sl, #1
 800e092:	6018      	str	r0, [r3, #0]
 800e094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e096:	2b00      	cmp	r3, #0
 800e098:	f43f acd8 	beq.w	800da4c <_dtoa_r+0xa4>
 800e09c:	601d      	str	r5, [r3, #0]
 800e09e:	e4d5      	b.n	800da4c <_dtoa_r+0xa4>
 800e0a0:	f8cd a01c 	str.w	sl, [sp, #28]
 800e0a4:	462b      	mov	r3, r5
 800e0a6:	461d      	mov	r5, r3
 800e0a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0ac:	2a39      	cmp	r2, #57	; 0x39
 800e0ae:	d108      	bne.n	800e0c2 <_dtoa_r+0x71a>
 800e0b0:	9a00      	ldr	r2, [sp, #0]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d1f7      	bne.n	800e0a6 <_dtoa_r+0x6fe>
 800e0b6:	9a07      	ldr	r2, [sp, #28]
 800e0b8:	9900      	ldr	r1, [sp, #0]
 800e0ba:	3201      	adds	r2, #1
 800e0bc:	9207      	str	r2, [sp, #28]
 800e0be:	2230      	movs	r2, #48	; 0x30
 800e0c0:	700a      	strb	r2, [r1, #0]
 800e0c2:	781a      	ldrb	r2, [r3, #0]
 800e0c4:	3201      	adds	r2, #1
 800e0c6:	701a      	strb	r2, [r3, #0]
 800e0c8:	e78c      	b.n	800dfe4 <_dtoa_r+0x63c>
 800e0ca:	4b7f      	ldr	r3, [pc, #508]	; (800e2c8 <_dtoa_r+0x920>)
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f7f2 fa9b 	bl	8000608 <__aeabi_dmul>
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	4606      	mov	r6, r0
 800e0d8:	460f      	mov	r7, r1
 800e0da:	f7f2 fcfd 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d09b      	beq.n	800e01a <_dtoa_r+0x672>
 800e0e2:	e7cd      	b.n	800e080 <_dtoa_r+0x6d8>
 800e0e4:	9a08      	ldr	r2, [sp, #32]
 800e0e6:	2a00      	cmp	r2, #0
 800e0e8:	f000 80c4 	beq.w	800e274 <_dtoa_r+0x8cc>
 800e0ec:	9a05      	ldr	r2, [sp, #20]
 800e0ee:	2a01      	cmp	r2, #1
 800e0f0:	f300 80a8 	bgt.w	800e244 <_dtoa_r+0x89c>
 800e0f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0f6:	2a00      	cmp	r2, #0
 800e0f8:	f000 80a0 	beq.w	800e23c <_dtoa_r+0x894>
 800e0fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e100:	9e06      	ldr	r6, [sp, #24]
 800e102:	4645      	mov	r5, r8
 800e104:	9a04      	ldr	r2, [sp, #16]
 800e106:	2101      	movs	r1, #1
 800e108:	441a      	add	r2, r3
 800e10a:	4620      	mov	r0, r4
 800e10c:	4498      	add	r8, r3
 800e10e:	9204      	str	r2, [sp, #16]
 800e110:	f000 ff1c 	bl	800ef4c <__i2b>
 800e114:	4607      	mov	r7, r0
 800e116:	2d00      	cmp	r5, #0
 800e118:	dd0b      	ble.n	800e132 <_dtoa_r+0x78a>
 800e11a:	9b04      	ldr	r3, [sp, #16]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	dd08      	ble.n	800e132 <_dtoa_r+0x78a>
 800e120:	42ab      	cmp	r3, r5
 800e122:	9a04      	ldr	r2, [sp, #16]
 800e124:	bfa8      	it	ge
 800e126:	462b      	movge	r3, r5
 800e128:	eba8 0803 	sub.w	r8, r8, r3
 800e12c:	1aed      	subs	r5, r5, r3
 800e12e:	1ad3      	subs	r3, r2, r3
 800e130:	9304      	str	r3, [sp, #16]
 800e132:	9b06      	ldr	r3, [sp, #24]
 800e134:	b1fb      	cbz	r3, 800e176 <_dtoa_r+0x7ce>
 800e136:	9b08      	ldr	r3, [sp, #32]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f000 809f 	beq.w	800e27c <_dtoa_r+0x8d4>
 800e13e:	2e00      	cmp	r6, #0
 800e140:	dd11      	ble.n	800e166 <_dtoa_r+0x7be>
 800e142:	4639      	mov	r1, r7
 800e144:	4632      	mov	r2, r6
 800e146:	4620      	mov	r0, r4
 800e148:	f000 ffbc 	bl	800f0c4 <__pow5mult>
 800e14c:	465a      	mov	r2, fp
 800e14e:	4601      	mov	r1, r0
 800e150:	4607      	mov	r7, r0
 800e152:	4620      	mov	r0, r4
 800e154:	f000 ff10 	bl	800ef78 <__multiply>
 800e158:	4659      	mov	r1, fp
 800e15a:	9007      	str	r0, [sp, #28]
 800e15c:	4620      	mov	r0, r4
 800e15e:	f000 fdef 	bl	800ed40 <_Bfree>
 800e162:	9b07      	ldr	r3, [sp, #28]
 800e164:	469b      	mov	fp, r3
 800e166:	9b06      	ldr	r3, [sp, #24]
 800e168:	1b9a      	subs	r2, r3, r6
 800e16a:	d004      	beq.n	800e176 <_dtoa_r+0x7ce>
 800e16c:	4659      	mov	r1, fp
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 ffa8 	bl	800f0c4 <__pow5mult>
 800e174:	4683      	mov	fp, r0
 800e176:	2101      	movs	r1, #1
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 fee7 	bl	800ef4c <__i2b>
 800e17e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e180:	2b00      	cmp	r3, #0
 800e182:	4606      	mov	r6, r0
 800e184:	dd7c      	ble.n	800e280 <_dtoa_r+0x8d8>
 800e186:	461a      	mov	r2, r3
 800e188:	4601      	mov	r1, r0
 800e18a:	4620      	mov	r0, r4
 800e18c:	f000 ff9a 	bl	800f0c4 <__pow5mult>
 800e190:	9b05      	ldr	r3, [sp, #20]
 800e192:	2b01      	cmp	r3, #1
 800e194:	4606      	mov	r6, r0
 800e196:	dd76      	ble.n	800e286 <_dtoa_r+0x8de>
 800e198:	2300      	movs	r3, #0
 800e19a:	9306      	str	r3, [sp, #24]
 800e19c:	6933      	ldr	r3, [r6, #16]
 800e19e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e1a2:	6918      	ldr	r0, [r3, #16]
 800e1a4:	f000 fe82 	bl	800eeac <__hi0bits>
 800e1a8:	f1c0 0020 	rsb	r0, r0, #32
 800e1ac:	9b04      	ldr	r3, [sp, #16]
 800e1ae:	4418      	add	r0, r3
 800e1b0:	f010 001f 	ands.w	r0, r0, #31
 800e1b4:	f000 8086 	beq.w	800e2c4 <_dtoa_r+0x91c>
 800e1b8:	f1c0 0320 	rsb	r3, r0, #32
 800e1bc:	2b04      	cmp	r3, #4
 800e1be:	dd7f      	ble.n	800e2c0 <_dtoa_r+0x918>
 800e1c0:	f1c0 001c 	rsb	r0, r0, #28
 800e1c4:	9b04      	ldr	r3, [sp, #16]
 800e1c6:	4403      	add	r3, r0
 800e1c8:	4480      	add	r8, r0
 800e1ca:	4405      	add	r5, r0
 800e1cc:	9304      	str	r3, [sp, #16]
 800e1ce:	f1b8 0f00 	cmp.w	r8, #0
 800e1d2:	dd05      	ble.n	800e1e0 <_dtoa_r+0x838>
 800e1d4:	4659      	mov	r1, fp
 800e1d6:	4642      	mov	r2, r8
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f000 ffcd 	bl	800f178 <__lshift>
 800e1de:	4683      	mov	fp, r0
 800e1e0:	9b04      	ldr	r3, [sp, #16]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	dd05      	ble.n	800e1f2 <_dtoa_r+0x84a>
 800e1e6:	4631      	mov	r1, r6
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f000 ffc4 	bl	800f178 <__lshift>
 800e1f0:	4606      	mov	r6, r0
 800e1f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d069      	beq.n	800e2cc <_dtoa_r+0x924>
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	4658      	mov	r0, fp
 800e1fc:	f001 f828 	bl	800f250 <__mcmp>
 800e200:	2800      	cmp	r0, #0
 800e202:	da63      	bge.n	800e2cc <_dtoa_r+0x924>
 800e204:	2300      	movs	r3, #0
 800e206:	4659      	mov	r1, fp
 800e208:	220a      	movs	r2, #10
 800e20a:	4620      	mov	r0, r4
 800e20c:	f000 fdba 	bl	800ed84 <__multadd>
 800e210:	9b08      	ldr	r3, [sp, #32]
 800e212:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e216:	4683      	mov	fp, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f000 818f 	beq.w	800e53c <_dtoa_r+0xb94>
 800e21e:	4639      	mov	r1, r7
 800e220:	2300      	movs	r3, #0
 800e222:	220a      	movs	r2, #10
 800e224:	4620      	mov	r0, r4
 800e226:	f000 fdad 	bl	800ed84 <__multadd>
 800e22a:	f1b9 0f00 	cmp.w	r9, #0
 800e22e:	4607      	mov	r7, r0
 800e230:	f300 808e 	bgt.w	800e350 <_dtoa_r+0x9a8>
 800e234:	9b05      	ldr	r3, [sp, #20]
 800e236:	2b02      	cmp	r3, #2
 800e238:	dc50      	bgt.n	800e2dc <_dtoa_r+0x934>
 800e23a:	e089      	b.n	800e350 <_dtoa_r+0x9a8>
 800e23c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e23e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e242:	e75d      	b.n	800e100 <_dtoa_r+0x758>
 800e244:	9b01      	ldr	r3, [sp, #4]
 800e246:	1e5e      	subs	r6, r3, #1
 800e248:	9b06      	ldr	r3, [sp, #24]
 800e24a:	42b3      	cmp	r3, r6
 800e24c:	bfbf      	itttt	lt
 800e24e:	9b06      	ldrlt	r3, [sp, #24]
 800e250:	9606      	strlt	r6, [sp, #24]
 800e252:	1af2      	sublt	r2, r6, r3
 800e254:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e256:	bfb6      	itet	lt
 800e258:	189b      	addlt	r3, r3, r2
 800e25a:	1b9e      	subge	r6, r3, r6
 800e25c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e25e:	9b01      	ldr	r3, [sp, #4]
 800e260:	bfb8      	it	lt
 800e262:	2600      	movlt	r6, #0
 800e264:	2b00      	cmp	r3, #0
 800e266:	bfb5      	itete	lt
 800e268:	eba8 0503 	sublt.w	r5, r8, r3
 800e26c:	9b01      	ldrge	r3, [sp, #4]
 800e26e:	2300      	movlt	r3, #0
 800e270:	4645      	movge	r5, r8
 800e272:	e747      	b.n	800e104 <_dtoa_r+0x75c>
 800e274:	9e06      	ldr	r6, [sp, #24]
 800e276:	9f08      	ldr	r7, [sp, #32]
 800e278:	4645      	mov	r5, r8
 800e27a:	e74c      	b.n	800e116 <_dtoa_r+0x76e>
 800e27c:	9a06      	ldr	r2, [sp, #24]
 800e27e:	e775      	b.n	800e16c <_dtoa_r+0x7c4>
 800e280:	9b05      	ldr	r3, [sp, #20]
 800e282:	2b01      	cmp	r3, #1
 800e284:	dc18      	bgt.n	800e2b8 <_dtoa_r+0x910>
 800e286:	9b02      	ldr	r3, [sp, #8]
 800e288:	b9b3      	cbnz	r3, 800e2b8 <_dtoa_r+0x910>
 800e28a:	9b03      	ldr	r3, [sp, #12]
 800e28c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e290:	b9a3      	cbnz	r3, 800e2bc <_dtoa_r+0x914>
 800e292:	9b03      	ldr	r3, [sp, #12]
 800e294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e298:	0d1b      	lsrs	r3, r3, #20
 800e29a:	051b      	lsls	r3, r3, #20
 800e29c:	b12b      	cbz	r3, 800e2aa <_dtoa_r+0x902>
 800e29e:	9b04      	ldr	r3, [sp, #16]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	9304      	str	r3, [sp, #16]
 800e2a4:	f108 0801 	add.w	r8, r8, #1
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	9306      	str	r3, [sp, #24]
 800e2ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f47f af74 	bne.w	800e19c <_dtoa_r+0x7f4>
 800e2b4:	2001      	movs	r0, #1
 800e2b6:	e779      	b.n	800e1ac <_dtoa_r+0x804>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e7f6      	b.n	800e2aa <_dtoa_r+0x902>
 800e2bc:	9b02      	ldr	r3, [sp, #8]
 800e2be:	e7f4      	b.n	800e2aa <_dtoa_r+0x902>
 800e2c0:	d085      	beq.n	800e1ce <_dtoa_r+0x826>
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	301c      	adds	r0, #28
 800e2c6:	e77d      	b.n	800e1c4 <_dtoa_r+0x81c>
 800e2c8:	40240000 	.word	0x40240000
 800e2cc:	9b01      	ldr	r3, [sp, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	dc38      	bgt.n	800e344 <_dtoa_r+0x99c>
 800e2d2:	9b05      	ldr	r3, [sp, #20]
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	dd35      	ble.n	800e344 <_dtoa_r+0x99c>
 800e2d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e2dc:	f1b9 0f00 	cmp.w	r9, #0
 800e2e0:	d10d      	bne.n	800e2fe <_dtoa_r+0x956>
 800e2e2:	4631      	mov	r1, r6
 800e2e4:	464b      	mov	r3, r9
 800e2e6:	2205      	movs	r2, #5
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f000 fd4b 	bl	800ed84 <__multadd>
 800e2ee:	4601      	mov	r1, r0
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	4658      	mov	r0, fp
 800e2f4:	f000 ffac 	bl	800f250 <__mcmp>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	f73f adbd 	bgt.w	800de78 <_dtoa_r+0x4d0>
 800e2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e300:	9d00      	ldr	r5, [sp, #0]
 800e302:	ea6f 0a03 	mvn.w	sl, r3
 800e306:	f04f 0800 	mov.w	r8, #0
 800e30a:	4631      	mov	r1, r6
 800e30c:	4620      	mov	r0, r4
 800e30e:	f000 fd17 	bl	800ed40 <_Bfree>
 800e312:	2f00      	cmp	r7, #0
 800e314:	f43f aeb4 	beq.w	800e080 <_dtoa_r+0x6d8>
 800e318:	f1b8 0f00 	cmp.w	r8, #0
 800e31c:	d005      	beq.n	800e32a <_dtoa_r+0x982>
 800e31e:	45b8      	cmp	r8, r7
 800e320:	d003      	beq.n	800e32a <_dtoa_r+0x982>
 800e322:	4641      	mov	r1, r8
 800e324:	4620      	mov	r0, r4
 800e326:	f000 fd0b 	bl	800ed40 <_Bfree>
 800e32a:	4639      	mov	r1, r7
 800e32c:	4620      	mov	r0, r4
 800e32e:	f000 fd07 	bl	800ed40 <_Bfree>
 800e332:	e6a5      	b.n	800e080 <_dtoa_r+0x6d8>
 800e334:	2600      	movs	r6, #0
 800e336:	4637      	mov	r7, r6
 800e338:	e7e1      	b.n	800e2fe <_dtoa_r+0x956>
 800e33a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e33c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e340:	4637      	mov	r7, r6
 800e342:	e599      	b.n	800de78 <_dtoa_r+0x4d0>
 800e344:	9b08      	ldr	r3, [sp, #32]
 800e346:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 80fd 	beq.w	800e54a <_dtoa_r+0xba2>
 800e350:	2d00      	cmp	r5, #0
 800e352:	dd05      	ble.n	800e360 <_dtoa_r+0x9b8>
 800e354:	4639      	mov	r1, r7
 800e356:	462a      	mov	r2, r5
 800e358:	4620      	mov	r0, r4
 800e35a:	f000 ff0d 	bl	800f178 <__lshift>
 800e35e:	4607      	mov	r7, r0
 800e360:	9b06      	ldr	r3, [sp, #24]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d05c      	beq.n	800e420 <_dtoa_r+0xa78>
 800e366:	6879      	ldr	r1, [r7, #4]
 800e368:	4620      	mov	r0, r4
 800e36a:	f000 fca9 	bl	800ecc0 <_Balloc>
 800e36e:	4605      	mov	r5, r0
 800e370:	b928      	cbnz	r0, 800e37e <_dtoa_r+0x9d6>
 800e372:	4b80      	ldr	r3, [pc, #512]	; (800e574 <_dtoa_r+0xbcc>)
 800e374:	4602      	mov	r2, r0
 800e376:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e37a:	f7ff bb2e 	b.w	800d9da <_dtoa_r+0x32>
 800e37e:	693a      	ldr	r2, [r7, #16]
 800e380:	3202      	adds	r2, #2
 800e382:	0092      	lsls	r2, r2, #2
 800e384:	f107 010c 	add.w	r1, r7, #12
 800e388:	300c      	adds	r0, #12
 800e38a:	f000 fc7f 	bl	800ec8c <memcpy>
 800e38e:	2201      	movs	r2, #1
 800e390:	4629      	mov	r1, r5
 800e392:	4620      	mov	r0, r4
 800e394:	f000 fef0 	bl	800f178 <__lshift>
 800e398:	9b00      	ldr	r3, [sp, #0]
 800e39a:	3301      	adds	r3, #1
 800e39c:	9301      	str	r3, [sp, #4]
 800e39e:	9b00      	ldr	r3, [sp, #0]
 800e3a0:	444b      	add	r3, r9
 800e3a2:	9307      	str	r3, [sp, #28]
 800e3a4:	9b02      	ldr	r3, [sp, #8]
 800e3a6:	f003 0301 	and.w	r3, r3, #1
 800e3aa:	46b8      	mov	r8, r7
 800e3ac:	9306      	str	r3, [sp, #24]
 800e3ae:	4607      	mov	r7, r0
 800e3b0:	9b01      	ldr	r3, [sp, #4]
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	4658      	mov	r0, fp
 800e3b8:	9302      	str	r3, [sp, #8]
 800e3ba:	f7ff fa67 	bl	800d88c <quorem>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	3330      	adds	r3, #48	; 0x30
 800e3c2:	9004      	str	r0, [sp, #16]
 800e3c4:	4641      	mov	r1, r8
 800e3c6:	4658      	mov	r0, fp
 800e3c8:	9308      	str	r3, [sp, #32]
 800e3ca:	f000 ff41 	bl	800f250 <__mcmp>
 800e3ce:	463a      	mov	r2, r7
 800e3d0:	4681      	mov	r9, r0
 800e3d2:	4631      	mov	r1, r6
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f000 ff57 	bl	800f288 <__mdiff>
 800e3da:	68c2      	ldr	r2, [r0, #12]
 800e3dc:	9b08      	ldr	r3, [sp, #32]
 800e3de:	4605      	mov	r5, r0
 800e3e0:	bb02      	cbnz	r2, 800e424 <_dtoa_r+0xa7c>
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	4658      	mov	r0, fp
 800e3e6:	f000 ff33 	bl	800f250 <__mcmp>
 800e3ea:	9b08      	ldr	r3, [sp, #32]
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e3f6:	f000 fca3 	bl	800ed40 <_Bfree>
 800e3fa:	9b05      	ldr	r3, [sp, #20]
 800e3fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3fe:	9d01      	ldr	r5, [sp, #4]
 800e400:	ea43 0102 	orr.w	r1, r3, r2
 800e404:	9b06      	ldr	r3, [sp, #24]
 800e406:	430b      	orrs	r3, r1
 800e408:	9b08      	ldr	r3, [sp, #32]
 800e40a:	d10d      	bne.n	800e428 <_dtoa_r+0xa80>
 800e40c:	2b39      	cmp	r3, #57	; 0x39
 800e40e:	d029      	beq.n	800e464 <_dtoa_r+0xabc>
 800e410:	f1b9 0f00 	cmp.w	r9, #0
 800e414:	dd01      	ble.n	800e41a <_dtoa_r+0xa72>
 800e416:	9b04      	ldr	r3, [sp, #16]
 800e418:	3331      	adds	r3, #49	; 0x31
 800e41a:	9a02      	ldr	r2, [sp, #8]
 800e41c:	7013      	strb	r3, [r2, #0]
 800e41e:	e774      	b.n	800e30a <_dtoa_r+0x962>
 800e420:	4638      	mov	r0, r7
 800e422:	e7b9      	b.n	800e398 <_dtoa_r+0x9f0>
 800e424:	2201      	movs	r2, #1
 800e426:	e7e2      	b.n	800e3ee <_dtoa_r+0xa46>
 800e428:	f1b9 0f00 	cmp.w	r9, #0
 800e42c:	db06      	blt.n	800e43c <_dtoa_r+0xa94>
 800e42e:	9905      	ldr	r1, [sp, #20]
 800e430:	ea41 0909 	orr.w	r9, r1, r9
 800e434:	9906      	ldr	r1, [sp, #24]
 800e436:	ea59 0101 	orrs.w	r1, r9, r1
 800e43a:	d120      	bne.n	800e47e <_dtoa_r+0xad6>
 800e43c:	2a00      	cmp	r2, #0
 800e43e:	ddec      	ble.n	800e41a <_dtoa_r+0xa72>
 800e440:	4659      	mov	r1, fp
 800e442:	2201      	movs	r2, #1
 800e444:	4620      	mov	r0, r4
 800e446:	9301      	str	r3, [sp, #4]
 800e448:	f000 fe96 	bl	800f178 <__lshift>
 800e44c:	4631      	mov	r1, r6
 800e44e:	4683      	mov	fp, r0
 800e450:	f000 fefe 	bl	800f250 <__mcmp>
 800e454:	2800      	cmp	r0, #0
 800e456:	9b01      	ldr	r3, [sp, #4]
 800e458:	dc02      	bgt.n	800e460 <_dtoa_r+0xab8>
 800e45a:	d1de      	bne.n	800e41a <_dtoa_r+0xa72>
 800e45c:	07da      	lsls	r2, r3, #31
 800e45e:	d5dc      	bpl.n	800e41a <_dtoa_r+0xa72>
 800e460:	2b39      	cmp	r3, #57	; 0x39
 800e462:	d1d8      	bne.n	800e416 <_dtoa_r+0xa6e>
 800e464:	9a02      	ldr	r2, [sp, #8]
 800e466:	2339      	movs	r3, #57	; 0x39
 800e468:	7013      	strb	r3, [r2, #0]
 800e46a:	462b      	mov	r3, r5
 800e46c:	461d      	mov	r5, r3
 800e46e:	3b01      	subs	r3, #1
 800e470:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e474:	2a39      	cmp	r2, #57	; 0x39
 800e476:	d050      	beq.n	800e51a <_dtoa_r+0xb72>
 800e478:	3201      	adds	r2, #1
 800e47a:	701a      	strb	r2, [r3, #0]
 800e47c:	e745      	b.n	800e30a <_dtoa_r+0x962>
 800e47e:	2a00      	cmp	r2, #0
 800e480:	dd03      	ble.n	800e48a <_dtoa_r+0xae2>
 800e482:	2b39      	cmp	r3, #57	; 0x39
 800e484:	d0ee      	beq.n	800e464 <_dtoa_r+0xabc>
 800e486:	3301      	adds	r3, #1
 800e488:	e7c7      	b.n	800e41a <_dtoa_r+0xa72>
 800e48a:	9a01      	ldr	r2, [sp, #4]
 800e48c:	9907      	ldr	r1, [sp, #28]
 800e48e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e492:	428a      	cmp	r2, r1
 800e494:	d02a      	beq.n	800e4ec <_dtoa_r+0xb44>
 800e496:	4659      	mov	r1, fp
 800e498:	2300      	movs	r3, #0
 800e49a:	220a      	movs	r2, #10
 800e49c:	4620      	mov	r0, r4
 800e49e:	f000 fc71 	bl	800ed84 <__multadd>
 800e4a2:	45b8      	cmp	r8, r7
 800e4a4:	4683      	mov	fp, r0
 800e4a6:	f04f 0300 	mov.w	r3, #0
 800e4aa:	f04f 020a 	mov.w	r2, #10
 800e4ae:	4641      	mov	r1, r8
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	d107      	bne.n	800e4c4 <_dtoa_r+0xb1c>
 800e4b4:	f000 fc66 	bl	800ed84 <__multadd>
 800e4b8:	4680      	mov	r8, r0
 800e4ba:	4607      	mov	r7, r0
 800e4bc:	9b01      	ldr	r3, [sp, #4]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	9301      	str	r3, [sp, #4]
 800e4c2:	e775      	b.n	800e3b0 <_dtoa_r+0xa08>
 800e4c4:	f000 fc5e 	bl	800ed84 <__multadd>
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	4680      	mov	r8, r0
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	220a      	movs	r2, #10
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f000 fc57 	bl	800ed84 <__multadd>
 800e4d6:	4607      	mov	r7, r0
 800e4d8:	e7f0      	b.n	800e4bc <_dtoa_r+0xb14>
 800e4da:	f1b9 0f00 	cmp.w	r9, #0
 800e4de:	9a00      	ldr	r2, [sp, #0]
 800e4e0:	bfcc      	ite	gt
 800e4e2:	464d      	movgt	r5, r9
 800e4e4:	2501      	movle	r5, #1
 800e4e6:	4415      	add	r5, r2
 800e4e8:	f04f 0800 	mov.w	r8, #0
 800e4ec:	4659      	mov	r1, fp
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	9301      	str	r3, [sp, #4]
 800e4f4:	f000 fe40 	bl	800f178 <__lshift>
 800e4f8:	4631      	mov	r1, r6
 800e4fa:	4683      	mov	fp, r0
 800e4fc:	f000 fea8 	bl	800f250 <__mcmp>
 800e500:	2800      	cmp	r0, #0
 800e502:	dcb2      	bgt.n	800e46a <_dtoa_r+0xac2>
 800e504:	d102      	bne.n	800e50c <_dtoa_r+0xb64>
 800e506:	9b01      	ldr	r3, [sp, #4]
 800e508:	07db      	lsls	r3, r3, #31
 800e50a:	d4ae      	bmi.n	800e46a <_dtoa_r+0xac2>
 800e50c:	462b      	mov	r3, r5
 800e50e:	461d      	mov	r5, r3
 800e510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e514:	2a30      	cmp	r2, #48	; 0x30
 800e516:	d0fa      	beq.n	800e50e <_dtoa_r+0xb66>
 800e518:	e6f7      	b.n	800e30a <_dtoa_r+0x962>
 800e51a:	9a00      	ldr	r2, [sp, #0]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d1a5      	bne.n	800e46c <_dtoa_r+0xac4>
 800e520:	f10a 0a01 	add.w	sl, sl, #1
 800e524:	2331      	movs	r3, #49	; 0x31
 800e526:	e779      	b.n	800e41c <_dtoa_r+0xa74>
 800e528:	4b13      	ldr	r3, [pc, #76]	; (800e578 <_dtoa_r+0xbd0>)
 800e52a:	f7ff baaf 	b.w	800da8c <_dtoa_r+0xe4>
 800e52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e530:	2b00      	cmp	r3, #0
 800e532:	f47f aa86 	bne.w	800da42 <_dtoa_r+0x9a>
 800e536:	4b11      	ldr	r3, [pc, #68]	; (800e57c <_dtoa_r+0xbd4>)
 800e538:	f7ff baa8 	b.w	800da8c <_dtoa_r+0xe4>
 800e53c:	f1b9 0f00 	cmp.w	r9, #0
 800e540:	dc03      	bgt.n	800e54a <_dtoa_r+0xba2>
 800e542:	9b05      	ldr	r3, [sp, #20]
 800e544:	2b02      	cmp	r3, #2
 800e546:	f73f aec9 	bgt.w	800e2dc <_dtoa_r+0x934>
 800e54a:	9d00      	ldr	r5, [sp, #0]
 800e54c:	4631      	mov	r1, r6
 800e54e:	4658      	mov	r0, fp
 800e550:	f7ff f99c 	bl	800d88c <quorem>
 800e554:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e558:	f805 3b01 	strb.w	r3, [r5], #1
 800e55c:	9a00      	ldr	r2, [sp, #0]
 800e55e:	1aaa      	subs	r2, r5, r2
 800e560:	4591      	cmp	r9, r2
 800e562:	ddba      	ble.n	800e4da <_dtoa_r+0xb32>
 800e564:	4659      	mov	r1, fp
 800e566:	2300      	movs	r3, #0
 800e568:	220a      	movs	r2, #10
 800e56a:	4620      	mov	r0, r4
 800e56c:	f000 fc0a 	bl	800ed84 <__multadd>
 800e570:	4683      	mov	fp, r0
 800e572:	e7eb      	b.n	800e54c <_dtoa_r+0xba4>
 800e574:	080109a4 	.word	0x080109a4
 800e578:	080107a0 	.word	0x080107a0
 800e57c:	08010921 	.word	0x08010921

0800e580 <rshift>:
 800e580:	6903      	ldr	r3, [r0, #16]
 800e582:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e58a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e58e:	f100 0414 	add.w	r4, r0, #20
 800e592:	dd45      	ble.n	800e620 <rshift+0xa0>
 800e594:	f011 011f 	ands.w	r1, r1, #31
 800e598:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e59c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e5a0:	d10c      	bne.n	800e5bc <rshift+0x3c>
 800e5a2:	f100 0710 	add.w	r7, r0, #16
 800e5a6:	4629      	mov	r1, r5
 800e5a8:	42b1      	cmp	r1, r6
 800e5aa:	d334      	bcc.n	800e616 <rshift+0x96>
 800e5ac:	1a9b      	subs	r3, r3, r2
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	1eea      	subs	r2, r5, #3
 800e5b2:	4296      	cmp	r6, r2
 800e5b4:	bf38      	it	cc
 800e5b6:	2300      	movcc	r3, #0
 800e5b8:	4423      	add	r3, r4
 800e5ba:	e015      	b.n	800e5e8 <rshift+0x68>
 800e5bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e5c0:	f1c1 0820 	rsb	r8, r1, #32
 800e5c4:	40cf      	lsrs	r7, r1
 800e5c6:	f105 0e04 	add.w	lr, r5, #4
 800e5ca:	46a1      	mov	r9, r4
 800e5cc:	4576      	cmp	r6, lr
 800e5ce:	46f4      	mov	ip, lr
 800e5d0:	d815      	bhi.n	800e5fe <rshift+0x7e>
 800e5d2:	1a9b      	subs	r3, r3, r2
 800e5d4:	009a      	lsls	r2, r3, #2
 800e5d6:	3a04      	subs	r2, #4
 800e5d8:	3501      	adds	r5, #1
 800e5da:	42ae      	cmp	r6, r5
 800e5dc:	bf38      	it	cc
 800e5de:	2200      	movcc	r2, #0
 800e5e0:	18a3      	adds	r3, r4, r2
 800e5e2:	50a7      	str	r7, [r4, r2]
 800e5e4:	b107      	cbz	r7, 800e5e8 <rshift+0x68>
 800e5e6:	3304      	adds	r3, #4
 800e5e8:	1b1a      	subs	r2, r3, r4
 800e5ea:	42a3      	cmp	r3, r4
 800e5ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e5f0:	bf08      	it	eq
 800e5f2:	2300      	moveq	r3, #0
 800e5f4:	6102      	str	r2, [r0, #16]
 800e5f6:	bf08      	it	eq
 800e5f8:	6143      	streq	r3, [r0, #20]
 800e5fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5fe:	f8dc c000 	ldr.w	ip, [ip]
 800e602:	fa0c fc08 	lsl.w	ip, ip, r8
 800e606:	ea4c 0707 	orr.w	r7, ip, r7
 800e60a:	f849 7b04 	str.w	r7, [r9], #4
 800e60e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e612:	40cf      	lsrs	r7, r1
 800e614:	e7da      	b.n	800e5cc <rshift+0x4c>
 800e616:	f851 cb04 	ldr.w	ip, [r1], #4
 800e61a:	f847 cf04 	str.w	ip, [r7, #4]!
 800e61e:	e7c3      	b.n	800e5a8 <rshift+0x28>
 800e620:	4623      	mov	r3, r4
 800e622:	e7e1      	b.n	800e5e8 <rshift+0x68>

0800e624 <__hexdig_fun>:
 800e624:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e628:	2b09      	cmp	r3, #9
 800e62a:	d802      	bhi.n	800e632 <__hexdig_fun+0xe>
 800e62c:	3820      	subs	r0, #32
 800e62e:	b2c0      	uxtb	r0, r0
 800e630:	4770      	bx	lr
 800e632:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e636:	2b05      	cmp	r3, #5
 800e638:	d801      	bhi.n	800e63e <__hexdig_fun+0x1a>
 800e63a:	3847      	subs	r0, #71	; 0x47
 800e63c:	e7f7      	b.n	800e62e <__hexdig_fun+0xa>
 800e63e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e642:	2b05      	cmp	r3, #5
 800e644:	d801      	bhi.n	800e64a <__hexdig_fun+0x26>
 800e646:	3827      	subs	r0, #39	; 0x27
 800e648:	e7f1      	b.n	800e62e <__hexdig_fun+0xa>
 800e64a:	2000      	movs	r0, #0
 800e64c:	4770      	bx	lr
	...

0800e650 <__gethex>:
 800e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e654:	ed2d 8b02 	vpush	{d8}
 800e658:	b089      	sub	sp, #36	; 0x24
 800e65a:	ee08 0a10 	vmov	s16, r0
 800e65e:	9304      	str	r3, [sp, #16]
 800e660:	4bbc      	ldr	r3, [pc, #752]	; (800e954 <__gethex+0x304>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	9301      	str	r3, [sp, #4]
 800e666:	4618      	mov	r0, r3
 800e668:	468b      	mov	fp, r1
 800e66a:	4690      	mov	r8, r2
 800e66c:	f7f1 fdb8 	bl	80001e0 <strlen>
 800e670:	9b01      	ldr	r3, [sp, #4]
 800e672:	f8db 2000 	ldr.w	r2, [fp]
 800e676:	4403      	add	r3, r0
 800e678:	4682      	mov	sl, r0
 800e67a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e67e:	9305      	str	r3, [sp, #20]
 800e680:	1c93      	adds	r3, r2, #2
 800e682:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e686:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e68a:	32fe      	adds	r2, #254	; 0xfe
 800e68c:	18d1      	adds	r1, r2, r3
 800e68e:	461f      	mov	r7, r3
 800e690:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e694:	9100      	str	r1, [sp, #0]
 800e696:	2830      	cmp	r0, #48	; 0x30
 800e698:	d0f8      	beq.n	800e68c <__gethex+0x3c>
 800e69a:	f7ff ffc3 	bl	800e624 <__hexdig_fun>
 800e69e:	4604      	mov	r4, r0
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	d13a      	bne.n	800e71a <__gethex+0xca>
 800e6a4:	9901      	ldr	r1, [sp, #4]
 800e6a6:	4652      	mov	r2, sl
 800e6a8:	4638      	mov	r0, r7
 800e6aa:	f001 f939 	bl	800f920 <strncmp>
 800e6ae:	4605      	mov	r5, r0
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d168      	bne.n	800e786 <__gethex+0x136>
 800e6b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e6b8:	eb07 060a 	add.w	r6, r7, sl
 800e6bc:	f7ff ffb2 	bl	800e624 <__hexdig_fun>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d062      	beq.n	800e78a <__gethex+0x13a>
 800e6c4:	4633      	mov	r3, r6
 800e6c6:	7818      	ldrb	r0, [r3, #0]
 800e6c8:	2830      	cmp	r0, #48	; 0x30
 800e6ca:	461f      	mov	r7, r3
 800e6cc:	f103 0301 	add.w	r3, r3, #1
 800e6d0:	d0f9      	beq.n	800e6c6 <__gethex+0x76>
 800e6d2:	f7ff ffa7 	bl	800e624 <__hexdig_fun>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	fab0 f480 	clz	r4, r0
 800e6dc:	0964      	lsrs	r4, r4, #5
 800e6de:	4635      	mov	r5, r6
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	463a      	mov	r2, r7
 800e6e4:	4616      	mov	r6, r2
 800e6e6:	3201      	adds	r2, #1
 800e6e8:	7830      	ldrb	r0, [r6, #0]
 800e6ea:	f7ff ff9b 	bl	800e624 <__hexdig_fun>
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	d1f8      	bne.n	800e6e4 <__gethex+0x94>
 800e6f2:	9901      	ldr	r1, [sp, #4]
 800e6f4:	4652      	mov	r2, sl
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	f001 f912 	bl	800f920 <strncmp>
 800e6fc:	b980      	cbnz	r0, 800e720 <__gethex+0xd0>
 800e6fe:	b94d      	cbnz	r5, 800e714 <__gethex+0xc4>
 800e700:	eb06 050a 	add.w	r5, r6, sl
 800e704:	462a      	mov	r2, r5
 800e706:	4616      	mov	r6, r2
 800e708:	3201      	adds	r2, #1
 800e70a:	7830      	ldrb	r0, [r6, #0]
 800e70c:	f7ff ff8a 	bl	800e624 <__hexdig_fun>
 800e710:	2800      	cmp	r0, #0
 800e712:	d1f8      	bne.n	800e706 <__gethex+0xb6>
 800e714:	1bad      	subs	r5, r5, r6
 800e716:	00ad      	lsls	r5, r5, #2
 800e718:	e004      	b.n	800e724 <__gethex+0xd4>
 800e71a:	2400      	movs	r4, #0
 800e71c:	4625      	mov	r5, r4
 800e71e:	e7e0      	b.n	800e6e2 <__gethex+0x92>
 800e720:	2d00      	cmp	r5, #0
 800e722:	d1f7      	bne.n	800e714 <__gethex+0xc4>
 800e724:	7833      	ldrb	r3, [r6, #0]
 800e726:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e72a:	2b50      	cmp	r3, #80	; 0x50
 800e72c:	d13b      	bne.n	800e7a6 <__gethex+0x156>
 800e72e:	7873      	ldrb	r3, [r6, #1]
 800e730:	2b2b      	cmp	r3, #43	; 0x2b
 800e732:	d02c      	beq.n	800e78e <__gethex+0x13e>
 800e734:	2b2d      	cmp	r3, #45	; 0x2d
 800e736:	d02e      	beq.n	800e796 <__gethex+0x146>
 800e738:	1c71      	adds	r1, r6, #1
 800e73a:	f04f 0900 	mov.w	r9, #0
 800e73e:	7808      	ldrb	r0, [r1, #0]
 800e740:	f7ff ff70 	bl	800e624 <__hexdig_fun>
 800e744:	1e43      	subs	r3, r0, #1
 800e746:	b2db      	uxtb	r3, r3
 800e748:	2b18      	cmp	r3, #24
 800e74a:	d82c      	bhi.n	800e7a6 <__gethex+0x156>
 800e74c:	f1a0 0210 	sub.w	r2, r0, #16
 800e750:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e754:	f7ff ff66 	bl	800e624 <__hexdig_fun>
 800e758:	1e43      	subs	r3, r0, #1
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	2b18      	cmp	r3, #24
 800e75e:	d91d      	bls.n	800e79c <__gethex+0x14c>
 800e760:	f1b9 0f00 	cmp.w	r9, #0
 800e764:	d000      	beq.n	800e768 <__gethex+0x118>
 800e766:	4252      	negs	r2, r2
 800e768:	4415      	add	r5, r2
 800e76a:	f8cb 1000 	str.w	r1, [fp]
 800e76e:	b1e4      	cbz	r4, 800e7aa <__gethex+0x15a>
 800e770:	9b00      	ldr	r3, [sp, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	bf14      	ite	ne
 800e776:	2700      	movne	r7, #0
 800e778:	2706      	moveq	r7, #6
 800e77a:	4638      	mov	r0, r7
 800e77c:	b009      	add	sp, #36	; 0x24
 800e77e:	ecbd 8b02 	vpop	{d8}
 800e782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e786:	463e      	mov	r6, r7
 800e788:	4625      	mov	r5, r4
 800e78a:	2401      	movs	r4, #1
 800e78c:	e7ca      	b.n	800e724 <__gethex+0xd4>
 800e78e:	f04f 0900 	mov.w	r9, #0
 800e792:	1cb1      	adds	r1, r6, #2
 800e794:	e7d3      	b.n	800e73e <__gethex+0xee>
 800e796:	f04f 0901 	mov.w	r9, #1
 800e79a:	e7fa      	b.n	800e792 <__gethex+0x142>
 800e79c:	230a      	movs	r3, #10
 800e79e:	fb03 0202 	mla	r2, r3, r2, r0
 800e7a2:	3a10      	subs	r2, #16
 800e7a4:	e7d4      	b.n	800e750 <__gethex+0x100>
 800e7a6:	4631      	mov	r1, r6
 800e7a8:	e7df      	b.n	800e76a <__gethex+0x11a>
 800e7aa:	1bf3      	subs	r3, r6, r7
 800e7ac:	3b01      	subs	r3, #1
 800e7ae:	4621      	mov	r1, r4
 800e7b0:	2b07      	cmp	r3, #7
 800e7b2:	dc0b      	bgt.n	800e7cc <__gethex+0x17c>
 800e7b4:	ee18 0a10 	vmov	r0, s16
 800e7b8:	f000 fa82 	bl	800ecc0 <_Balloc>
 800e7bc:	4604      	mov	r4, r0
 800e7be:	b940      	cbnz	r0, 800e7d2 <__gethex+0x182>
 800e7c0:	4b65      	ldr	r3, [pc, #404]	; (800e958 <__gethex+0x308>)
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	21de      	movs	r1, #222	; 0xde
 800e7c6:	4865      	ldr	r0, [pc, #404]	; (800e95c <__gethex+0x30c>)
 800e7c8:	f001 f8ca 	bl	800f960 <__assert_func>
 800e7cc:	3101      	adds	r1, #1
 800e7ce:	105b      	asrs	r3, r3, #1
 800e7d0:	e7ee      	b.n	800e7b0 <__gethex+0x160>
 800e7d2:	f100 0914 	add.w	r9, r0, #20
 800e7d6:	f04f 0b00 	mov.w	fp, #0
 800e7da:	f1ca 0301 	rsb	r3, sl, #1
 800e7de:	f8cd 9008 	str.w	r9, [sp, #8]
 800e7e2:	f8cd b000 	str.w	fp, [sp]
 800e7e6:	9306      	str	r3, [sp, #24]
 800e7e8:	42b7      	cmp	r7, r6
 800e7ea:	d340      	bcc.n	800e86e <__gethex+0x21e>
 800e7ec:	9802      	ldr	r0, [sp, #8]
 800e7ee:	9b00      	ldr	r3, [sp, #0]
 800e7f0:	f840 3b04 	str.w	r3, [r0], #4
 800e7f4:	eba0 0009 	sub.w	r0, r0, r9
 800e7f8:	1080      	asrs	r0, r0, #2
 800e7fa:	0146      	lsls	r6, r0, #5
 800e7fc:	6120      	str	r0, [r4, #16]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 fb54 	bl	800eeac <__hi0bits>
 800e804:	1a30      	subs	r0, r6, r0
 800e806:	f8d8 6000 	ldr.w	r6, [r8]
 800e80a:	42b0      	cmp	r0, r6
 800e80c:	dd63      	ble.n	800e8d6 <__gethex+0x286>
 800e80e:	1b87      	subs	r7, r0, r6
 800e810:	4639      	mov	r1, r7
 800e812:	4620      	mov	r0, r4
 800e814:	f000 feee 	bl	800f5f4 <__any_on>
 800e818:	4682      	mov	sl, r0
 800e81a:	b1a8      	cbz	r0, 800e848 <__gethex+0x1f8>
 800e81c:	1e7b      	subs	r3, r7, #1
 800e81e:	1159      	asrs	r1, r3, #5
 800e820:	f003 021f 	and.w	r2, r3, #31
 800e824:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e828:	f04f 0a01 	mov.w	sl, #1
 800e82c:	fa0a f202 	lsl.w	r2, sl, r2
 800e830:	420a      	tst	r2, r1
 800e832:	d009      	beq.n	800e848 <__gethex+0x1f8>
 800e834:	4553      	cmp	r3, sl
 800e836:	dd05      	ble.n	800e844 <__gethex+0x1f4>
 800e838:	1eb9      	subs	r1, r7, #2
 800e83a:	4620      	mov	r0, r4
 800e83c:	f000 feda 	bl	800f5f4 <__any_on>
 800e840:	2800      	cmp	r0, #0
 800e842:	d145      	bne.n	800e8d0 <__gethex+0x280>
 800e844:	f04f 0a02 	mov.w	sl, #2
 800e848:	4639      	mov	r1, r7
 800e84a:	4620      	mov	r0, r4
 800e84c:	f7ff fe98 	bl	800e580 <rshift>
 800e850:	443d      	add	r5, r7
 800e852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e856:	42ab      	cmp	r3, r5
 800e858:	da4c      	bge.n	800e8f4 <__gethex+0x2a4>
 800e85a:	ee18 0a10 	vmov	r0, s16
 800e85e:	4621      	mov	r1, r4
 800e860:	f000 fa6e 	bl	800ed40 <_Bfree>
 800e864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e866:	2300      	movs	r3, #0
 800e868:	6013      	str	r3, [r2, #0]
 800e86a:	27a3      	movs	r7, #163	; 0xa3
 800e86c:	e785      	b.n	800e77a <__gethex+0x12a>
 800e86e:	1e73      	subs	r3, r6, #1
 800e870:	9a05      	ldr	r2, [sp, #20]
 800e872:	9303      	str	r3, [sp, #12]
 800e874:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e878:	4293      	cmp	r3, r2
 800e87a:	d019      	beq.n	800e8b0 <__gethex+0x260>
 800e87c:	f1bb 0f20 	cmp.w	fp, #32
 800e880:	d107      	bne.n	800e892 <__gethex+0x242>
 800e882:	9b02      	ldr	r3, [sp, #8]
 800e884:	9a00      	ldr	r2, [sp, #0]
 800e886:	f843 2b04 	str.w	r2, [r3], #4
 800e88a:	9302      	str	r3, [sp, #8]
 800e88c:	2300      	movs	r3, #0
 800e88e:	9300      	str	r3, [sp, #0]
 800e890:	469b      	mov	fp, r3
 800e892:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e896:	f7ff fec5 	bl	800e624 <__hexdig_fun>
 800e89a:	9b00      	ldr	r3, [sp, #0]
 800e89c:	f000 000f 	and.w	r0, r0, #15
 800e8a0:	fa00 f00b 	lsl.w	r0, r0, fp
 800e8a4:	4303      	orrs	r3, r0
 800e8a6:	9300      	str	r3, [sp, #0]
 800e8a8:	f10b 0b04 	add.w	fp, fp, #4
 800e8ac:	9b03      	ldr	r3, [sp, #12]
 800e8ae:	e00d      	b.n	800e8cc <__gethex+0x27c>
 800e8b0:	9b03      	ldr	r3, [sp, #12]
 800e8b2:	9a06      	ldr	r2, [sp, #24]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	42bb      	cmp	r3, r7
 800e8b8:	d3e0      	bcc.n	800e87c <__gethex+0x22c>
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	9901      	ldr	r1, [sp, #4]
 800e8be:	9307      	str	r3, [sp, #28]
 800e8c0:	4652      	mov	r2, sl
 800e8c2:	f001 f82d 	bl	800f920 <strncmp>
 800e8c6:	9b07      	ldr	r3, [sp, #28]
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	d1d7      	bne.n	800e87c <__gethex+0x22c>
 800e8cc:	461e      	mov	r6, r3
 800e8ce:	e78b      	b.n	800e7e8 <__gethex+0x198>
 800e8d0:	f04f 0a03 	mov.w	sl, #3
 800e8d4:	e7b8      	b.n	800e848 <__gethex+0x1f8>
 800e8d6:	da0a      	bge.n	800e8ee <__gethex+0x29e>
 800e8d8:	1a37      	subs	r7, r6, r0
 800e8da:	4621      	mov	r1, r4
 800e8dc:	ee18 0a10 	vmov	r0, s16
 800e8e0:	463a      	mov	r2, r7
 800e8e2:	f000 fc49 	bl	800f178 <__lshift>
 800e8e6:	1bed      	subs	r5, r5, r7
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	f100 0914 	add.w	r9, r0, #20
 800e8ee:	f04f 0a00 	mov.w	sl, #0
 800e8f2:	e7ae      	b.n	800e852 <__gethex+0x202>
 800e8f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e8f8:	42a8      	cmp	r0, r5
 800e8fa:	dd72      	ble.n	800e9e2 <__gethex+0x392>
 800e8fc:	1b45      	subs	r5, r0, r5
 800e8fe:	42ae      	cmp	r6, r5
 800e900:	dc36      	bgt.n	800e970 <__gethex+0x320>
 800e902:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e906:	2b02      	cmp	r3, #2
 800e908:	d02a      	beq.n	800e960 <__gethex+0x310>
 800e90a:	2b03      	cmp	r3, #3
 800e90c:	d02c      	beq.n	800e968 <__gethex+0x318>
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d115      	bne.n	800e93e <__gethex+0x2ee>
 800e912:	42ae      	cmp	r6, r5
 800e914:	d113      	bne.n	800e93e <__gethex+0x2ee>
 800e916:	2e01      	cmp	r6, #1
 800e918:	d10b      	bne.n	800e932 <__gethex+0x2e2>
 800e91a:	9a04      	ldr	r2, [sp, #16]
 800e91c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e920:	6013      	str	r3, [r2, #0]
 800e922:	2301      	movs	r3, #1
 800e924:	6123      	str	r3, [r4, #16]
 800e926:	f8c9 3000 	str.w	r3, [r9]
 800e92a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e92c:	2762      	movs	r7, #98	; 0x62
 800e92e:	601c      	str	r4, [r3, #0]
 800e930:	e723      	b.n	800e77a <__gethex+0x12a>
 800e932:	1e71      	subs	r1, r6, #1
 800e934:	4620      	mov	r0, r4
 800e936:	f000 fe5d 	bl	800f5f4 <__any_on>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d1ed      	bne.n	800e91a <__gethex+0x2ca>
 800e93e:	ee18 0a10 	vmov	r0, s16
 800e942:	4621      	mov	r1, r4
 800e944:	f000 f9fc 	bl	800ed40 <_Bfree>
 800e948:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e94a:	2300      	movs	r3, #0
 800e94c:	6013      	str	r3, [r2, #0]
 800e94e:	2750      	movs	r7, #80	; 0x50
 800e950:	e713      	b.n	800e77a <__gethex+0x12a>
 800e952:	bf00      	nop
 800e954:	08010a20 	.word	0x08010a20
 800e958:	080109a4 	.word	0x080109a4
 800e95c:	080109b5 	.word	0x080109b5
 800e960:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e962:	2b00      	cmp	r3, #0
 800e964:	d1eb      	bne.n	800e93e <__gethex+0x2ee>
 800e966:	e7d8      	b.n	800e91a <__gethex+0x2ca>
 800e968:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1d5      	bne.n	800e91a <__gethex+0x2ca>
 800e96e:	e7e6      	b.n	800e93e <__gethex+0x2ee>
 800e970:	1e6f      	subs	r7, r5, #1
 800e972:	f1ba 0f00 	cmp.w	sl, #0
 800e976:	d131      	bne.n	800e9dc <__gethex+0x38c>
 800e978:	b127      	cbz	r7, 800e984 <__gethex+0x334>
 800e97a:	4639      	mov	r1, r7
 800e97c:	4620      	mov	r0, r4
 800e97e:	f000 fe39 	bl	800f5f4 <__any_on>
 800e982:	4682      	mov	sl, r0
 800e984:	117b      	asrs	r3, r7, #5
 800e986:	2101      	movs	r1, #1
 800e988:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e98c:	f007 071f 	and.w	r7, r7, #31
 800e990:	fa01 f707 	lsl.w	r7, r1, r7
 800e994:	421f      	tst	r7, r3
 800e996:	4629      	mov	r1, r5
 800e998:	4620      	mov	r0, r4
 800e99a:	bf18      	it	ne
 800e99c:	f04a 0a02 	orrne.w	sl, sl, #2
 800e9a0:	1b76      	subs	r6, r6, r5
 800e9a2:	f7ff fded 	bl	800e580 <rshift>
 800e9a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e9aa:	2702      	movs	r7, #2
 800e9ac:	f1ba 0f00 	cmp.w	sl, #0
 800e9b0:	d048      	beq.n	800ea44 <__gethex+0x3f4>
 800e9b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e9b6:	2b02      	cmp	r3, #2
 800e9b8:	d015      	beq.n	800e9e6 <__gethex+0x396>
 800e9ba:	2b03      	cmp	r3, #3
 800e9bc:	d017      	beq.n	800e9ee <__gethex+0x39e>
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d109      	bne.n	800e9d6 <__gethex+0x386>
 800e9c2:	f01a 0f02 	tst.w	sl, #2
 800e9c6:	d006      	beq.n	800e9d6 <__gethex+0x386>
 800e9c8:	f8d9 0000 	ldr.w	r0, [r9]
 800e9cc:	ea4a 0a00 	orr.w	sl, sl, r0
 800e9d0:	f01a 0f01 	tst.w	sl, #1
 800e9d4:	d10e      	bne.n	800e9f4 <__gethex+0x3a4>
 800e9d6:	f047 0710 	orr.w	r7, r7, #16
 800e9da:	e033      	b.n	800ea44 <__gethex+0x3f4>
 800e9dc:	f04f 0a01 	mov.w	sl, #1
 800e9e0:	e7d0      	b.n	800e984 <__gethex+0x334>
 800e9e2:	2701      	movs	r7, #1
 800e9e4:	e7e2      	b.n	800e9ac <__gethex+0x35c>
 800e9e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9e8:	f1c3 0301 	rsb	r3, r3, #1
 800e9ec:	9315      	str	r3, [sp, #84]	; 0x54
 800e9ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d0f0      	beq.n	800e9d6 <__gethex+0x386>
 800e9f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e9f8:	f104 0314 	add.w	r3, r4, #20
 800e9fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ea00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ea04:	f04f 0c00 	mov.w	ip, #0
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ea12:	d01c      	beq.n	800ea4e <__gethex+0x3fe>
 800ea14:	3201      	adds	r2, #1
 800ea16:	6002      	str	r2, [r0, #0]
 800ea18:	2f02      	cmp	r7, #2
 800ea1a:	f104 0314 	add.w	r3, r4, #20
 800ea1e:	d13f      	bne.n	800eaa0 <__gethex+0x450>
 800ea20:	f8d8 2000 	ldr.w	r2, [r8]
 800ea24:	3a01      	subs	r2, #1
 800ea26:	42b2      	cmp	r2, r6
 800ea28:	d10a      	bne.n	800ea40 <__gethex+0x3f0>
 800ea2a:	1171      	asrs	r1, r6, #5
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea32:	f006 061f 	and.w	r6, r6, #31
 800ea36:	fa02 f606 	lsl.w	r6, r2, r6
 800ea3a:	421e      	tst	r6, r3
 800ea3c:	bf18      	it	ne
 800ea3e:	4617      	movne	r7, r2
 800ea40:	f047 0720 	orr.w	r7, r7, #32
 800ea44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea46:	601c      	str	r4, [r3, #0]
 800ea48:	9b04      	ldr	r3, [sp, #16]
 800ea4a:	601d      	str	r5, [r3, #0]
 800ea4c:	e695      	b.n	800e77a <__gethex+0x12a>
 800ea4e:	4299      	cmp	r1, r3
 800ea50:	f843 cc04 	str.w	ip, [r3, #-4]
 800ea54:	d8d8      	bhi.n	800ea08 <__gethex+0x3b8>
 800ea56:	68a3      	ldr	r3, [r4, #8]
 800ea58:	459b      	cmp	fp, r3
 800ea5a:	db19      	blt.n	800ea90 <__gethex+0x440>
 800ea5c:	6861      	ldr	r1, [r4, #4]
 800ea5e:	ee18 0a10 	vmov	r0, s16
 800ea62:	3101      	adds	r1, #1
 800ea64:	f000 f92c 	bl	800ecc0 <_Balloc>
 800ea68:	4681      	mov	r9, r0
 800ea6a:	b918      	cbnz	r0, 800ea74 <__gethex+0x424>
 800ea6c:	4b1a      	ldr	r3, [pc, #104]	; (800ead8 <__gethex+0x488>)
 800ea6e:	4602      	mov	r2, r0
 800ea70:	2184      	movs	r1, #132	; 0x84
 800ea72:	e6a8      	b.n	800e7c6 <__gethex+0x176>
 800ea74:	6922      	ldr	r2, [r4, #16]
 800ea76:	3202      	adds	r2, #2
 800ea78:	f104 010c 	add.w	r1, r4, #12
 800ea7c:	0092      	lsls	r2, r2, #2
 800ea7e:	300c      	adds	r0, #12
 800ea80:	f000 f904 	bl	800ec8c <memcpy>
 800ea84:	4621      	mov	r1, r4
 800ea86:	ee18 0a10 	vmov	r0, s16
 800ea8a:	f000 f959 	bl	800ed40 <_Bfree>
 800ea8e:	464c      	mov	r4, r9
 800ea90:	6923      	ldr	r3, [r4, #16]
 800ea92:	1c5a      	adds	r2, r3, #1
 800ea94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea98:	6122      	str	r2, [r4, #16]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	615a      	str	r2, [r3, #20]
 800ea9e:	e7bb      	b.n	800ea18 <__gethex+0x3c8>
 800eaa0:	6922      	ldr	r2, [r4, #16]
 800eaa2:	455a      	cmp	r2, fp
 800eaa4:	dd0b      	ble.n	800eabe <__gethex+0x46e>
 800eaa6:	2101      	movs	r1, #1
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f7ff fd69 	bl	800e580 <rshift>
 800eaae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eab2:	3501      	adds	r5, #1
 800eab4:	42ab      	cmp	r3, r5
 800eab6:	f6ff aed0 	blt.w	800e85a <__gethex+0x20a>
 800eaba:	2701      	movs	r7, #1
 800eabc:	e7c0      	b.n	800ea40 <__gethex+0x3f0>
 800eabe:	f016 061f 	ands.w	r6, r6, #31
 800eac2:	d0fa      	beq.n	800eaba <__gethex+0x46a>
 800eac4:	449a      	add	sl, r3
 800eac6:	f1c6 0620 	rsb	r6, r6, #32
 800eaca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800eace:	f000 f9ed 	bl	800eeac <__hi0bits>
 800ead2:	42b0      	cmp	r0, r6
 800ead4:	dbe7      	blt.n	800eaa6 <__gethex+0x456>
 800ead6:	e7f0      	b.n	800eaba <__gethex+0x46a>
 800ead8:	080109a4 	.word	0x080109a4

0800eadc <L_shift>:
 800eadc:	f1c2 0208 	rsb	r2, r2, #8
 800eae0:	0092      	lsls	r2, r2, #2
 800eae2:	b570      	push	{r4, r5, r6, lr}
 800eae4:	f1c2 0620 	rsb	r6, r2, #32
 800eae8:	6843      	ldr	r3, [r0, #4]
 800eaea:	6804      	ldr	r4, [r0, #0]
 800eaec:	fa03 f506 	lsl.w	r5, r3, r6
 800eaf0:	432c      	orrs	r4, r5
 800eaf2:	40d3      	lsrs	r3, r2
 800eaf4:	6004      	str	r4, [r0, #0]
 800eaf6:	f840 3f04 	str.w	r3, [r0, #4]!
 800eafa:	4288      	cmp	r0, r1
 800eafc:	d3f4      	bcc.n	800eae8 <L_shift+0xc>
 800eafe:	bd70      	pop	{r4, r5, r6, pc}

0800eb00 <__match>:
 800eb00:	b530      	push	{r4, r5, lr}
 800eb02:	6803      	ldr	r3, [r0, #0]
 800eb04:	3301      	adds	r3, #1
 800eb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb0a:	b914      	cbnz	r4, 800eb12 <__match+0x12>
 800eb0c:	6003      	str	r3, [r0, #0]
 800eb0e:	2001      	movs	r0, #1
 800eb10:	bd30      	pop	{r4, r5, pc}
 800eb12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eb1a:	2d19      	cmp	r5, #25
 800eb1c:	bf98      	it	ls
 800eb1e:	3220      	addls	r2, #32
 800eb20:	42a2      	cmp	r2, r4
 800eb22:	d0f0      	beq.n	800eb06 <__match+0x6>
 800eb24:	2000      	movs	r0, #0
 800eb26:	e7f3      	b.n	800eb10 <__match+0x10>

0800eb28 <__hexnan>:
 800eb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb2c:	680b      	ldr	r3, [r1, #0]
 800eb2e:	6801      	ldr	r1, [r0, #0]
 800eb30:	115e      	asrs	r6, r3, #5
 800eb32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eb36:	f013 031f 	ands.w	r3, r3, #31
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	bf18      	it	ne
 800eb3e:	3604      	addne	r6, #4
 800eb40:	2500      	movs	r5, #0
 800eb42:	1f37      	subs	r7, r6, #4
 800eb44:	4682      	mov	sl, r0
 800eb46:	4690      	mov	r8, r2
 800eb48:	9301      	str	r3, [sp, #4]
 800eb4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800eb4e:	46b9      	mov	r9, r7
 800eb50:	463c      	mov	r4, r7
 800eb52:	9502      	str	r5, [sp, #8]
 800eb54:	46ab      	mov	fp, r5
 800eb56:	784a      	ldrb	r2, [r1, #1]
 800eb58:	1c4b      	adds	r3, r1, #1
 800eb5a:	9303      	str	r3, [sp, #12]
 800eb5c:	b342      	cbz	r2, 800ebb0 <__hexnan+0x88>
 800eb5e:	4610      	mov	r0, r2
 800eb60:	9105      	str	r1, [sp, #20]
 800eb62:	9204      	str	r2, [sp, #16]
 800eb64:	f7ff fd5e 	bl	800e624 <__hexdig_fun>
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	d14f      	bne.n	800ec0c <__hexnan+0xe4>
 800eb6c:	9a04      	ldr	r2, [sp, #16]
 800eb6e:	9905      	ldr	r1, [sp, #20]
 800eb70:	2a20      	cmp	r2, #32
 800eb72:	d818      	bhi.n	800eba6 <__hexnan+0x7e>
 800eb74:	9b02      	ldr	r3, [sp, #8]
 800eb76:	459b      	cmp	fp, r3
 800eb78:	dd13      	ble.n	800eba2 <__hexnan+0x7a>
 800eb7a:	454c      	cmp	r4, r9
 800eb7c:	d206      	bcs.n	800eb8c <__hexnan+0x64>
 800eb7e:	2d07      	cmp	r5, #7
 800eb80:	dc04      	bgt.n	800eb8c <__hexnan+0x64>
 800eb82:	462a      	mov	r2, r5
 800eb84:	4649      	mov	r1, r9
 800eb86:	4620      	mov	r0, r4
 800eb88:	f7ff ffa8 	bl	800eadc <L_shift>
 800eb8c:	4544      	cmp	r4, r8
 800eb8e:	d950      	bls.n	800ec32 <__hexnan+0x10a>
 800eb90:	2300      	movs	r3, #0
 800eb92:	f1a4 0904 	sub.w	r9, r4, #4
 800eb96:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb9a:	f8cd b008 	str.w	fp, [sp, #8]
 800eb9e:	464c      	mov	r4, r9
 800eba0:	461d      	mov	r5, r3
 800eba2:	9903      	ldr	r1, [sp, #12]
 800eba4:	e7d7      	b.n	800eb56 <__hexnan+0x2e>
 800eba6:	2a29      	cmp	r2, #41	; 0x29
 800eba8:	d156      	bne.n	800ec58 <__hexnan+0x130>
 800ebaa:	3102      	adds	r1, #2
 800ebac:	f8ca 1000 	str.w	r1, [sl]
 800ebb0:	f1bb 0f00 	cmp.w	fp, #0
 800ebb4:	d050      	beq.n	800ec58 <__hexnan+0x130>
 800ebb6:	454c      	cmp	r4, r9
 800ebb8:	d206      	bcs.n	800ebc8 <__hexnan+0xa0>
 800ebba:	2d07      	cmp	r5, #7
 800ebbc:	dc04      	bgt.n	800ebc8 <__hexnan+0xa0>
 800ebbe:	462a      	mov	r2, r5
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f7ff ff8a 	bl	800eadc <L_shift>
 800ebc8:	4544      	cmp	r4, r8
 800ebca:	d934      	bls.n	800ec36 <__hexnan+0x10e>
 800ebcc:	f1a8 0204 	sub.w	r2, r8, #4
 800ebd0:	4623      	mov	r3, r4
 800ebd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ebd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ebda:	429f      	cmp	r7, r3
 800ebdc:	d2f9      	bcs.n	800ebd2 <__hexnan+0xaa>
 800ebde:	1b3b      	subs	r3, r7, r4
 800ebe0:	f023 0303 	bic.w	r3, r3, #3
 800ebe4:	3304      	adds	r3, #4
 800ebe6:	3401      	adds	r4, #1
 800ebe8:	3e03      	subs	r6, #3
 800ebea:	42b4      	cmp	r4, r6
 800ebec:	bf88      	it	hi
 800ebee:	2304      	movhi	r3, #4
 800ebf0:	4443      	add	r3, r8
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f843 2b04 	str.w	r2, [r3], #4
 800ebf8:	429f      	cmp	r7, r3
 800ebfa:	d2fb      	bcs.n	800ebf4 <__hexnan+0xcc>
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	b91b      	cbnz	r3, 800ec08 <__hexnan+0xe0>
 800ec00:	4547      	cmp	r7, r8
 800ec02:	d127      	bne.n	800ec54 <__hexnan+0x12c>
 800ec04:	2301      	movs	r3, #1
 800ec06:	603b      	str	r3, [r7, #0]
 800ec08:	2005      	movs	r0, #5
 800ec0a:	e026      	b.n	800ec5a <__hexnan+0x132>
 800ec0c:	3501      	adds	r5, #1
 800ec0e:	2d08      	cmp	r5, #8
 800ec10:	f10b 0b01 	add.w	fp, fp, #1
 800ec14:	dd06      	ble.n	800ec24 <__hexnan+0xfc>
 800ec16:	4544      	cmp	r4, r8
 800ec18:	d9c3      	bls.n	800eba2 <__hexnan+0x7a>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec20:	2501      	movs	r5, #1
 800ec22:	3c04      	subs	r4, #4
 800ec24:	6822      	ldr	r2, [r4, #0]
 800ec26:	f000 000f 	and.w	r0, r0, #15
 800ec2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ec2e:	6022      	str	r2, [r4, #0]
 800ec30:	e7b7      	b.n	800eba2 <__hexnan+0x7a>
 800ec32:	2508      	movs	r5, #8
 800ec34:	e7b5      	b.n	800eba2 <__hexnan+0x7a>
 800ec36:	9b01      	ldr	r3, [sp, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d0df      	beq.n	800ebfc <__hexnan+0xd4>
 800ec3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec40:	f1c3 0320 	rsb	r3, r3, #32
 800ec44:	fa22 f303 	lsr.w	r3, r2, r3
 800ec48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ec4c:	401a      	ands	r2, r3
 800ec4e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ec52:	e7d3      	b.n	800ebfc <__hexnan+0xd4>
 800ec54:	3f04      	subs	r7, #4
 800ec56:	e7d1      	b.n	800ebfc <__hexnan+0xd4>
 800ec58:	2004      	movs	r0, #4
 800ec5a:	b007      	add	sp, #28
 800ec5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec60 <_localeconv_r>:
 800ec60:	4800      	ldr	r0, [pc, #0]	; (800ec64 <_localeconv_r+0x4>)
 800ec62:	4770      	bx	lr
 800ec64:	20000184 	.word	0x20000184

0800ec68 <__ascii_mbtowc>:
 800ec68:	b082      	sub	sp, #8
 800ec6a:	b901      	cbnz	r1, 800ec6e <__ascii_mbtowc+0x6>
 800ec6c:	a901      	add	r1, sp, #4
 800ec6e:	b142      	cbz	r2, 800ec82 <__ascii_mbtowc+0x1a>
 800ec70:	b14b      	cbz	r3, 800ec86 <__ascii_mbtowc+0x1e>
 800ec72:	7813      	ldrb	r3, [r2, #0]
 800ec74:	600b      	str	r3, [r1, #0]
 800ec76:	7812      	ldrb	r2, [r2, #0]
 800ec78:	1e10      	subs	r0, r2, #0
 800ec7a:	bf18      	it	ne
 800ec7c:	2001      	movne	r0, #1
 800ec7e:	b002      	add	sp, #8
 800ec80:	4770      	bx	lr
 800ec82:	4610      	mov	r0, r2
 800ec84:	e7fb      	b.n	800ec7e <__ascii_mbtowc+0x16>
 800ec86:	f06f 0001 	mvn.w	r0, #1
 800ec8a:	e7f8      	b.n	800ec7e <__ascii_mbtowc+0x16>

0800ec8c <memcpy>:
 800ec8c:	440a      	add	r2, r1
 800ec8e:	4291      	cmp	r1, r2
 800ec90:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec94:	d100      	bne.n	800ec98 <memcpy+0xc>
 800ec96:	4770      	bx	lr
 800ec98:	b510      	push	{r4, lr}
 800ec9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eca2:	4291      	cmp	r1, r2
 800eca4:	d1f9      	bne.n	800ec9a <memcpy+0xe>
 800eca6:	bd10      	pop	{r4, pc}

0800eca8 <__malloc_lock>:
 800eca8:	4801      	ldr	r0, [pc, #4]	; (800ecb0 <__malloc_lock+0x8>)
 800ecaa:	f000 be8a 	b.w	800f9c2 <__retarget_lock_acquire_recursive>
 800ecae:	bf00      	nop
 800ecb0:	20000b0c 	.word	0x20000b0c

0800ecb4 <__malloc_unlock>:
 800ecb4:	4801      	ldr	r0, [pc, #4]	; (800ecbc <__malloc_unlock+0x8>)
 800ecb6:	f000 be85 	b.w	800f9c4 <__retarget_lock_release_recursive>
 800ecba:	bf00      	nop
 800ecbc:	20000b0c 	.word	0x20000b0c

0800ecc0 <_Balloc>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	460d      	mov	r5, r1
 800ecc8:	b976      	cbnz	r6, 800ece8 <_Balloc+0x28>
 800ecca:	2010      	movs	r0, #16
 800eccc:	f7fc ffb8 	bl	800bc40 <malloc>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	6260      	str	r0, [r4, #36]	; 0x24
 800ecd4:	b920      	cbnz	r0, 800ece0 <_Balloc+0x20>
 800ecd6:	4b18      	ldr	r3, [pc, #96]	; (800ed38 <_Balloc+0x78>)
 800ecd8:	4818      	ldr	r0, [pc, #96]	; (800ed3c <_Balloc+0x7c>)
 800ecda:	2166      	movs	r1, #102	; 0x66
 800ecdc:	f000 fe40 	bl	800f960 <__assert_func>
 800ece0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ece4:	6006      	str	r6, [r0, #0]
 800ece6:	60c6      	str	r6, [r0, #12]
 800ece8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ecea:	68f3      	ldr	r3, [r6, #12]
 800ecec:	b183      	cbz	r3, 800ed10 <_Balloc+0x50>
 800ecee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ecf6:	b9b8      	cbnz	r0, 800ed28 <_Balloc+0x68>
 800ecf8:	2101      	movs	r1, #1
 800ecfa:	fa01 f605 	lsl.w	r6, r1, r5
 800ecfe:	1d72      	adds	r2, r6, #5
 800ed00:	0092      	lsls	r2, r2, #2
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 fc97 	bl	800f636 <_calloc_r>
 800ed08:	b160      	cbz	r0, 800ed24 <_Balloc+0x64>
 800ed0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ed0e:	e00e      	b.n	800ed2e <_Balloc+0x6e>
 800ed10:	2221      	movs	r2, #33	; 0x21
 800ed12:	2104      	movs	r1, #4
 800ed14:	4620      	mov	r0, r4
 800ed16:	f000 fc8e 	bl	800f636 <_calloc_r>
 800ed1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed1c:	60f0      	str	r0, [r6, #12]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1e4      	bne.n	800ecee <_Balloc+0x2e>
 800ed24:	2000      	movs	r0, #0
 800ed26:	bd70      	pop	{r4, r5, r6, pc}
 800ed28:	6802      	ldr	r2, [r0, #0]
 800ed2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed2e:	2300      	movs	r3, #0
 800ed30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed34:	e7f7      	b.n	800ed26 <_Balloc+0x66>
 800ed36:	bf00      	nop
 800ed38:	0801092e 	.word	0x0801092e
 800ed3c:	08010a34 	.word	0x08010a34

0800ed40 <_Bfree>:
 800ed40:	b570      	push	{r4, r5, r6, lr}
 800ed42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed44:	4605      	mov	r5, r0
 800ed46:	460c      	mov	r4, r1
 800ed48:	b976      	cbnz	r6, 800ed68 <_Bfree+0x28>
 800ed4a:	2010      	movs	r0, #16
 800ed4c:	f7fc ff78 	bl	800bc40 <malloc>
 800ed50:	4602      	mov	r2, r0
 800ed52:	6268      	str	r0, [r5, #36]	; 0x24
 800ed54:	b920      	cbnz	r0, 800ed60 <_Bfree+0x20>
 800ed56:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <_Bfree+0x3c>)
 800ed58:	4809      	ldr	r0, [pc, #36]	; (800ed80 <_Bfree+0x40>)
 800ed5a:	218a      	movs	r1, #138	; 0x8a
 800ed5c:	f000 fe00 	bl	800f960 <__assert_func>
 800ed60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed64:	6006      	str	r6, [r0, #0]
 800ed66:	60c6      	str	r6, [r0, #12]
 800ed68:	b13c      	cbz	r4, 800ed7a <_Bfree+0x3a>
 800ed6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed6c:	6862      	ldr	r2, [r4, #4]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed74:	6021      	str	r1, [r4, #0]
 800ed76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}
 800ed7c:	0801092e 	.word	0x0801092e
 800ed80:	08010a34 	.word	0x08010a34

0800ed84 <__multadd>:
 800ed84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed88:	690e      	ldr	r6, [r1, #16]
 800ed8a:	4607      	mov	r7, r0
 800ed8c:	4698      	mov	r8, r3
 800ed8e:	460c      	mov	r4, r1
 800ed90:	f101 0014 	add.w	r0, r1, #20
 800ed94:	2300      	movs	r3, #0
 800ed96:	6805      	ldr	r5, [r0, #0]
 800ed98:	b2a9      	uxth	r1, r5
 800ed9a:	fb02 8101 	mla	r1, r2, r1, r8
 800ed9e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eda2:	0c2d      	lsrs	r5, r5, #16
 800eda4:	fb02 c505 	mla	r5, r2, r5, ip
 800eda8:	b289      	uxth	r1, r1
 800edaa:	3301      	adds	r3, #1
 800edac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800edb0:	429e      	cmp	r6, r3
 800edb2:	f840 1b04 	str.w	r1, [r0], #4
 800edb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800edba:	dcec      	bgt.n	800ed96 <__multadd+0x12>
 800edbc:	f1b8 0f00 	cmp.w	r8, #0
 800edc0:	d022      	beq.n	800ee08 <__multadd+0x84>
 800edc2:	68a3      	ldr	r3, [r4, #8]
 800edc4:	42b3      	cmp	r3, r6
 800edc6:	dc19      	bgt.n	800edfc <__multadd+0x78>
 800edc8:	6861      	ldr	r1, [r4, #4]
 800edca:	4638      	mov	r0, r7
 800edcc:	3101      	adds	r1, #1
 800edce:	f7ff ff77 	bl	800ecc0 <_Balloc>
 800edd2:	4605      	mov	r5, r0
 800edd4:	b928      	cbnz	r0, 800ede2 <__multadd+0x5e>
 800edd6:	4602      	mov	r2, r0
 800edd8:	4b0d      	ldr	r3, [pc, #52]	; (800ee10 <__multadd+0x8c>)
 800edda:	480e      	ldr	r0, [pc, #56]	; (800ee14 <__multadd+0x90>)
 800eddc:	21b5      	movs	r1, #181	; 0xb5
 800edde:	f000 fdbf 	bl	800f960 <__assert_func>
 800ede2:	6922      	ldr	r2, [r4, #16]
 800ede4:	3202      	adds	r2, #2
 800ede6:	f104 010c 	add.w	r1, r4, #12
 800edea:	0092      	lsls	r2, r2, #2
 800edec:	300c      	adds	r0, #12
 800edee:	f7ff ff4d 	bl	800ec8c <memcpy>
 800edf2:	4621      	mov	r1, r4
 800edf4:	4638      	mov	r0, r7
 800edf6:	f7ff ffa3 	bl	800ed40 <_Bfree>
 800edfa:	462c      	mov	r4, r5
 800edfc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ee00:	3601      	adds	r6, #1
 800ee02:	f8c3 8014 	str.w	r8, [r3, #20]
 800ee06:	6126      	str	r6, [r4, #16]
 800ee08:	4620      	mov	r0, r4
 800ee0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee0e:	bf00      	nop
 800ee10:	080109a4 	.word	0x080109a4
 800ee14:	08010a34 	.word	0x08010a34

0800ee18 <__s2b>:
 800ee18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee1c:	460c      	mov	r4, r1
 800ee1e:	4615      	mov	r5, r2
 800ee20:	461f      	mov	r7, r3
 800ee22:	2209      	movs	r2, #9
 800ee24:	3308      	adds	r3, #8
 800ee26:	4606      	mov	r6, r0
 800ee28:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	2201      	movs	r2, #1
 800ee30:	429a      	cmp	r2, r3
 800ee32:	db09      	blt.n	800ee48 <__s2b+0x30>
 800ee34:	4630      	mov	r0, r6
 800ee36:	f7ff ff43 	bl	800ecc0 <_Balloc>
 800ee3a:	b940      	cbnz	r0, 800ee4e <__s2b+0x36>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	4b19      	ldr	r3, [pc, #100]	; (800eea4 <__s2b+0x8c>)
 800ee40:	4819      	ldr	r0, [pc, #100]	; (800eea8 <__s2b+0x90>)
 800ee42:	21ce      	movs	r1, #206	; 0xce
 800ee44:	f000 fd8c 	bl	800f960 <__assert_func>
 800ee48:	0052      	lsls	r2, r2, #1
 800ee4a:	3101      	adds	r1, #1
 800ee4c:	e7f0      	b.n	800ee30 <__s2b+0x18>
 800ee4e:	9b08      	ldr	r3, [sp, #32]
 800ee50:	6143      	str	r3, [r0, #20]
 800ee52:	2d09      	cmp	r5, #9
 800ee54:	f04f 0301 	mov.w	r3, #1
 800ee58:	6103      	str	r3, [r0, #16]
 800ee5a:	dd16      	ble.n	800ee8a <__s2b+0x72>
 800ee5c:	f104 0909 	add.w	r9, r4, #9
 800ee60:	46c8      	mov	r8, r9
 800ee62:	442c      	add	r4, r5
 800ee64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ee68:	4601      	mov	r1, r0
 800ee6a:	3b30      	subs	r3, #48	; 0x30
 800ee6c:	220a      	movs	r2, #10
 800ee6e:	4630      	mov	r0, r6
 800ee70:	f7ff ff88 	bl	800ed84 <__multadd>
 800ee74:	45a0      	cmp	r8, r4
 800ee76:	d1f5      	bne.n	800ee64 <__s2b+0x4c>
 800ee78:	f1a5 0408 	sub.w	r4, r5, #8
 800ee7c:	444c      	add	r4, r9
 800ee7e:	1b2d      	subs	r5, r5, r4
 800ee80:	1963      	adds	r3, r4, r5
 800ee82:	42bb      	cmp	r3, r7
 800ee84:	db04      	blt.n	800ee90 <__s2b+0x78>
 800ee86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee8a:	340a      	adds	r4, #10
 800ee8c:	2509      	movs	r5, #9
 800ee8e:	e7f6      	b.n	800ee7e <__s2b+0x66>
 800ee90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee94:	4601      	mov	r1, r0
 800ee96:	3b30      	subs	r3, #48	; 0x30
 800ee98:	220a      	movs	r2, #10
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	f7ff ff72 	bl	800ed84 <__multadd>
 800eea0:	e7ee      	b.n	800ee80 <__s2b+0x68>
 800eea2:	bf00      	nop
 800eea4:	080109a4 	.word	0x080109a4
 800eea8:	08010a34 	.word	0x08010a34

0800eeac <__hi0bits>:
 800eeac:	0c03      	lsrs	r3, r0, #16
 800eeae:	041b      	lsls	r3, r3, #16
 800eeb0:	b9d3      	cbnz	r3, 800eee8 <__hi0bits+0x3c>
 800eeb2:	0400      	lsls	r0, r0, #16
 800eeb4:	2310      	movs	r3, #16
 800eeb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eeba:	bf04      	itt	eq
 800eebc:	0200      	lsleq	r0, r0, #8
 800eebe:	3308      	addeq	r3, #8
 800eec0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eec4:	bf04      	itt	eq
 800eec6:	0100      	lsleq	r0, r0, #4
 800eec8:	3304      	addeq	r3, #4
 800eeca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eece:	bf04      	itt	eq
 800eed0:	0080      	lsleq	r0, r0, #2
 800eed2:	3302      	addeq	r3, #2
 800eed4:	2800      	cmp	r0, #0
 800eed6:	db05      	blt.n	800eee4 <__hi0bits+0x38>
 800eed8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eedc:	f103 0301 	add.w	r3, r3, #1
 800eee0:	bf08      	it	eq
 800eee2:	2320      	moveq	r3, #32
 800eee4:	4618      	mov	r0, r3
 800eee6:	4770      	bx	lr
 800eee8:	2300      	movs	r3, #0
 800eeea:	e7e4      	b.n	800eeb6 <__hi0bits+0xa>

0800eeec <__lo0bits>:
 800eeec:	6803      	ldr	r3, [r0, #0]
 800eeee:	f013 0207 	ands.w	r2, r3, #7
 800eef2:	4601      	mov	r1, r0
 800eef4:	d00b      	beq.n	800ef0e <__lo0bits+0x22>
 800eef6:	07da      	lsls	r2, r3, #31
 800eef8:	d424      	bmi.n	800ef44 <__lo0bits+0x58>
 800eefa:	0798      	lsls	r0, r3, #30
 800eefc:	bf49      	itett	mi
 800eefe:	085b      	lsrmi	r3, r3, #1
 800ef00:	089b      	lsrpl	r3, r3, #2
 800ef02:	2001      	movmi	r0, #1
 800ef04:	600b      	strmi	r3, [r1, #0]
 800ef06:	bf5c      	itt	pl
 800ef08:	600b      	strpl	r3, [r1, #0]
 800ef0a:	2002      	movpl	r0, #2
 800ef0c:	4770      	bx	lr
 800ef0e:	b298      	uxth	r0, r3
 800ef10:	b9b0      	cbnz	r0, 800ef40 <__lo0bits+0x54>
 800ef12:	0c1b      	lsrs	r3, r3, #16
 800ef14:	2010      	movs	r0, #16
 800ef16:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ef1a:	bf04      	itt	eq
 800ef1c:	0a1b      	lsreq	r3, r3, #8
 800ef1e:	3008      	addeq	r0, #8
 800ef20:	071a      	lsls	r2, r3, #28
 800ef22:	bf04      	itt	eq
 800ef24:	091b      	lsreq	r3, r3, #4
 800ef26:	3004      	addeq	r0, #4
 800ef28:	079a      	lsls	r2, r3, #30
 800ef2a:	bf04      	itt	eq
 800ef2c:	089b      	lsreq	r3, r3, #2
 800ef2e:	3002      	addeq	r0, #2
 800ef30:	07da      	lsls	r2, r3, #31
 800ef32:	d403      	bmi.n	800ef3c <__lo0bits+0x50>
 800ef34:	085b      	lsrs	r3, r3, #1
 800ef36:	f100 0001 	add.w	r0, r0, #1
 800ef3a:	d005      	beq.n	800ef48 <__lo0bits+0x5c>
 800ef3c:	600b      	str	r3, [r1, #0]
 800ef3e:	4770      	bx	lr
 800ef40:	4610      	mov	r0, r2
 800ef42:	e7e8      	b.n	800ef16 <__lo0bits+0x2a>
 800ef44:	2000      	movs	r0, #0
 800ef46:	4770      	bx	lr
 800ef48:	2020      	movs	r0, #32
 800ef4a:	4770      	bx	lr

0800ef4c <__i2b>:
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	460c      	mov	r4, r1
 800ef50:	2101      	movs	r1, #1
 800ef52:	f7ff feb5 	bl	800ecc0 <_Balloc>
 800ef56:	4602      	mov	r2, r0
 800ef58:	b928      	cbnz	r0, 800ef66 <__i2b+0x1a>
 800ef5a:	4b05      	ldr	r3, [pc, #20]	; (800ef70 <__i2b+0x24>)
 800ef5c:	4805      	ldr	r0, [pc, #20]	; (800ef74 <__i2b+0x28>)
 800ef5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ef62:	f000 fcfd 	bl	800f960 <__assert_func>
 800ef66:	2301      	movs	r3, #1
 800ef68:	6144      	str	r4, [r0, #20]
 800ef6a:	6103      	str	r3, [r0, #16]
 800ef6c:	bd10      	pop	{r4, pc}
 800ef6e:	bf00      	nop
 800ef70:	080109a4 	.word	0x080109a4
 800ef74:	08010a34 	.word	0x08010a34

0800ef78 <__multiply>:
 800ef78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef7c:	4614      	mov	r4, r2
 800ef7e:	690a      	ldr	r2, [r1, #16]
 800ef80:	6923      	ldr	r3, [r4, #16]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	bfb8      	it	lt
 800ef86:	460b      	movlt	r3, r1
 800ef88:	460d      	mov	r5, r1
 800ef8a:	bfbc      	itt	lt
 800ef8c:	4625      	movlt	r5, r4
 800ef8e:	461c      	movlt	r4, r3
 800ef90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ef94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ef98:	68ab      	ldr	r3, [r5, #8]
 800ef9a:	6869      	ldr	r1, [r5, #4]
 800ef9c:	eb0a 0709 	add.w	r7, sl, r9
 800efa0:	42bb      	cmp	r3, r7
 800efa2:	b085      	sub	sp, #20
 800efa4:	bfb8      	it	lt
 800efa6:	3101      	addlt	r1, #1
 800efa8:	f7ff fe8a 	bl	800ecc0 <_Balloc>
 800efac:	b930      	cbnz	r0, 800efbc <__multiply+0x44>
 800efae:	4602      	mov	r2, r0
 800efb0:	4b42      	ldr	r3, [pc, #264]	; (800f0bc <__multiply+0x144>)
 800efb2:	4843      	ldr	r0, [pc, #268]	; (800f0c0 <__multiply+0x148>)
 800efb4:	f240 115d 	movw	r1, #349	; 0x15d
 800efb8:	f000 fcd2 	bl	800f960 <__assert_func>
 800efbc:	f100 0614 	add.w	r6, r0, #20
 800efc0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800efc4:	4633      	mov	r3, r6
 800efc6:	2200      	movs	r2, #0
 800efc8:	4543      	cmp	r3, r8
 800efca:	d31e      	bcc.n	800f00a <__multiply+0x92>
 800efcc:	f105 0c14 	add.w	ip, r5, #20
 800efd0:	f104 0314 	add.w	r3, r4, #20
 800efd4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800efd8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800efdc:	9202      	str	r2, [sp, #8]
 800efde:	ebac 0205 	sub.w	r2, ip, r5
 800efe2:	3a15      	subs	r2, #21
 800efe4:	f022 0203 	bic.w	r2, r2, #3
 800efe8:	3204      	adds	r2, #4
 800efea:	f105 0115 	add.w	r1, r5, #21
 800efee:	458c      	cmp	ip, r1
 800eff0:	bf38      	it	cc
 800eff2:	2204      	movcc	r2, #4
 800eff4:	9201      	str	r2, [sp, #4]
 800eff6:	9a02      	ldr	r2, [sp, #8]
 800eff8:	9303      	str	r3, [sp, #12]
 800effa:	429a      	cmp	r2, r3
 800effc:	d808      	bhi.n	800f010 <__multiply+0x98>
 800effe:	2f00      	cmp	r7, #0
 800f000:	dc55      	bgt.n	800f0ae <__multiply+0x136>
 800f002:	6107      	str	r7, [r0, #16]
 800f004:	b005      	add	sp, #20
 800f006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00a:	f843 2b04 	str.w	r2, [r3], #4
 800f00e:	e7db      	b.n	800efc8 <__multiply+0x50>
 800f010:	f8b3 a000 	ldrh.w	sl, [r3]
 800f014:	f1ba 0f00 	cmp.w	sl, #0
 800f018:	d020      	beq.n	800f05c <__multiply+0xe4>
 800f01a:	f105 0e14 	add.w	lr, r5, #20
 800f01e:	46b1      	mov	r9, r6
 800f020:	2200      	movs	r2, #0
 800f022:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f026:	f8d9 b000 	ldr.w	fp, [r9]
 800f02a:	b2a1      	uxth	r1, r4
 800f02c:	fa1f fb8b 	uxth.w	fp, fp
 800f030:	fb0a b101 	mla	r1, sl, r1, fp
 800f034:	4411      	add	r1, r2
 800f036:	f8d9 2000 	ldr.w	r2, [r9]
 800f03a:	0c24      	lsrs	r4, r4, #16
 800f03c:	0c12      	lsrs	r2, r2, #16
 800f03e:	fb0a 2404 	mla	r4, sl, r4, r2
 800f042:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f046:	b289      	uxth	r1, r1
 800f048:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f04c:	45f4      	cmp	ip, lr
 800f04e:	f849 1b04 	str.w	r1, [r9], #4
 800f052:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f056:	d8e4      	bhi.n	800f022 <__multiply+0xaa>
 800f058:	9901      	ldr	r1, [sp, #4]
 800f05a:	5072      	str	r2, [r6, r1]
 800f05c:	9a03      	ldr	r2, [sp, #12]
 800f05e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f062:	3304      	adds	r3, #4
 800f064:	f1b9 0f00 	cmp.w	r9, #0
 800f068:	d01f      	beq.n	800f0aa <__multiply+0x132>
 800f06a:	6834      	ldr	r4, [r6, #0]
 800f06c:	f105 0114 	add.w	r1, r5, #20
 800f070:	46b6      	mov	lr, r6
 800f072:	f04f 0a00 	mov.w	sl, #0
 800f076:	880a      	ldrh	r2, [r1, #0]
 800f078:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f07c:	fb09 b202 	mla	r2, r9, r2, fp
 800f080:	4492      	add	sl, r2
 800f082:	b2a4      	uxth	r4, r4
 800f084:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f088:	f84e 4b04 	str.w	r4, [lr], #4
 800f08c:	f851 4b04 	ldr.w	r4, [r1], #4
 800f090:	f8be 2000 	ldrh.w	r2, [lr]
 800f094:	0c24      	lsrs	r4, r4, #16
 800f096:	fb09 2404 	mla	r4, r9, r4, r2
 800f09a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f09e:	458c      	cmp	ip, r1
 800f0a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f0a4:	d8e7      	bhi.n	800f076 <__multiply+0xfe>
 800f0a6:	9a01      	ldr	r2, [sp, #4]
 800f0a8:	50b4      	str	r4, [r6, r2]
 800f0aa:	3604      	adds	r6, #4
 800f0ac:	e7a3      	b.n	800eff6 <__multiply+0x7e>
 800f0ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1a5      	bne.n	800f002 <__multiply+0x8a>
 800f0b6:	3f01      	subs	r7, #1
 800f0b8:	e7a1      	b.n	800effe <__multiply+0x86>
 800f0ba:	bf00      	nop
 800f0bc:	080109a4 	.word	0x080109a4
 800f0c0:	08010a34 	.word	0x08010a34

0800f0c4 <__pow5mult>:
 800f0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0c8:	4615      	mov	r5, r2
 800f0ca:	f012 0203 	ands.w	r2, r2, #3
 800f0ce:	4606      	mov	r6, r0
 800f0d0:	460f      	mov	r7, r1
 800f0d2:	d007      	beq.n	800f0e4 <__pow5mult+0x20>
 800f0d4:	4c25      	ldr	r4, [pc, #148]	; (800f16c <__pow5mult+0xa8>)
 800f0d6:	3a01      	subs	r2, #1
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0de:	f7ff fe51 	bl	800ed84 <__multadd>
 800f0e2:	4607      	mov	r7, r0
 800f0e4:	10ad      	asrs	r5, r5, #2
 800f0e6:	d03d      	beq.n	800f164 <__pow5mult+0xa0>
 800f0e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f0ea:	b97c      	cbnz	r4, 800f10c <__pow5mult+0x48>
 800f0ec:	2010      	movs	r0, #16
 800f0ee:	f7fc fda7 	bl	800bc40 <malloc>
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	6270      	str	r0, [r6, #36]	; 0x24
 800f0f6:	b928      	cbnz	r0, 800f104 <__pow5mult+0x40>
 800f0f8:	4b1d      	ldr	r3, [pc, #116]	; (800f170 <__pow5mult+0xac>)
 800f0fa:	481e      	ldr	r0, [pc, #120]	; (800f174 <__pow5mult+0xb0>)
 800f0fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f100:	f000 fc2e 	bl	800f960 <__assert_func>
 800f104:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f108:	6004      	str	r4, [r0, #0]
 800f10a:	60c4      	str	r4, [r0, #12]
 800f10c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f110:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f114:	b94c      	cbnz	r4, 800f12a <__pow5mult+0x66>
 800f116:	f240 2171 	movw	r1, #625	; 0x271
 800f11a:	4630      	mov	r0, r6
 800f11c:	f7ff ff16 	bl	800ef4c <__i2b>
 800f120:	2300      	movs	r3, #0
 800f122:	f8c8 0008 	str.w	r0, [r8, #8]
 800f126:	4604      	mov	r4, r0
 800f128:	6003      	str	r3, [r0, #0]
 800f12a:	f04f 0900 	mov.w	r9, #0
 800f12e:	07eb      	lsls	r3, r5, #31
 800f130:	d50a      	bpl.n	800f148 <__pow5mult+0x84>
 800f132:	4639      	mov	r1, r7
 800f134:	4622      	mov	r2, r4
 800f136:	4630      	mov	r0, r6
 800f138:	f7ff ff1e 	bl	800ef78 <__multiply>
 800f13c:	4639      	mov	r1, r7
 800f13e:	4680      	mov	r8, r0
 800f140:	4630      	mov	r0, r6
 800f142:	f7ff fdfd 	bl	800ed40 <_Bfree>
 800f146:	4647      	mov	r7, r8
 800f148:	106d      	asrs	r5, r5, #1
 800f14a:	d00b      	beq.n	800f164 <__pow5mult+0xa0>
 800f14c:	6820      	ldr	r0, [r4, #0]
 800f14e:	b938      	cbnz	r0, 800f160 <__pow5mult+0x9c>
 800f150:	4622      	mov	r2, r4
 800f152:	4621      	mov	r1, r4
 800f154:	4630      	mov	r0, r6
 800f156:	f7ff ff0f 	bl	800ef78 <__multiply>
 800f15a:	6020      	str	r0, [r4, #0]
 800f15c:	f8c0 9000 	str.w	r9, [r0]
 800f160:	4604      	mov	r4, r0
 800f162:	e7e4      	b.n	800f12e <__pow5mult+0x6a>
 800f164:	4638      	mov	r0, r7
 800f166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f16a:	bf00      	nop
 800f16c:	08010b88 	.word	0x08010b88
 800f170:	0801092e 	.word	0x0801092e
 800f174:	08010a34 	.word	0x08010a34

0800f178 <__lshift>:
 800f178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f17c:	460c      	mov	r4, r1
 800f17e:	6849      	ldr	r1, [r1, #4]
 800f180:	6923      	ldr	r3, [r4, #16]
 800f182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f186:	68a3      	ldr	r3, [r4, #8]
 800f188:	4607      	mov	r7, r0
 800f18a:	4691      	mov	r9, r2
 800f18c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f190:	f108 0601 	add.w	r6, r8, #1
 800f194:	42b3      	cmp	r3, r6
 800f196:	db0b      	blt.n	800f1b0 <__lshift+0x38>
 800f198:	4638      	mov	r0, r7
 800f19a:	f7ff fd91 	bl	800ecc0 <_Balloc>
 800f19e:	4605      	mov	r5, r0
 800f1a0:	b948      	cbnz	r0, 800f1b6 <__lshift+0x3e>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	4b28      	ldr	r3, [pc, #160]	; (800f248 <__lshift+0xd0>)
 800f1a6:	4829      	ldr	r0, [pc, #164]	; (800f24c <__lshift+0xd4>)
 800f1a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f1ac:	f000 fbd8 	bl	800f960 <__assert_func>
 800f1b0:	3101      	adds	r1, #1
 800f1b2:	005b      	lsls	r3, r3, #1
 800f1b4:	e7ee      	b.n	800f194 <__lshift+0x1c>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	f100 0114 	add.w	r1, r0, #20
 800f1bc:	f100 0210 	add.w	r2, r0, #16
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	4553      	cmp	r3, sl
 800f1c4:	db33      	blt.n	800f22e <__lshift+0xb6>
 800f1c6:	6920      	ldr	r0, [r4, #16]
 800f1c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f1cc:	f104 0314 	add.w	r3, r4, #20
 800f1d0:	f019 091f 	ands.w	r9, r9, #31
 800f1d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f1d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f1dc:	d02b      	beq.n	800f236 <__lshift+0xbe>
 800f1de:	f1c9 0e20 	rsb	lr, r9, #32
 800f1e2:	468a      	mov	sl, r1
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	6818      	ldr	r0, [r3, #0]
 800f1e8:	fa00 f009 	lsl.w	r0, r0, r9
 800f1ec:	4302      	orrs	r2, r0
 800f1ee:	f84a 2b04 	str.w	r2, [sl], #4
 800f1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1f6:	459c      	cmp	ip, r3
 800f1f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800f1fc:	d8f3      	bhi.n	800f1e6 <__lshift+0x6e>
 800f1fe:	ebac 0304 	sub.w	r3, ip, r4
 800f202:	3b15      	subs	r3, #21
 800f204:	f023 0303 	bic.w	r3, r3, #3
 800f208:	3304      	adds	r3, #4
 800f20a:	f104 0015 	add.w	r0, r4, #21
 800f20e:	4584      	cmp	ip, r0
 800f210:	bf38      	it	cc
 800f212:	2304      	movcc	r3, #4
 800f214:	50ca      	str	r2, [r1, r3]
 800f216:	b10a      	cbz	r2, 800f21c <__lshift+0xa4>
 800f218:	f108 0602 	add.w	r6, r8, #2
 800f21c:	3e01      	subs	r6, #1
 800f21e:	4638      	mov	r0, r7
 800f220:	612e      	str	r6, [r5, #16]
 800f222:	4621      	mov	r1, r4
 800f224:	f7ff fd8c 	bl	800ed40 <_Bfree>
 800f228:	4628      	mov	r0, r5
 800f22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f22e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f232:	3301      	adds	r3, #1
 800f234:	e7c5      	b.n	800f1c2 <__lshift+0x4a>
 800f236:	3904      	subs	r1, #4
 800f238:	f853 2b04 	ldr.w	r2, [r3], #4
 800f23c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f240:	459c      	cmp	ip, r3
 800f242:	d8f9      	bhi.n	800f238 <__lshift+0xc0>
 800f244:	e7ea      	b.n	800f21c <__lshift+0xa4>
 800f246:	bf00      	nop
 800f248:	080109a4 	.word	0x080109a4
 800f24c:	08010a34 	.word	0x08010a34

0800f250 <__mcmp>:
 800f250:	b530      	push	{r4, r5, lr}
 800f252:	6902      	ldr	r2, [r0, #16]
 800f254:	690c      	ldr	r4, [r1, #16]
 800f256:	1b12      	subs	r2, r2, r4
 800f258:	d10e      	bne.n	800f278 <__mcmp+0x28>
 800f25a:	f100 0314 	add.w	r3, r0, #20
 800f25e:	3114      	adds	r1, #20
 800f260:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f264:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f268:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f26c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f270:	42a5      	cmp	r5, r4
 800f272:	d003      	beq.n	800f27c <__mcmp+0x2c>
 800f274:	d305      	bcc.n	800f282 <__mcmp+0x32>
 800f276:	2201      	movs	r2, #1
 800f278:	4610      	mov	r0, r2
 800f27a:	bd30      	pop	{r4, r5, pc}
 800f27c:	4283      	cmp	r3, r0
 800f27e:	d3f3      	bcc.n	800f268 <__mcmp+0x18>
 800f280:	e7fa      	b.n	800f278 <__mcmp+0x28>
 800f282:	f04f 32ff 	mov.w	r2, #4294967295
 800f286:	e7f7      	b.n	800f278 <__mcmp+0x28>

0800f288 <__mdiff>:
 800f288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	460c      	mov	r4, r1
 800f28e:	4606      	mov	r6, r0
 800f290:	4611      	mov	r1, r2
 800f292:	4620      	mov	r0, r4
 800f294:	4617      	mov	r7, r2
 800f296:	f7ff ffdb 	bl	800f250 <__mcmp>
 800f29a:	1e05      	subs	r5, r0, #0
 800f29c:	d110      	bne.n	800f2c0 <__mdiff+0x38>
 800f29e:	4629      	mov	r1, r5
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	f7ff fd0d 	bl	800ecc0 <_Balloc>
 800f2a6:	b930      	cbnz	r0, 800f2b6 <__mdiff+0x2e>
 800f2a8:	4b39      	ldr	r3, [pc, #228]	; (800f390 <__mdiff+0x108>)
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	f240 2132 	movw	r1, #562	; 0x232
 800f2b0:	4838      	ldr	r0, [pc, #224]	; (800f394 <__mdiff+0x10c>)
 800f2b2:	f000 fb55 	bl	800f960 <__assert_func>
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c0:	bfa4      	itt	ge
 800f2c2:	463b      	movge	r3, r7
 800f2c4:	4627      	movge	r7, r4
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	6879      	ldr	r1, [r7, #4]
 800f2ca:	bfa6      	itte	ge
 800f2cc:	461c      	movge	r4, r3
 800f2ce:	2500      	movge	r5, #0
 800f2d0:	2501      	movlt	r5, #1
 800f2d2:	f7ff fcf5 	bl	800ecc0 <_Balloc>
 800f2d6:	b920      	cbnz	r0, 800f2e2 <__mdiff+0x5a>
 800f2d8:	4b2d      	ldr	r3, [pc, #180]	; (800f390 <__mdiff+0x108>)
 800f2da:	4602      	mov	r2, r0
 800f2dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f2e0:	e7e6      	b.n	800f2b0 <__mdiff+0x28>
 800f2e2:	693e      	ldr	r6, [r7, #16]
 800f2e4:	60c5      	str	r5, [r0, #12]
 800f2e6:	6925      	ldr	r5, [r4, #16]
 800f2e8:	f107 0114 	add.w	r1, r7, #20
 800f2ec:	f104 0914 	add.w	r9, r4, #20
 800f2f0:	f100 0e14 	add.w	lr, r0, #20
 800f2f4:	f107 0210 	add.w	r2, r7, #16
 800f2f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f2fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f300:	46f2      	mov	sl, lr
 800f302:	2700      	movs	r7, #0
 800f304:	f859 3b04 	ldr.w	r3, [r9], #4
 800f308:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f30c:	fa1f f883 	uxth.w	r8, r3
 800f310:	fa17 f78b 	uxtah	r7, r7, fp
 800f314:	0c1b      	lsrs	r3, r3, #16
 800f316:	eba7 0808 	sub.w	r8, r7, r8
 800f31a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f31e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f322:	fa1f f888 	uxth.w	r8, r8
 800f326:	141f      	asrs	r7, r3, #16
 800f328:	454d      	cmp	r5, r9
 800f32a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f32e:	f84a 3b04 	str.w	r3, [sl], #4
 800f332:	d8e7      	bhi.n	800f304 <__mdiff+0x7c>
 800f334:	1b2b      	subs	r3, r5, r4
 800f336:	3b15      	subs	r3, #21
 800f338:	f023 0303 	bic.w	r3, r3, #3
 800f33c:	3304      	adds	r3, #4
 800f33e:	3415      	adds	r4, #21
 800f340:	42a5      	cmp	r5, r4
 800f342:	bf38      	it	cc
 800f344:	2304      	movcc	r3, #4
 800f346:	4419      	add	r1, r3
 800f348:	4473      	add	r3, lr
 800f34a:	469e      	mov	lr, r3
 800f34c:	460d      	mov	r5, r1
 800f34e:	4565      	cmp	r5, ip
 800f350:	d30e      	bcc.n	800f370 <__mdiff+0xe8>
 800f352:	f10c 0203 	add.w	r2, ip, #3
 800f356:	1a52      	subs	r2, r2, r1
 800f358:	f022 0203 	bic.w	r2, r2, #3
 800f35c:	3903      	subs	r1, #3
 800f35e:	458c      	cmp	ip, r1
 800f360:	bf38      	it	cc
 800f362:	2200      	movcc	r2, #0
 800f364:	441a      	add	r2, r3
 800f366:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f36a:	b17b      	cbz	r3, 800f38c <__mdiff+0x104>
 800f36c:	6106      	str	r6, [r0, #16]
 800f36e:	e7a5      	b.n	800f2bc <__mdiff+0x34>
 800f370:	f855 8b04 	ldr.w	r8, [r5], #4
 800f374:	fa17 f488 	uxtah	r4, r7, r8
 800f378:	1422      	asrs	r2, r4, #16
 800f37a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f37e:	b2a4      	uxth	r4, r4
 800f380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f384:	f84e 4b04 	str.w	r4, [lr], #4
 800f388:	1417      	asrs	r7, r2, #16
 800f38a:	e7e0      	b.n	800f34e <__mdiff+0xc6>
 800f38c:	3e01      	subs	r6, #1
 800f38e:	e7ea      	b.n	800f366 <__mdiff+0xde>
 800f390:	080109a4 	.word	0x080109a4
 800f394:	08010a34 	.word	0x08010a34

0800f398 <__ulp>:
 800f398:	b082      	sub	sp, #8
 800f39a:	ed8d 0b00 	vstr	d0, [sp]
 800f39e:	9b01      	ldr	r3, [sp, #4]
 800f3a0:	4912      	ldr	r1, [pc, #72]	; (800f3ec <__ulp+0x54>)
 800f3a2:	4019      	ands	r1, r3
 800f3a4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f3a8:	2900      	cmp	r1, #0
 800f3aa:	dd05      	ble.n	800f3b8 <__ulp+0x20>
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	ec43 2b10 	vmov	d0, r2, r3
 800f3b4:	b002      	add	sp, #8
 800f3b6:	4770      	bx	lr
 800f3b8:	4249      	negs	r1, r1
 800f3ba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f3be:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f3c2:	f04f 0200 	mov.w	r2, #0
 800f3c6:	f04f 0300 	mov.w	r3, #0
 800f3ca:	da04      	bge.n	800f3d6 <__ulp+0x3e>
 800f3cc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f3d0:	fa41 f300 	asr.w	r3, r1, r0
 800f3d4:	e7ec      	b.n	800f3b0 <__ulp+0x18>
 800f3d6:	f1a0 0114 	sub.w	r1, r0, #20
 800f3da:	291e      	cmp	r1, #30
 800f3dc:	bfda      	itte	le
 800f3de:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f3e2:	fa20 f101 	lsrle.w	r1, r0, r1
 800f3e6:	2101      	movgt	r1, #1
 800f3e8:	460a      	mov	r2, r1
 800f3ea:	e7e1      	b.n	800f3b0 <__ulp+0x18>
 800f3ec:	7ff00000 	.word	0x7ff00000

0800f3f0 <__b2d>:
 800f3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3f2:	6905      	ldr	r5, [r0, #16]
 800f3f4:	f100 0714 	add.w	r7, r0, #20
 800f3f8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f3fc:	1f2e      	subs	r6, r5, #4
 800f3fe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f402:	4620      	mov	r0, r4
 800f404:	f7ff fd52 	bl	800eeac <__hi0bits>
 800f408:	f1c0 0320 	rsb	r3, r0, #32
 800f40c:	280a      	cmp	r0, #10
 800f40e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f48c <__b2d+0x9c>
 800f412:	600b      	str	r3, [r1, #0]
 800f414:	dc14      	bgt.n	800f440 <__b2d+0x50>
 800f416:	f1c0 0e0b 	rsb	lr, r0, #11
 800f41a:	fa24 f10e 	lsr.w	r1, r4, lr
 800f41e:	42b7      	cmp	r7, r6
 800f420:	ea41 030c 	orr.w	r3, r1, ip
 800f424:	bf34      	ite	cc
 800f426:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f42a:	2100      	movcs	r1, #0
 800f42c:	3015      	adds	r0, #21
 800f42e:	fa04 f000 	lsl.w	r0, r4, r0
 800f432:	fa21 f10e 	lsr.w	r1, r1, lr
 800f436:	ea40 0201 	orr.w	r2, r0, r1
 800f43a:	ec43 2b10 	vmov	d0, r2, r3
 800f43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f440:	42b7      	cmp	r7, r6
 800f442:	bf3a      	itte	cc
 800f444:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f448:	f1a5 0608 	subcc.w	r6, r5, #8
 800f44c:	2100      	movcs	r1, #0
 800f44e:	380b      	subs	r0, #11
 800f450:	d017      	beq.n	800f482 <__b2d+0x92>
 800f452:	f1c0 0c20 	rsb	ip, r0, #32
 800f456:	fa04 f500 	lsl.w	r5, r4, r0
 800f45a:	42be      	cmp	r6, r7
 800f45c:	fa21 f40c 	lsr.w	r4, r1, ip
 800f460:	ea45 0504 	orr.w	r5, r5, r4
 800f464:	bf8c      	ite	hi
 800f466:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f46a:	2400      	movls	r4, #0
 800f46c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f470:	fa01 f000 	lsl.w	r0, r1, r0
 800f474:	fa24 f40c 	lsr.w	r4, r4, ip
 800f478:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f47c:	ea40 0204 	orr.w	r2, r0, r4
 800f480:	e7db      	b.n	800f43a <__b2d+0x4a>
 800f482:	ea44 030c 	orr.w	r3, r4, ip
 800f486:	460a      	mov	r2, r1
 800f488:	e7d7      	b.n	800f43a <__b2d+0x4a>
 800f48a:	bf00      	nop
 800f48c:	3ff00000 	.word	0x3ff00000

0800f490 <__d2b>:
 800f490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f494:	4689      	mov	r9, r1
 800f496:	2101      	movs	r1, #1
 800f498:	ec57 6b10 	vmov	r6, r7, d0
 800f49c:	4690      	mov	r8, r2
 800f49e:	f7ff fc0f 	bl	800ecc0 <_Balloc>
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	b930      	cbnz	r0, 800f4b4 <__d2b+0x24>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	4b25      	ldr	r3, [pc, #148]	; (800f540 <__d2b+0xb0>)
 800f4aa:	4826      	ldr	r0, [pc, #152]	; (800f544 <__d2b+0xb4>)
 800f4ac:	f240 310a 	movw	r1, #778	; 0x30a
 800f4b0:	f000 fa56 	bl	800f960 <__assert_func>
 800f4b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f4b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f4bc:	bb35      	cbnz	r5, 800f50c <__d2b+0x7c>
 800f4be:	2e00      	cmp	r6, #0
 800f4c0:	9301      	str	r3, [sp, #4]
 800f4c2:	d028      	beq.n	800f516 <__d2b+0x86>
 800f4c4:	4668      	mov	r0, sp
 800f4c6:	9600      	str	r6, [sp, #0]
 800f4c8:	f7ff fd10 	bl	800eeec <__lo0bits>
 800f4cc:	9900      	ldr	r1, [sp, #0]
 800f4ce:	b300      	cbz	r0, 800f512 <__d2b+0x82>
 800f4d0:	9a01      	ldr	r2, [sp, #4]
 800f4d2:	f1c0 0320 	rsb	r3, r0, #32
 800f4d6:	fa02 f303 	lsl.w	r3, r2, r3
 800f4da:	430b      	orrs	r3, r1
 800f4dc:	40c2      	lsrs	r2, r0
 800f4de:	6163      	str	r3, [r4, #20]
 800f4e0:	9201      	str	r2, [sp, #4]
 800f4e2:	9b01      	ldr	r3, [sp, #4]
 800f4e4:	61a3      	str	r3, [r4, #24]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	bf14      	ite	ne
 800f4ea:	2202      	movne	r2, #2
 800f4ec:	2201      	moveq	r2, #1
 800f4ee:	6122      	str	r2, [r4, #16]
 800f4f0:	b1d5      	cbz	r5, 800f528 <__d2b+0x98>
 800f4f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f4f6:	4405      	add	r5, r0
 800f4f8:	f8c9 5000 	str.w	r5, [r9]
 800f4fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f500:	f8c8 0000 	str.w	r0, [r8]
 800f504:	4620      	mov	r0, r4
 800f506:	b003      	add	sp, #12
 800f508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f50c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f510:	e7d5      	b.n	800f4be <__d2b+0x2e>
 800f512:	6161      	str	r1, [r4, #20]
 800f514:	e7e5      	b.n	800f4e2 <__d2b+0x52>
 800f516:	a801      	add	r0, sp, #4
 800f518:	f7ff fce8 	bl	800eeec <__lo0bits>
 800f51c:	9b01      	ldr	r3, [sp, #4]
 800f51e:	6163      	str	r3, [r4, #20]
 800f520:	2201      	movs	r2, #1
 800f522:	6122      	str	r2, [r4, #16]
 800f524:	3020      	adds	r0, #32
 800f526:	e7e3      	b.n	800f4f0 <__d2b+0x60>
 800f528:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f52c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f530:	f8c9 0000 	str.w	r0, [r9]
 800f534:	6918      	ldr	r0, [r3, #16]
 800f536:	f7ff fcb9 	bl	800eeac <__hi0bits>
 800f53a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f53e:	e7df      	b.n	800f500 <__d2b+0x70>
 800f540:	080109a4 	.word	0x080109a4
 800f544:	08010a34 	.word	0x08010a34

0800f548 <__ratio>:
 800f548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f54c:	4688      	mov	r8, r1
 800f54e:	4669      	mov	r1, sp
 800f550:	4681      	mov	r9, r0
 800f552:	f7ff ff4d 	bl	800f3f0 <__b2d>
 800f556:	a901      	add	r1, sp, #4
 800f558:	4640      	mov	r0, r8
 800f55a:	ec55 4b10 	vmov	r4, r5, d0
 800f55e:	f7ff ff47 	bl	800f3f0 <__b2d>
 800f562:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f566:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f56a:	eba3 0c02 	sub.w	ip, r3, r2
 800f56e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f572:	1a9b      	subs	r3, r3, r2
 800f574:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f578:	ec51 0b10 	vmov	r0, r1, d0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	bfd6      	itet	le
 800f580:	460a      	movle	r2, r1
 800f582:	462a      	movgt	r2, r5
 800f584:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f588:	468b      	mov	fp, r1
 800f58a:	462f      	mov	r7, r5
 800f58c:	bfd4      	ite	le
 800f58e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f592:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f596:	4620      	mov	r0, r4
 800f598:	ee10 2a10 	vmov	r2, s0
 800f59c:	465b      	mov	r3, fp
 800f59e:	4639      	mov	r1, r7
 800f5a0:	f7f1 f95c 	bl	800085c <__aeabi_ddiv>
 800f5a4:	ec41 0b10 	vmov	d0, r0, r1
 800f5a8:	b003      	add	sp, #12
 800f5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5ae <__copybits>:
 800f5ae:	3901      	subs	r1, #1
 800f5b0:	b570      	push	{r4, r5, r6, lr}
 800f5b2:	1149      	asrs	r1, r1, #5
 800f5b4:	6914      	ldr	r4, [r2, #16]
 800f5b6:	3101      	adds	r1, #1
 800f5b8:	f102 0314 	add.w	r3, r2, #20
 800f5bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f5c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f5c4:	1f05      	subs	r5, r0, #4
 800f5c6:	42a3      	cmp	r3, r4
 800f5c8:	d30c      	bcc.n	800f5e4 <__copybits+0x36>
 800f5ca:	1aa3      	subs	r3, r4, r2
 800f5cc:	3b11      	subs	r3, #17
 800f5ce:	f023 0303 	bic.w	r3, r3, #3
 800f5d2:	3211      	adds	r2, #17
 800f5d4:	42a2      	cmp	r2, r4
 800f5d6:	bf88      	it	hi
 800f5d8:	2300      	movhi	r3, #0
 800f5da:	4418      	add	r0, r3
 800f5dc:	2300      	movs	r3, #0
 800f5de:	4288      	cmp	r0, r1
 800f5e0:	d305      	bcc.n	800f5ee <__copybits+0x40>
 800f5e2:	bd70      	pop	{r4, r5, r6, pc}
 800f5e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800f5e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800f5ec:	e7eb      	b.n	800f5c6 <__copybits+0x18>
 800f5ee:	f840 3b04 	str.w	r3, [r0], #4
 800f5f2:	e7f4      	b.n	800f5de <__copybits+0x30>

0800f5f4 <__any_on>:
 800f5f4:	f100 0214 	add.w	r2, r0, #20
 800f5f8:	6900      	ldr	r0, [r0, #16]
 800f5fa:	114b      	asrs	r3, r1, #5
 800f5fc:	4298      	cmp	r0, r3
 800f5fe:	b510      	push	{r4, lr}
 800f600:	db11      	blt.n	800f626 <__any_on+0x32>
 800f602:	dd0a      	ble.n	800f61a <__any_on+0x26>
 800f604:	f011 011f 	ands.w	r1, r1, #31
 800f608:	d007      	beq.n	800f61a <__any_on+0x26>
 800f60a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f60e:	fa24 f001 	lsr.w	r0, r4, r1
 800f612:	fa00 f101 	lsl.w	r1, r0, r1
 800f616:	428c      	cmp	r4, r1
 800f618:	d10b      	bne.n	800f632 <__any_on+0x3e>
 800f61a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f61e:	4293      	cmp	r3, r2
 800f620:	d803      	bhi.n	800f62a <__any_on+0x36>
 800f622:	2000      	movs	r0, #0
 800f624:	bd10      	pop	{r4, pc}
 800f626:	4603      	mov	r3, r0
 800f628:	e7f7      	b.n	800f61a <__any_on+0x26>
 800f62a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f62e:	2900      	cmp	r1, #0
 800f630:	d0f5      	beq.n	800f61e <__any_on+0x2a>
 800f632:	2001      	movs	r0, #1
 800f634:	e7f6      	b.n	800f624 <__any_on+0x30>

0800f636 <_calloc_r>:
 800f636:	b513      	push	{r0, r1, r4, lr}
 800f638:	434a      	muls	r2, r1
 800f63a:	4611      	mov	r1, r2
 800f63c:	9201      	str	r2, [sp, #4]
 800f63e:	f7fc fb67 	bl	800bd10 <_malloc_r>
 800f642:	4604      	mov	r4, r0
 800f644:	b118      	cbz	r0, 800f64e <_calloc_r+0x18>
 800f646:	9a01      	ldr	r2, [sp, #4]
 800f648:	2100      	movs	r1, #0
 800f64a:	f7fc fb09 	bl	800bc60 <memset>
 800f64e:	4620      	mov	r0, r4
 800f650:	b002      	add	sp, #8
 800f652:	bd10      	pop	{r4, pc}

0800f654 <__ssputs_r>:
 800f654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f658:	688e      	ldr	r6, [r1, #8]
 800f65a:	429e      	cmp	r6, r3
 800f65c:	4682      	mov	sl, r0
 800f65e:	460c      	mov	r4, r1
 800f660:	4690      	mov	r8, r2
 800f662:	461f      	mov	r7, r3
 800f664:	d838      	bhi.n	800f6d8 <__ssputs_r+0x84>
 800f666:	898a      	ldrh	r2, [r1, #12]
 800f668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f66c:	d032      	beq.n	800f6d4 <__ssputs_r+0x80>
 800f66e:	6825      	ldr	r5, [r4, #0]
 800f670:	6909      	ldr	r1, [r1, #16]
 800f672:	eba5 0901 	sub.w	r9, r5, r1
 800f676:	6965      	ldr	r5, [r4, #20]
 800f678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f67c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f680:	3301      	adds	r3, #1
 800f682:	444b      	add	r3, r9
 800f684:	106d      	asrs	r5, r5, #1
 800f686:	429d      	cmp	r5, r3
 800f688:	bf38      	it	cc
 800f68a:	461d      	movcc	r5, r3
 800f68c:	0553      	lsls	r3, r2, #21
 800f68e:	d531      	bpl.n	800f6f4 <__ssputs_r+0xa0>
 800f690:	4629      	mov	r1, r5
 800f692:	f7fc fb3d 	bl	800bd10 <_malloc_r>
 800f696:	4606      	mov	r6, r0
 800f698:	b950      	cbnz	r0, 800f6b0 <__ssputs_r+0x5c>
 800f69a:	230c      	movs	r3, #12
 800f69c:	f8ca 3000 	str.w	r3, [sl]
 800f6a0:	89a3      	ldrh	r3, [r4, #12]
 800f6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6a6:	81a3      	strh	r3, [r4, #12]
 800f6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6b0:	6921      	ldr	r1, [r4, #16]
 800f6b2:	464a      	mov	r2, r9
 800f6b4:	f7ff faea 	bl	800ec8c <memcpy>
 800f6b8:	89a3      	ldrh	r3, [r4, #12]
 800f6ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c2:	81a3      	strh	r3, [r4, #12]
 800f6c4:	6126      	str	r6, [r4, #16]
 800f6c6:	6165      	str	r5, [r4, #20]
 800f6c8:	444e      	add	r6, r9
 800f6ca:	eba5 0509 	sub.w	r5, r5, r9
 800f6ce:	6026      	str	r6, [r4, #0]
 800f6d0:	60a5      	str	r5, [r4, #8]
 800f6d2:	463e      	mov	r6, r7
 800f6d4:	42be      	cmp	r6, r7
 800f6d6:	d900      	bls.n	800f6da <__ssputs_r+0x86>
 800f6d8:	463e      	mov	r6, r7
 800f6da:	4632      	mov	r2, r6
 800f6dc:	6820      	ldr	r0, [r4, #0]
 800f6de:	4641      	mov	r1, r8
 800f6e0:	f000 f971 	bl	800f9c6 <memmove>
 800f6e4:	68a3      	ldr	r3, [r4, #8]
 800f6e6:	6822      	ldr	r2, [r4, #0]
 800f6e8:	1b9b      	subs	r3, r3, r6
 800f6ea:	4432      	add	r2, r6
 800f6ec:	60a3      	str	r3, [r4, #8]
 800f6ee:	6022      	str	r2, [r4, #0]
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	e7db      	b.n	800f6ac <__ssputs_r+0x58>
 800f6f4:	462a      	mov	r2, r5
 800f6f6:	f000 f980 	bl	800f9fa <_realloc_r>
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d1e1      	bne.n	800f6c4 <__ssputs_r+0x70>
 800f700:	6921      	ldr	r1, [r4, #16]
 800f702:	4650      	mov	r0, sl
 800f704:	f7fc fab4 	bl	800bc70 <_free_r>
 800f708:	e7c7      	b.n	800f69a <__ssputs_r+0x46>
	...

0800f70c <_svfiprintf_r>:
 800f70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f710:	4698      	mov	r8, r3
 800f712:	898b      	ldrh	r3, [r1, #12]
 800f714:	061b      	lsls	r3, r3, #24
 800f716:	b09d      	sub	sp, #116	; 0x74
 800f718:	4607      	mov	r7, r0
 800f71a:	460d      	mov	r5, r1
 800f71c:	4614      	mov	r4, r2
 800f71e:	d50e      	bpl.n	800f73e <_svfiprintf_r+0x32>
 800f720:	690b      	ldr	r3, [r1, #16]
 800f722:	b963      	cbnz	r3, 800f73e <_svfiprintf_r+0x32>
 800f724:	2140      	movs	r1, #64	; 0x40
 800f726:	f7fc faf3 	bl	800bd10 <_malloc_r>
 800f72a:	6028      	str	r0, [r5, #0]
 800f72c:	6128      	str	r0, [r5, #16]
 800f72e:	b920      	cbnz	r0, 800f73a <_svfiprintf_r+0x2e>
 800f730:	230c      	movs	r3, #12
 800f732:	603b      	str	r3, [r7, #0]
 800f734:	f04f 30ff 	mov.w	r0, #4294967295
 800f738:	e0d1      	b.n	800f8de <_svfiprintf_r+0x1d2>
 800f73a:	2340      	movs	r3, #64	; 0x40
 800f73c:	616b      	str	r3, [r5, #20]
 800f73e:	2300      	movs	r3, #0
 800f740:	9309      	str	r3, [sp, #36]	; 0x24
 800f742:	2320      	movs	r3, #32
 800f744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f748:	f8cd 800c 	str.w	r8, [sp, #12]
 800f74c:	2330      	movs	r3, #48	; 0x30
 800f74e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f8f8 <_svfiprintf_r+0x1ec>
 800f752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f756:	f04f 0901 	mov.w	r9, #1
 800f75a:	4623      	mov	r3, r4
 800f75c:	469a      	mov	sl, r3
 800f75e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f762:	b10a      	cbz	r2, 800f768 <_svfiprintf_r+0x5c>
 800f764:	2a25      	cmp	r2, #37	; 0x25
 800f766:	d1f9      	bne.n	800f75c <_svfiprintf_r+0x50>
 800f768:	ebba 0b04 	subs.w	fp, sl, r4
 800f76c:	d00b      	beq.n	800f786 <_svfiprintf_r+0x7a>
 800f76e:	465b      	mov	r3, fp
 800f770:	4622      	mov	r2, r4
 800f772:	4629      	mov	r1, r5
 800f774:	4638      	mov	r0, r7
 800f776:	f7ff ff6d 	bl	800f654 <__ssputs_r>
 800f77a:	3001      	adds	r0, #1
 800f77c:	f000 80aa 	beq.w	800f8d4 <_svfiprintf_r+0x1c8>
 800f780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f782:	445a      	add	r2, fp
 800f784:	9209      	str	r2, [sp, #36]	; 0x24
 800f786:	f89a 3000 	ldrb.w	r3, [sl]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 80a2 	beq.w	800f8d4 <_svfiprintf_r+0x1c8>
 800f790:	2300      	movs	r3, #0
 800f792:	f04f 32ff 	mov.w	r2, #4294967295
 800f796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f79a:	f10a 0a01 	add.w	sl, sl, #1
 800f79e:	9304      	str	r3, [sp, #16]
 800f7a0:	9307      	str	r3, [sp, #28]
 800f7a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7a6:	931a      	str	r3, [sp, #104]	; 0x68
 800f7a8:	4654      	mov	r4, sl
 800f7aa:	2205      	movs	r2, #5
 800f7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b0:	4851      	ldr	r0, [pc, #324]	; (800f8f8 <_svfiprintf_r+0x1ec>)
 800f7b2:	f7f0 fd1d 	bl	80001f0 <memchr>
 800f7b6:	9a04      	ldr	r2, [sp, #16]
 800f7b8:	b9d8      	cbnz	r0, 800f7f2 <_svfiprintf_r+0xe6>
 800f7ba:	06d0      	lsls	r0, r2, #27
 800f7bc:	bf44      	itt	mi
 800f7be:	2320      	movmi	r3, #32
 800f7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7c4:	0711      	lsls	r1, r2, #28
 800f7c6:	bf44      	itt	mi
 800f7c8:	232b      	movmi	r3, #43	; 0x2b
 800f7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7ce:	f89a 3000 	ldrb.w	r3, [sl]
 800f7d2:	2b2a      	cmp	r3, #42	; 0x2a
 800f7d4:	d015      	beq.n	800f802 <_svfiprintf_r+0xf6>
 800f7d6:	9a07      	ldr	r2, [sp, #28]
 800f7d8:	4654      	mov	r4, sl
 800f7da:	2000      	movs	r0, #0
 800f7dc:	f04f 0c0a 	mov.w	ip, #10
 800f7e0:	4621      	mov	r1, r4
 800f7e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7e6:	3b30      	subs	r3, #48	; 0x30
 800f7e8:	2b09      	cmp	r3, #9
 800f7ea:	d94e      	bls.n	800f88a <_svfiprintf_r+0x17e>
 800f7ec:	b1b0      	cbz	r0, 800f81c <_svfiprintf_r+0x110>
 800f7ee:	9207      	str	r2, [sp, #28]
 800f7f0:	e014      	b.n	800f81c <_svfiprintf_r+0x110>
 800f7f2:	eba0 0308 	sub.w	r3, r0, r8
 800f7f6:	fa09 f303 	lsl.w	r3, r9, r3
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	9304      	str	r3, [sp, #16]
 800f7fe:	46a2      	mov	sl, r4
 800f800:	e7d2      	b.n	800f7a8 <_svfiprintf_r+0x9c>
 800f802:	9b03      	ldr	r3, [sp, #12]
 800f804:	1d19      	adds	r1, r3, #4
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	9103      	str	r1, [sp, #12]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	bfbb      	ittet	lt
 800f80e:	425b      	neglt	r3, r3
 800f810:	f042 0202 	orrlt.w	r2, r2, #2
 800f814:	9307      	strge	r3, [sp, #28]
 800f816:	9307      	strlt	r3, [sp, #28]
 800f818:	bfb8      	it	lt
 800f81a:	9204      	strlt	r2, [sp, #16]
 800f81c:	7823      	ldrb	r3, [r4, #0]
 800f81e:	2b2e      	cmp	r3, #46	; 0x2e
 800f820:	d10c      	bne.n	800f83c <_svfiprintf_r+0x130>
 800f822:	7863      	ldrb	r3, [r4, #1]
 800f824:	2b2a      	cmp	r3, #42	; 0x2a
 800f826:	d135      	bne.n	800f894 <_svfiprintf_r+0x188>
 800f828:	9b03      	ldr	r3, [sp, #12]
 800f82a:	1d1a      	adds	r2, r3, #4
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	9203      	str	r2, [sp, #12]
 800f830:	2b00      	cmp	r3, #0
 800f832:	bfb8      	it	lt
 800f834:	f04f 33ff 	movlt.w	r3, #4294967295
 800f838:	3402      	adds	r4, #2
 800f83a:	9305      	str	r3, [sp, #20]
 800f83c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f908 <_svfiprintf_r+0x1fc>
 800f840:	7821      	ldrb	r1, [r4, #0]
 800f842:	2203      	movs	r2, #3
 800f844:	4650      	mov	r0, sl
 800f846:	f7f0 fcd3 	bl	80001f0 <memchr>
 800f84a:	b140      	cbz	r0, 800f85e <_svfiprintf_r+0x152>
 800f84c:	2340      	movs	r3, #64	; 0x40
 800f84e:	eba0 000a 	sub.w	r0, r0, sl
 800f852:	fa03 f000 	lsl.w	r0, r3, r0
 800f856:	9b04      	ldr	r3, [sp, #16]
 800f858:	4303      	orrs	r3, r0
 800f85a:	3401      	adds	r4, #1
 800f85c:	9304      	str	r3, [sp, #16]
 800f85e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f862:	4826      	ldr	r0, [pc, #152]	; (800f8fc <_svfiprintf_r+0x1f0>)
 800f864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f868:	2206      	movs	r2, #6
 800f86a:	f7f0 fcc1 	bl	80001f0 <memchr>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d038      	beq.n	800f8e4 <_svfiprintf_r+0x1d8>
 800f872:	4b23      	ldr	r3, [pc, #140]	; (800f900 <_svfiprintf_r+0x1f4>)
 800f874:	bb1b      	cbnz	r3, 800f8be <_svfiprintf_r+0x1b2>
 800f876:	9b03      	ldr	r3, [sp, #12]
 800f878:	3307      	adds	r3, #7
 800f87a:	f023 0307 	bic.w	r3, r3, #7
 800f87e:	3308      	adds	r3, #8
 800f880:	9303      	str	r3, [sp, #12]
 800f882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f884:	4433      	add	r3, r6
 800f886:	9309      	str	r3, [sp, #36]	; 0x24
 800f888:	e767      	b.n	800f75a <_svfiprintf_r+0x4e>
 800f88a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f88e:	460c      	mov	r4, r1
 800f890:	2001      	movs	r0, #1
 800f892:	e7a5      	b.n	800f7e0 <_svfiprintf_r+0xd4>
 800f894:	2300      	movs	r3, #0
 800f896:	3401      	adds	r4, #1
 800f898:	9305      	str	r3, [sp, #20]
 800f89a:	4619      	mov	r1, r3
 800f89c:	f04f 0c0a 	mov.w	ip, #10
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8a6:	3a30      	subs	r2, #48	; 0x30
 800f8a8:	2a09      	cmp	r2, #9
 800f8aa:	d903      	bls.n	800f8b4 <_svfiprintf_r+0x1a8>
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d0c5      	beq.n	800f83c <_svfiprintf_r+0x130>
 800f8b0:	9105      	str	r1, [sp, #20]
 800f8b2:	e7c3      	b.n	800f83c <_svfiprintf_r+0x130>
 800f8b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e7f0      	b.n	800f8a0 <_svfiprintf_r+0x194>
 800f8be:	ab03      	add	r3, sp, #12
 800f8c0:	9300      	str	r3, [sp, #0]
 800f8c2:	462a      	mov	r2, r5
 800f8c4:	4b0f      	ldr	r3, [pc, #60]	; (800f904 <_svfiprintf_r+0x1f8>)
 800f8c6:	a904      	add	r1, sp, #16
 800f8c8:	4638      	mov	r0, r7
 800f8ca:	f7fc fb1b 	bl	800bf04 <_printf_float>
 800f8ce:	1c42      	adds	r2, r0, #1
 800f8d0:	4606      	mov	r6, r0
 800f8d2:	d1d6      	bne.n	800f882 <_svfiprintf_r+0x176>
 800f8d4:	89ab      	ldrh	r3, [r5, #12]
 800f8d6:	065b      	lsls	r3, r3, #25
 800f8d8:	f53f af2c 	bmi.w	800f734 <_svfiprintf_r+0x28>
 800f8dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8de:	b01d      	add	sp, #116	; 0x74
 800f8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e4:	ab03      	add	r3, sp, #12
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	462a      	mov	r2, r5
 800f8ea:	4b06      	ldr	r3, [pc, #24]	; (800f904 <_svfiprintf_r+0x1f8>)
 800f8ec:	a904      	add	r1, sp, #16
 800f8ee:	4638      	mov	r0, r7
 800f8f0:	f7fc fdac 	bl	800c44c <_printf_i>
 800f8f4:	e7eb      	b.n	800f8ce <_svfiprintf_r+0x1c2>
 800f8f6:	bf00      	nop
 800f8f8:	08010b94 	.word	0x08010b94
 800f8fc:	08010b9e 	.word	0x08010b9e
 800f900:	0800bf05 	.word	0x0800bf05
 800f904:	0800f655 	.word	0x0800f655
 800f908:	08010b9a 	.word	0x08010b9a
 800f90c:	00000000 	.word	0x00000000

0800f910 <nan>:
 800f910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f918 <nan+0x8>
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	00000000 	.word	0x00000000
 800f91c:	7ff80000 	.word	0x7ff80000

0800f920 <strncmp>:
 800f920:	b510      	push	{r4, lr}
 800f922:	b16a      	cbz	r2, 800f940 <strncmp+0x20>
 800f924:	3901      	subs	r1, #1
 800f926:	1884      	adds	r4, r0, r2
 800f928:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f92c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f930:	4293      	cmp	r3, r2
 800f932:	d103      	bne.n	800f93c <strncmp+0x1c>
 800f934:	42a0      	cmp	r0, r4
 800f936:	d001      	beq.n	800f93c <strncmp+0x1c>
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1f5      	bne.n	800f928 <strncmp+0x8>
 800f93c:	1a98      	subs	r0, r3, r2
 800f93e:	bd10      	pop	{r4, pc}
 800f940:	4610      	mov	r0, r2
 800f942:	e7fc      	b.n	800f93e <strncmp+0x1e>

0800f944 <__ascii_wctomb>:
 800f944:	b149      	cbz	r1, 800f95a <__ascii_wctomb+0x16>
 800f946:	2aff      	cmp	r2, #255	; 0xff
 800f948:	bf85      	ittet	hi
 800f94a:	238a      	movhi	r3, #138	; 0x8a
 800f94c:	6003      	strhi	r3, [r0, #0]
 800f94e:	700a      	strbls	r2, [r1, #0]
 800f950:	f04f 30ff 	movhi.w	r0, #4294967295
 800f954:	bf98      	it	ls
 800f956:	2001      	movls	r0, #1
 800f958:	4770      	bx	lr
 800f95a:	4608      	mov	r0, r1
 800f95c:	4770      	bx	lr
	...

0800f960 <__assert_func>:
 800f960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f962:	4614      	mov	r4, r2
 800f964:	461a      	mov	r2, r3
 800f966:	4b09      	ldr	r3, [pc, #36]	; (800f98c <__assert_func+0x2c>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4605      	mov	r5, r0
 800f96c:	68d8      	ldr	r0, [r3, #12]
 800f96e:	b14c      	cbz	r4, 800f984 <__assert_func+0x24>
 800f970:	4b07      	ldr	r3, [pc, #28]	; (800f990 <__assert_func+0x30>)
 800f972:	9100      	str	r1, [sp, #0]
 800f974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f978:	4906      	ldr	r1, [pc, #24]	; (800f994 <__assert_func+0x34>)
 800f97a:	462b      	mov	r3, r5
 800f97c:	f000 f80e 	bl	800f99c <fiprintf>
 800f980:	f000 fa7a 	bl	800fe78 <abort>
 800f984:	4b04      	ldr	r3, [pc, #16]	; (800f998 <__assert_func+0x38>)
 800f986:	461c      	mov	r4, r3
 800f988:	e7f3      	b.n	800f972 <__assert_func+0x12>
 800f98a:	bf00      	nop
 800f98c:	2000002c 	.word	0x2000002c
 800f990:	08010ba5 	.word	0x08010ba5
 800f994:	08010bb2 	.word	0x08010bb2
 800f998:	08010be0 	.word	0x08010be0

0800f99c <fiprintf>:
 800f99c:	b40e      	push	{r1, r2, r3}
 800f99e:	b503      	push	{r0, r1, lr}
 800f9a0:	4601      	mov	r1, r0
 800f9a2:	ab03      	add	r3, sp, #12
 800f9a4:	4805      	ldr	r0, [pc, #20]	; (800f9bc <fiprintf+0x20>)
 800f9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9aa:	6800      	ldr	r0, [r0, #0]
 800f9ac:	9301      	str	r3, [sp, #4]
 800f9ae:	f000 f873 	bl	800fa98 <_vfiprintf_r>
 800f9b2:	b002      	add	sp, #8
 800f9b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9b8:	b003      	add	sp, #12
 800f9ba:	4770      	bx	lr
 800f9bc:	2000002c 	.word	0x2000002c

0800f9c0 <__retarget_lock_init_recursive>:
 800f9c0:	4770      	bx	lr

0800f9c2 <__retarget_lock_acquire_recursive>:
 800f9c2:	4770      	bx	lr

0800f9c4 <__retarget_lock_release_recursive>:
 800f9c4:	4770      	bx	lr

0800f9c6 <memmove>:
 800f9c6:	4288      	cmp	r0, r1
 800f9c8:	b510      	push	{r4, lr}
 800f9ca:	eb01 0402 	add.w	r4, r1, r2
 800f9ce:	d902      	bls.n	800f9d6 <memmove+0x10>
 800f9d0:	4284      	cmp	r4, r0
 800f9d2:	4623      	mov	r3, r4
 800f9d4:	d807      	bhi.n	800f9e6 <memmove+0x20>
 800f9d6:	1e43      	subs	r3, r0, #1
 800f9d8:	42a1      	cmp	r1, r4
 800f9da:	d008      	beq.n	800f9ee <memmove+0x28>
 800f9dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f9e4:	e7f8      	b.n	800f9d8 <memmove+0x12>
 800f9e6:	4402      	add	r2, r0
 800f9e8:	4601      	mov	r1, r0
 800f9ea:	428a      	cmp	r2, r1
 800f9ec:	d100      	bne.n	800f9f0 <memmove+0x2a>
 800f9ee:	bd10      	pop	{r4, pc}
 800f9f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9f8:	e7f7      	b.n	800f9ea <memmove+0x24>

0800f9fa <_realloc_r>:
 800f9fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fc:	4607      	mov	r7, r0
 800f9fe:	4614      	mov	r4, r2
 800fa00:	460e      	mov	r6, r1
 800fa02:	b921      	cbnz	r1, 800fa0e <_realloc_r+0x14>
 800fa04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fa08:	4611      	mov	r1, r2
 800fa0a:	f7fc b981 	b.w	800bd10 <_malloc_r>
 800fa0e:	b922      	cbnz	r2, 800fa1a <_realloc_r+0x20>
 800fa10:	f7fc f92e 	bl	800bc70 <_free_r>
 800fa14:	4625      	mov	r5, r4
 800fa16:	4628      	mov	r0, r5
 800fa18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa1a:	f000 fc51 	bl	80102c0 <_malloc_usable_size_r>
 800fa1e:	42a0      	cmp	r0, r4
 800fa20:	d20f      	bcs.n	800fa42 <_realloc_r+0x48>
 800fa22:	4621      	mov	r1, r4
 800fa24:	4638      	mov	r0, r7
 800fa26:	f7fc f973 	bl	800bd10 <_malloc_r>
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d0f2      	beq.n	800fa16 <_realloc_r+0x1c>
 800fa30:	4631      	mov	r1, r6
 800fa32:	4622      	mov	r2, r4
 800fa34:	f7ff f92a 	bl	800ec8c <memcpy>
 800fa38:	4631      	mov	r1, r6
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	f7fc f918 	bl	800bc70 <_free_r>
 800fa40:	e7e9      	b.n	800fa16 <_realloc_r+0x1c>
 800fa42:	4635      	mov	r5, r6
 800fa44:	e7e7      	b.n	800fa16 <_realloc_r+0x1c>

0800fa46 <__sfputc_r>:
 800fa46:	6893      	ldr	r3, [r2, #8]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	b410      	push	{r4}
 800fa4e:	6093      	str	r3, [r2, #8]
 800fa50:	da08      	bge.n	800fa64 <__sfputc_r+0x1e>
 800fa52:	6994      	ldr	r4, [r2, #24]
 800fa54:	42a3      	cmp	r3, r4
 800fa56:	db01      	blt.n	800fa5c <__sfputc_r+0x16>
 800fa58:	290a      	cmp	r1, #10
 800fa5a:	d103      	bne.n	800fa64 <__sfputc_r+0x1e>
 800fa5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa60:	f000 b94a 	b.w	800fcf8 <__swbuf_r>
 800fa64:	6813      	ldr	r3, [r2, #0]
 800fa66:	1c58      	adds	r0, r3, #1
 800fa68:	6010      	str	r0, [r2, #0]
 800fa6a:	7019      	strb	r1, [r3, #0]
 800fa6c:	4608      	mov	r0, r1
 800fa6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <__sfputs_r>:
 800fa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa76:	4606      	mov	r6, r0
 800fa78:	460f      	mov	r7, r1
 800fa7a:	4614      	mov	r4, r2
 800fa7c:	18d5      	adds	r5, r2, r3
 800fa7e:	42ac      	cmp	r4, r5
 800fa80:	d101      	bne.n	800fa86 <__sfputs_r+0x12>
 800fa82:	2000      	movs	r0, #0
 800fa84:	e007      	b.n	800fa96 <__sfputs_r+0x22>
 800fa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa8a:	463a      	mov	r2, r7
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	f7ff ffda 	bl	800fa46 <__sfputc_r>
 800fa92:	1c43      	adds	r3, r0, #1
 800fa94:	d1f3      	bne.n	800fa7e <__sfputs_r+0xa>
 800fa96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa98 <_vfiprintf_r>:
 800fa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa9c:	460d      	mov	r5, r1
 800fa9e:	b09d      	sub	sp, #116	; 0x74
 800faa0:	4614      	mov	r4, r2
 800faa2:	4698      	mov	r8, r3
 800faa4:	4606      	mov	r6, r0
 800faa6:	b118      	cbz	r0, 800fab0 <_vfiprintf_r+0x18>
 800faa8:	6983      	ldr	r3, [r0, #24]
 800faaa:	b90b      	cbnz	r3, 800fab0 <_vfiprintf_r+0x18>
 800faac:	f000 fb06 	bl	80100bc <__sinit>
 800fab0:	4b89      	ldr	r3, [pc, #548]	; (800fcd8 <_vfiprintf_r+0x240>)
 800fab2:	429d      	cmp	r5, r3
 800fab4:	d11b      	bne.n	800faee <_vfiprintf_r+0x56>
 800fab6:	6875      	ldr	r5, [r6, #4]
 800fab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800faba:	07d9      	lsls	r1, r3, #31
 800fabc:	d405      	bmi.n	800faca <_vfiprintf_r+0x32>
 800fabe:	89ab      	ldrh	r3, [r5, #12]
 800fac0:	059a      	lsls	r2, r3, #22
 800fac2:	d402      	bmi.n	800faca <_vfiprintf_r+0x32>
 800fac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fac6:	f7ff ff7c 	bl	800f9c2 <__retarget_lock_acquire_recursive>
 800faca:	89ab      	ldrh	r3, [r5, #12]
 800facc:	071b      	lsls	r3, r3, #28
 800face:	d501      	bpl.n	800fad4 <_vfiprintf_r+0x3c>
 800fad0:	692b      	ldr	r3, [r5, #16]
 800fad2:	b9eb      	cbnz	r3, 800fb10 <_vfiprintf_r+0x78>
 800fad4:	4629      	mov	r1, r5
 800fad6:	4630      	mov	r0, r6
 800fad8:	f000 f960 	bl	800fd9c <__swsetup_r>
 800fadc:	b1c0      	cbz	r0, 800fb10 <_vfiprintf_r+0x78>
 800fade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fae0:	07dc      	lsls	r4, r3, #31
 800fae2:	d50e      	bpl.n	800fb02 <_vfiprintf_r+0x6a>
 800fae4:	f04f 30ff 	mov.w	r0, #4294967295
 800fae8:	b01d      	add	sp, #116	; 0x74
 800faea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faee:	4b7b      	ldr	r3, [pc, #492]	; (800fcdc <_vfiprintf_r+0x244>)
 800faf0:	429d      	cmp	r5, r3
 800faf2:	d101      	bne.n	800faf8 <_vfiprintf_r+0x60>
 800faf4:	68b5      	ldr	r5, [r6, #8]
 800faf6:	e7df      	b.n	800fab8 <_vfiprintf_r+0x20>
 800faf8:	4b79      	ldr	r3, [pc, #484]	; (800fce0 <_vfiprintf_r+0x248>)
 800fafa:	429d      	cmp	r5, r3
 800fafc:	bf08      	it	eq
 800fafe:	68f5      	ldreq	r5, [r6, #12]
 800fb00:	e7da      	b.n	800fab8 <_vfiprintf_r+0x20>
 800fb02:	89ab      	ldrh	r3, [r5, #12]
 800fb04:	0598      	lsls	r0, r3, #22
 800fb06:	d4ed      	bmi.n	800fae4 <_vfiprintf_r+0x4c>
 800fb08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb0a:	f7ff ff5b 	bl	800f9c4 <__retarget_lock_release_recursive>
 800fb0e:	e7e9      	b.n	800fae4 <_vfiprintf_r+0x4c>
 800fb10:	2300      	movs	r3, #0
 800fb12:	9309      	str	r3, [sp, #36]	; 0x24
 800fb14:	2320      	movs	r3, #32
 800fb16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb1e:	2330      	movs	r3, #48	; 0x30
 800fb20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fce4 <_vfiprintf_r+0x24c>
 800fb24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb28:	f04f 0901 	mov.w	r9, #1
 800fb2c:	4623      	mov	r3, r4
 800fb2e:	469a      	mov	sl, r3
 800fb30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb34:	b10a      	cbz	r2, 800fb3a <_vfiprintf_r+0xa2>
 800fb36:	2a25      	cmp	r2, #37	; 0x25
 800fb38:	d1f9      	bne.n	800fb2e <_vfiprintf_r+0x96>
 800fb3a:	ebba 0b04 	subs.w	fp, sl, r4
 800fb3e:	d00b      	beq.n	800fb58 <_vfiprintf_r+0xc0>
 800fb40:	465b      	mov	r3, fp
 800fb42:	4622      	mov	r2, r4
 800fb44:	4629      	mov	r1, r5
 800fb46:	4630      	mov	r0, r6
 800fb48:	f7ff ff94 	bl	800fa74 <__sfputs_r>
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	f000 80aa 	beq.w	800fca6 <_vfiprintf_r+0x20e>
 800fb52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb54:	445a      	add	r2, fp
 800fb56:	9209      	str	r2, [sp, #36]	; 0x24
 800fb58:	f89a 3000 	ldrb.w	r3, [sl]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	f000 80a2 	beq.w	800fca6 <_vfiprintf_r+0x20e>
 800fb62:	2300      	movs	r3, #0
 800fb64:	f04f 32ff 	mov.w	r2, #4294967295
 800fb68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb6c:	f10a 0a01 	add.w	sl, sl, #1
 800fb70:	9304      	str	r3, [sp, #16]
 800fb72:	9307      	str	r3, [sp, #28]
 800fb74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb78:	931a      	str	r3, [sp, #104]	; 0x68
 800fb7a:	4654      	mov	r4, sl
 800fb7c:	2205      	movs	r2, #5
 800fb7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb82:	4858      	ldr	r0, [pc, #352]	; (800fce4 <_vfiprintf_r+0x24c>)
 800fb84:	f7f0 fb34 	bl	80001f0 <memchr>
 800fb88:	9a04      	ldr	r2, [sp, #16]
 800fb8a:	b9d8      	cbnz	r0, 800fbc4 <_vfiprintf_r+0x12c>
 800fb8c:	06d1      	lsls	r1, r2, #27
 800fb8e:	bf44      	itt	mi
 800fb90:	2320      	movmi	r3, #32
 800fb92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb96:	0713      	lsls	r3, r2, #28
 800fb98:	bf44      	itt	mi
 800fb9a:	232b      	movmi	r3, #43	; 0x2b
 800fb9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fba0:	f89a 3000 	ldrb.w	r3, [sl]
 800fba4:	2b2a      	cmp	r3, #42	; 0x2a
 800fba6:	d015      	beq.n	800fbd4 <_vfiprintf_r+0x13c>
 800fba8:	9a07      	ldr	r2, [sp, #28]
 800fbaa:	4654      	mov	r4, sl
 800fbac:	2000      	movs	r0, #0
 800fbae:	f04f 0c0a 	mov.w	ip, #10
 800fbb2:	4621      	mov	r1, r4
 800fbb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbb8:	3b30      	subs	r3, #48	; 0x30
 800fbba:	2b09      	cmp	r3, #9
 800fbbc:	d94e      	bls.n	800fc5c <_vfiprintf_r+0x1c4>
 800fbbe:	b1b0      	cbz	r0, 800fbee <_vfiprintf_r+0x156>
 800fbc0:	9207      	str	r2, [sp, #28]
 800fbc2:	e014      	b.n	800fbee <_vfiprintf_r+0x156>
 800fbc4:	eba0 0308 	sub.w	r3, r0, r8
 800fbc8:	fa09 f303 	lsl.w	r3, r9, r3
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	9304      	str	r3, [sp, #16]
 800fbd0:	46a2      	mov	sl, r4
 800fbd2:	e7d2      	b.n	800fb7a <_vfiprintf_r+0xe2>
 800fbd4:	9b03      	ldr	r3, [sp, #12]
 800fbd6:	1d19      	adds	r1, r3, #4
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	9103      	str	r1, [sp, #12]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	bfbb      	ittet	lt
 800fbe0:	425b      	neglt	r3, r3
 800fbe2:	f042 0202 	orrlt.w	r2, r2, #2
 800fbe6:	9307      	strge	r3, [sp, #28]
 800fbe8:	9307      	strlt	r3, [sp, #28]
 800fbea:	bfb8      	it	lt
 800fbec:	9204      	strlt	r2, [sp, #16]
 800fbee:	7823      	ldrb	r3, [r4, #0]
 800fbf0:	2b2e      	cmp	r3, #46	; 0x2e
 800fbf2:	d10c      	bne.n	800fc0e <_vfiprintf_r+0x176>
 800fbf4:	7863      	ldrb	r3, [r4, #1]
 800fbf6:	2b2a      	cmp	r3, #42	; 0x2a
 800fbf8:	d135      	bne.n	800fc66 <_vfiprintf_r+0x1ce>
 800fbfa:	9b03      	ldr	r3, [sp, #12]
 800fbfc:	1d1a      	adds	r2, r3, #4
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	9203      	str	r2, [sp, #12]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	bfb8      	it	lt
 800fc06:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc0a:	3402      	adds	r4, #2
 800fc0c:	9305      	str	r3, [sp, #20]
 800fc0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fcf4 <_vfiprintf_r+0x25c>
 800fc12:	7821      	ldrb	r1, [r4, #0]
 800fc14:	2203      	movs	r2, #3
 800fc16:	4650      	mov	r0, sl
 800fc18:	f7f0 faea 	bl	80001f0 <memchr>
 800fc1c:	b140      	cbz	r0, 800fc30 <_vfiprintf_r+0x198>
 800fc1e:	2340      	movs	r3, #64	; 0x40
 800fc20:	eba0 000a 	sub.w	r0, r0, sl
 800fc24:	fa03 f000 	lsl.w	r0, r3, r0
 800fc28:	9b04      	ldr	r3, [sp, #16]
 800fc2a:	4303      	orrs	r3, r0
 800fc2c:	3401      	adds	r4, #1
 800fc2e:	9304      	str	r3, [sp, #16]
 800fc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc34:	482c      	ldr	r0, [pc, #176]	; (800fce8 <_vfiprintf_r+0x250>)
 800fc36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc3a:	2206      	movs	r2, #6
 800fc3c:	f7f0 fad8 	bl	80001f0 <memchr>
 800fc40:	2800      	cmp	r0, #0
 800fc42:	d03f      	beq.n	800fcc4 <_vfiprintf_r+0x22c>
 800fc44:	4b29      	ldr	r3, [pc, #164]	; (800fcec <_vfiprintf_r+0x254>)
 800fc46:	bb1b      	cbnz	r3, 800fc90 <_vfiprintf_r+0x1f8>
 800fc48:	9b03      	ldr	r3, [sp, #12]
 800fc4a:	3307      	adds	r3, #7
 800fc4c:	f023 0307 	bic.w	r3, r3, #7
 800fc50:	3308      	adds	r3, #8
 800fc52:	9303      	str	r3, [sp, #12]
 800fc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc56:	443b      	add	r3, r7
 800fc58:	9309      	str	r3, [sp, #36]	; 0x24
 800fc5a:	e767      	b.n	800fb2c <_vfiprintf_r+0x94>
 800fc5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc60:	460c      	mov	r4, r1
 800fc62:	2001      	movs	r0, #1
 800fc64:	e7a5      	b.n	800fbb2 <_vfiprintf_r+0x11a>
 800fc66:	2300      	movs	r3, #0
 800fc68:	3401      	adds	r4, #1
 800fc6a:	9305      	str	r3, [sp, #20]
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	f04f 0c0a 	mov.w	ip, #10
 800fc72:	4620      	mov	r0, r4
 800fc74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc78:	3a30      	subs	r2, #48	; 0x30
 800fc7a:	2a09      	cmp	r2, #9
 800fc7c:	d903      	bls.n	800fc86 <_vfiprintf_r+0x1ee>
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d0c5      	beq.n	800fc0e <_vfiprintf_r+0x176>
 800fc82:	9105      	str	r1, [sp, #20]
 800fc84:	e7c3      	b.n	800fc0e <_vfiprintf_r+0x176>
 800fc86:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc8a:	4604      	mov	r4, r0
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e7f0      	b.n	800fc72 <_vfiprintf_r+0x1da>
 800fc90:	ab03      	add	r3, sp, #12
 800fc92:	9300      	str	r3, [sp, #0]
 800fc94:	462a      	mov	r2, r5
 800fc96:	4b16      	ldr	r3, [pc, #88]	; (800fcf0 <_vfiprintf_r+0x258>)
 800fc98:	a904      	add	r1, sp, #16
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	f7fc f932 	bl	800bf04 <_printf_float>
 800fca0:	4607      	mov	r7, r0
 800fca2:	1c78      	adds	r0, r7, #1
 800fca4:	d1d6      	bne.n	800fc54 <_vfiprintf_r+0x1bc>
 800fca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fca8:	07d9      	lsls	r1, r3, #31
 800fcaa:	d405      	bmi.n	800fcb8 <_vfiprintf_r+0x220>
 800fcac:	89ab      	ldrh	r3, [r5, #12]
 800fcae:	059a      	lsls	r2, r3, #22
 800fcb0:	d402      	bmi.n	800fcb8 <_vfiprintf_r+0x220>
 800fcb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcb4:	f7ff fe86 	bl	800f9c4 <__retarget_lock_release_recursive>
 800fcb8:	89ab      	ldrh	r3, [r5, #12]
 800fcba:	065b      	lsls	r3, r3, #25
 800fcbc:	f53f af12 	bmi.w	800fae4 <_vfiprintf_r+0x4c>
 800fcc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcc2:	e711      	b.n	800fae8 <_vfiprintf_r+0x50>
 800fcc4:	ab03      	add	r3, sp, #12
 800fcc6:	9300      	str	r3, [sp, #0]
 800fcc8:	462a      	mov	r2, r5
 800fcca:	4b09      	ldr	r3, [pc, #36]	; (800fcf0 <_vfiprintf_r+0x258>)
 800fccc:	a904      	add	r1, sp, #16
 800fcce:	4630      	mov	r0, r6
 800fcd0:	f7fc fbbc 	bl	800c44c <_printf_i>
 800fcd4:	e7e4      	b.n	800fca0 <_vfiprintf_r+0x208>
 800fcd6:	bf00      	nop
 800fcd8:	08010c04 	.word	0x08010c04
 800fcdc:	08010c24 	.word	0x08010c24
 800fce0:	08010be4 	.word	0x08010be4
 800fce4:	08010b94 	.word	0x08010b94
 800fce8:	08010b9e 	.word	0x08010b9e
 800fcec:	0800bf05 	.word	0x0800bf05
 800fcf0:	0800fa75 	.word	0x0800fa75
 800fcf4:	08010b9a 	.word	0x08010b9a

0800fcf8 <__swbuf_r>:
 800fcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcfa:	460e      	mov	r6, r1
 800fcfc:	4614      	mov	r4, r2
 800fcfe:	4605      	mov	r5, r0
 800fd00:	b118      	cbz	r0, 800fd0a <__swbuf_r+0x12>
 800fd02:	6983      	ldr	r3, [r0, #24]
 800fd04:	b90b      	cbnz	r3, 800fd0a <__swbuf_r+0x12>
 800fd06:	f000 f9d9 	bl	80100bc <__sinit>
 800fd0a:	4b21      	ldr	r3, [pc, #132]	; (800fd90 <__swbuf_r+0x98>)
 800fd0c:	429c      	cmp	r4, r3
 800fd0e:	d12b      	bne.n	800fd68 <__swbuf_r+0x70>
 800fd10:	686c      	ldr	r4, [r5, #4]
 800fd12:	69a3      	ldr	r3, [r4, #24]
 800fd14:	60a3      	str	r3, [r4, #8]
 800fd16:	89a3      	ldrh	r3, [r4, #12]
 800fd18:	071a      	lsls	r2, r3, #28
 800fd1a:	d52f      	bpl.n	800fd7c <__swbuf_r+0x84>
 800fd1c:	6923      	ldr	r3, [r4, #16]
 800fd1e:	b36b      	cbz	r3, 800fd7c <__swbuf_r+0x84>
 800fd20:	6923      	ldr	r3, [r4, #16]
 800fd22:	6820      	ldr	r0, [r4, #0]
 800fd24:	1ac0      	subs	r0, r0, r3
 800fd26:	6963      	ldr	r3, [r4, #20]
 800fd28:	b2f6      	uxtb	r6, r6
 800fd2a:	4283      	cmp	r3, r0
 800fd2c:	4637      	mov	r7, r6
 800fd2e:	dc04      	bgt.n	800fd3a <__swbuf_r+0x42>
 800fd30:	4621      	mov	r1, r4
 800fd32:	4628      	mov	r0, r5
 800fd34:	f000 f92e 	bl	800ff94 <_fflush_r>
 800fd38:	bb30      	cbnz	r0, 800fd88 <__swbuf_r+0x90>
 800fd3a:	68a3      	ldr	r3, [r4, #8]
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	60a3      	str	r3, [r4, #8]
 800fd40:	6823      	ldr	r3, [r4, #0]
 800fd42:	1c5a      	adds	r2, r3, #1
 800fd44:	6022      	str	r2, [r4, #0]
 800fd46:	701e      	strb	r6, [r3, #0]
 800fd48:	6963      	ldr	r3, [r4, #20]
 800fd4a:	3001      	adds	r0, #1
 800fd4c:	4283      	cmp	r3, r0
 800fd4e:	d004      	beq.n	800fd5a <__swbuf_r+0x62>
 800fd50:	89a3      	ldrh	r3, [r4, #12]
 800fd52:	07db      	lsls	r3, r3, #31
 800fd54:	d506      	bpl.n	800fd64 <__swbuf_r+0x6c>
 800fd56:	2e0a      	cmp	r6, #10
 800fd58:	d104      	bne.n	800fd64 <__swbuf_r+0x6c>
 800fd5a:	4621      	mov	r1, r4
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	f000 f919 	bl	800ff94 <_fflush_r>
 800fd62:	b988      	cbnz	r0, 800fd88 <__swbuf_r+0x90>
 800fd64:	4638      	mov	r0, r7
 800fd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd68:	4b0a      	ldr	r3, [pc, #40]	; (800fd94 <__swbuf_r+0x9c>)
 800fd6a:	429c      	cmp	r4, r3
 800fd6c:	d101      	bne.n	800fd72 <__swbuf_r+0x7a>
 800fd6e:	68ac      	ldr	r4, [r5, #8]
 800fd70:	e7cf      	b.n	800fd12 <__swbuf_r+0x1a>
 800fd72:	4b09      	ldr	r3, [pc, #36]	; (800fd98 <__swbuf_r+0xa0>)
 800fd74:	429c      	cmp	r4, r3
 800fd76:	bf08      	it	eq
 800fd78:	68ec      	ldreq	r4, [r5, #12]
 800fd7a:	e7ca      	b.n	800fd12 <__swbuf_r+0x1a>
 800fd7c:	4621      	mov	r1, r4
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f000 f80c 	bl	800fd9c <__swsetup_r>
 800fd84:	2800      	cmp	r0, #0
 800fd86:	d0cb      	beq.n	800fd20 <__swbuf_r+0x28>
 800fd88:	f04f 37ff 	mov.w	r7, #4294967295
 800fd8c:	e7ea      	b.n	800fd64 <__swbuf_r+0x6c>
 800fd8e:	bf00      	nop
 800fd90:	08010c04 	.word	0x08010c04
 800fd94:	08010c24 	.word	0x08010c24
 800fd98:	08010be4 	.word	0x08010be4

0800fd9c <__swsetup_r>:
 800fd9c:	4b32      	ldr	r3, [pc, #200]	; (800fe68 <__swsetup_r+0xcc>)
 800fd9e:	b570      	push	{r4, r5, r6, lr}
 800fda0:	681d      	ldr	r5, [r3, #0]
 800fda2:	4606      	mov	r6, r0
 800fda4:	460c      	mov	r4, r1
 800fda6:	b125      	cbz	r5, 800fdb2 <__swsetup_r+0x16>
 800fda8:	69ab      	ldr	r3, [r5, #24]
 800fdaa:	b913      	cbnz	r3, 800fdb2 <__swsetup_r+0x16>
 800fdac:	4628      	mov	r0, r5
 800fdae:	f000 f985 	bl	80100bc <__sinit>
 800fdb2:	4b2e      	ldr	r3, [pc, #184]	; (800fe6c <__swsetup_r+0xd0>)
 800fdb4:	429c      	cmp	r4, r3
 800fdb6:	d10f      	bne.n	800fdd8 <__swsetup_r+0x3c>
 800fdb8:	686c      	ldr	r4, [r5, #4]
 800fdba:	89a3      	ldrh	r3, [r4, #12]
 800fdbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fdc0:	0719      	lsls	r1, r3, #28
 800fdc2:	d42c      	bmi.n	800fe1e <__swsetup_r+0x82>
 800fdc4:	06dd      	lsls	r5, r3, #27
 800fdc6:	d411      	bmi.n	800fdec <__swsetup_r+0x50>
 800fdc8:	2309      	movs	r3, #9
 800fdca:	6033      	str	r3, [r6, #0]
 800fdcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fdd0:	81a3      	strh	r3, [r4, #12]
 800fdd2:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd6:	e03e      	b.n	800fe56 <__swsetup_r+0xba>
 800fdd8:	4b25      	ldr	r3, [pc, #148]	; (800fe70 <__swsetup_r+0xd4>)
 800fdda:	429c      	cmp	r4, r3
 800fddc:	d101      	bne.n	800fde2 <__swsetup_r+0x46>
 800fdde:	68ac      	ldr	r4, [r5, #8]
 800fde0:	e7eb      	b.n	800fdba <__swsetup_r+0x1e>
 800fde2:	4b24      	ldr	r3, [pc, #144]	; (800fe74 <__swsetup_r+0xd8>)
 800fde4:	429c      	cmp	r4, r3
 800fde6:	bf08      	it	eq
 800fde8:	68ec      	ldreq	r4, [r5, #12]
 800fdea:	e7e6      	b.n	800fdba <__swsetup_r+0x1e>
 800fdec:	0758      	lsls	r0, r3, #29
 800fdee:	d512      	bpl.n	800fe16 <__swsetup_r+0x7a>
 800fdf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdf2:	b141      	cbz	r1, 800fe06 <__swsetup_r+0x6a>
 800fdf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdf8:	4299      	cmp	r1, r3
 800fdfa:	d002      	beq.n	800fe02 <__swsetup_r+0x66>
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	f7fb ff37 	bl	800bc70 <_free_r>
 800fe02:	2300      	movs	r3, #0
 800fe04:	6363      	str	r3, [r4, #52]	; 0x34
 800fe06:	89a3      	ldrh	r3, [r4, #12]
 800fe08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fe0c:	81a3      	strh	r3, [r4, #12]
 800fe0e:	2300      	movs	r3, #0
 800fe10:	6063      	str	r3, [r4, #4]
 800fe12:	6923      	ldr	r3, [r4, #16]
 800fe14:	6023      	str	r3, [r4, #0]
 800fe16:	89a3      	ldrh	r3, [r4, #12]
 800fe18:	f043 0308 	orr.w	r3, r3, #8
 800fe1c:	81a3      	strh	r3, [r4, #12]
 800fe1e:	6923      	ldr	r3, [r4, #16]
 800fe20:	b94b      	cbnz	r3, 800fe36 <__swsetup_r+0x9a>
 800fe22:	89a3      	ldrh	r3, [r4, #12]
 800fe24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fe28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe2c:	d003      	beq.n	800fe36 <__swsetup_r+0x9a>
 800fe2e:	4621      	mov	r1, r4
 800fe30:	4630      	mov	r0, r6
 800fe32:	f000 fa05 	bl	8010240 <__smakebuf_r>
 800fe36:	89a0      	ldrh	r0, [r4, #12]
 800fe38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe3c:	f010 0301 	ands.w	r3, r0, #1
 800fe40:	d00a      	beq.n	800fe58 <__swsetup_r+0xbc>
 800fe42:	2300      	movs	r3, #0
 800fe44:	60a3      	str	r3, [r4, #8]
 800fe46:	6963      	ldr	r3, [r4, #20]
 800fe48:	425b      	negs	r3, r3
 800fe4a:	61a3      	str	r3, [r4, #24]
 800fe4c:	6923      	ldr	r3, [r4, #16]
 800fe4e:	b943      	cbnz	r3, 800fe62 <__swsetup_r+0xc6>
 800fe50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fe54:	d1ba      	bne.n	800fdcc <__swsetup_r+0x30>
 800fe56:	bd70      	pop	{r4, r5, r6, pc}
 800fe58:	0781      	lsls	r1, r0, #30
 800fe5a:	bf58      	it	pl
 800fe5c:	6963      	ldrpl	r3, [r4, #20]
 800fe5e:	60a3      	str	r3, [r4, #8]
 800fe60:	e7f4      	b.n	800fe4c <__swsetup_r+0xb0>
 800fe62:	2000      	movs	r0, #0
 800fe64:	e7f7      	b.n	800fe56 <__swsetup_r+0xba>
 800fe66:	bf00      	nop
 800fe68:	2000002c 	.word	0x2000002c
 800fe6c:	08010c04 	.word	0x08010c04
 800fe70:	08010c24 	.word	0x08010c24
 800fe74:	08010be4 	.word	0x08010be4

0800fe78 <abort>:
 800fe78:	b508      	push	{r3, lr}
 800fe7a:	2006      	movs	r0, #6
 800fe7c:	f000 fa50 	bl	8010320 <raise>
 800fe80:	2001      	movs	r0, #1
 800fe82:	f7f1 fd17 	bl	80018b4 <_exit>
	...

0800fe88 <__sflush_r>:
 800fe88:	898a      	ldrh	r2, [r1, #12]
 800fe8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8e:	4605      	mov	r5, r0
 800fe90:	0710      	lsls	r0, r2, #28
 800fe92:	460c      	mov	r4, r1
 800fe94:	d458      	bmi.n	800ff48 <__sflush_r+0xc0>
 800fe96:	684b      	ldr	r3, [r1, #4]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	dc05      	bgt.n	800fea8 <__sflush_r+0x20>
 800fe9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	dc02      	bgt.n	800fea8 <__sflush_r+0x20>
 800fea2:	2000      	movs	r0, #0
 800fea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800feaa:	2e00      	cmp	r6, #0
 800feac:	d0f9      	beq.n	800fea2 <__sflush_r+0x1a>
 800feae:	2300      	movs	r3, #0
 800feb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800feb4:	682f      	ldr	r7, [r5, #0]
 800feb6:	602b      	str	r3, [r5, #0]
 800feb8:	d032      	beq.n	800ff20 <__sflush_r+0x98>
 800feba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800febc:	89a3      	ldrh	r3, [r4, #12]
 800febe:	075a      	lsls	r2, r3, #29
 800fec0:	d505      	bpl.n	800fece <__sflush_r+0x46>
 800fec2:	6863      	ldr	r3, [r4, #4]
 800fec4:	1ac0      	subs	r0, r0, r3
 800fec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fec8:	b10b      	cbz	r3, 800fece <__sflush_r+0x46>
 800feca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fecc:	1ac0      	subs	r0, r0, r3
 800fece:	2300      	movs	r3, #0
 800fed0:	4602      	mov	r2, r0
 800fed2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fed4:	6a21      	ldr	r1, [r4, #32]
 800fed6:	4628      	mov	r0, r5
 800fed8:	47b0      	blx	r6
 800feda:	1c43      	adds	r3, r0, #1
 800fedc:	89a3      	ldrh	r3, [r4, #12]
 800fede:	d106      	bne.n	800feee <__sflush_r+0x66>
 800fee0:	6829      	ldr	r1, [r5, #0]
 800fee2:	291d      	cmp	r1, #29
 800fee4:	d82c      	bhi.n	800ff40 <__sflush_r+0xb8>
 800fee6:	4a2a      	ldr	r2, [pc, #168]	; (800ff90 <__sflush_r+0x108>)
 800fee8:	40ca      	lsrs	r2, r1
 800feea:	07d6      	lsls	r6, r2, #31
 800feec:	d528      	bpl.n	800ff40 <__sflush_r+0xb8>
 800feee:	2200      	movs	r2, #0
 800fef0:	6062      	str	r2, [r4, #4]
 800fef2:	04d9      	lsls	r1, r3, #19
 800fef4:	6922      	ldr	r2, [r4, #16]
 800fef6:	6022      	str	r2, [r4, #0]
 800fef8:	d504      	bpl.n	800ff04 <__sflush_r+0x7c>
 800fefa:	1c42      	adds	r2, r0, #1
 800fefc:	d101      	bne.n	800ff02 <__sflush_r+0x7a>
 800fefe:	682b      	ldr	r3, [r5, #0]
 800ff00:	b903      	cbnz	r3, 800ff04 <__sflush_r+0x7c>
 800ff02:	6560      	str	r0, [r4, #84]	; 0x54
 800ff04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff06:	602f      	str	r7, [r5, #0]
 800ff08:	2900      	cmp	r1, #0
 800ff0a:	d0ca      	beq.n	800fea2 <__sflush_r+0x1a>
 800ff0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff10:	4299      	cmp	r1, r3
 800ff12:	d002      	beq.n	800ff1a <__sflush_r+0x92>
 800ff14:	4628      	mov	r0, r5
 800ff16:	f7fb feab 	bl	800bc70 <_free_r>
 800ff1a:	2000      	movs	r0, #0
 800ff1c:	6360      	str	r0, [r4, #52]	; 0x34
 800ff1e:	e7c1      	b.n	800fea4 <__sflush_r+0x1c>
 800ff20:	6a21      	ldr	r1, [r4, #32]
 800ff22:	2301      	movs	r3, #1
 800ff24:	4628      	mov	r0, r5
 800ff26:	47b0      	blx	r6
 800ff28:	1c41      	adds	r1, r0, #1
 800ff2a:	d1c7      	bne.n	800febc <__sflush_r+0x34>
 800ff2c:	682b      	ldr	r3, [r5, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d0c4      	beq.n	800febc <__sflush_r+0x34>
 800ff32:	2b1d      	cmp	r3, #29
 800ff34:	d001      	beq.n	800ff3a <__sflush_r+0xb2>
 800ff36:	2b16      	cmp	r3, #22
 800ff38:	d101      	bne.n	800ff3e <__sflush_r+0xb6>
 800ff3a:	602f      	str	r7, [r5, #0]
 800ff3c:	e7b1      	b.n	800fea2 <__sflush_r+0x1a>
 800ff3e:	89a3      	ldrh	r3, [r4, #12]
 800ff40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff44:	81a3      	strh	r3, [r4, #12]
 800ff46:	e7ad      	b.n	800fea4 <__sflush_r+0x1c>
 800ff48:	690f      	ldr	r7, [r1, #16]
 800ff4a:	2f00      	cmp	r7, #0
 800ff4c:	d0a9      	beq.n	800fea2 <__sflush_r+0x1a>
 800ff4e:	0793      	lsls	r3, r2, #30
 800ff50:	680e      	ldr	r6, [r1, #0]
 800ff52:	bf08      	it	eq
 800ff54:	694b      	ldreq	r3, [r1, #20]
 800ff56:	600f      	str	r7, [r1, #0]
 800ff58:	bf18      	it	ne
 800ff5a:	2300      	movne	r3, #0
 800ff5c:	eba6 0807 	sub.w	r8, r6, r7
 800ff60:	608b      	str	r3, [r1, #8]
 800ff62:	f1b8 0f00 	cmp.w	r8, #0
 800ff66:	dd9c      	ble.n	800fea2 <__sflush_r+0x1a>
 800ff68:	6a21      	ldr	r1, [r4, #32]
 800ff6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff6c:	4643      	mov	r3, r8
 800ff6e:	463a      	mov	r2, r7
 800ff70:	4628      	mov	r0, r5
 800ff72:	47b0      	blx	r6
 800ff74:	2800      	cmp	r0, #0
 800ff76:	dc06      	bgt.n	800ff86 <__sflush_r+0xfe>
 800ff78:	89a3      	ldrh	r3, [r4, #12]
 800ff7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff7e:	81a3      	strh	r3, [r4, #12]
 800ff80:	f04f 30ff 	mov.w	r0, #4294967295
 800ff84:	e78e      	b.n	800fea4 <__sflush_r+0x1c>
 800ff86:	4407      	add	r7, r0
 800ff88:	eba8 0800 	sub.w	r8, r8, r0
 800ff8c:	e7e9      	b.n	800ff62 <__sflush_r+0xda>
 800ff8e:	bf00      	nop
 800ff90:	20400001 	.word	0x20400001

0800ff94 <_fflush_r>:
 800ff94:	b538      	push	{r3, r4, r5, lr}
 800ff96:	690b      	ldr	r3, [r1, #16]
 800ff98:	4605      	mov	r5, r0
 800ff9a:	460c      	mov	r4, r1
 800ff9c:	b913      	cbnz	r3, 800ffa4 <_fflush_r+0x10>
 800ff9e:	2500      	movs	r5, #0
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	bd38      	pop	{r3, r4, r5, pc}
 800ffa4:	b118      	cbz	r0, 800ffae <_fflush_r+0x1a>
 800ffa6:	6983      	ldr	r3, [r0, #24]
 800ffa8:	b90b      	cbnz	r3, 800ffae <_fflush_r+0x1a>
 800ffaa:	f000 f887 	bl	80100bc <__sinit>
 800ffae:	4b14      	ldr	r3, [pc, #80]	; (8010000 <_fflush_r+0x6c>)
 800ffb0:	429c      	cmp	r4, r3
 800ffb2:	d11b      	bne.n	800ffec <_fflush_r+0x58>
 800ffb4:	686c      	ldr	r4, [r5, #4]
 800ffb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d0ef      	beq.n	800ff9e <_fflush_r+0xa>
 800ffbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ffc0:	07d0      	lsls	r0, r2, #31
 800ffc2:	d404      	bmi.n	800ffce <_fflush_r+0x3a>
 800ffc4:	0599      	lsls	r1, r3, #22
 800ffc6:	d402      	bmi.n	800ffce <_fflush_r+0x3a>
 800ffc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffca:	f7ff fcfa 	bl	800f9c2 <__retarget_lock_acquire_recursive>
 800ffce:	4628      	mov	r0, r5
 800ffd0:	4621      	mov	r1, r4
 800ffd2:	f7ff ff59 	bl	800fe88 <__sflush_r>
 800ffd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffd8:	07da      	lsls	r2, r3, #31
 800ffda:	4605      	mov	r5, r0
 800ffdc:	d4e0      	bmi.n	800ffa0 <_fflush_r+0xc>
 800ffde:	89a3      	ldrh	r3, [r4, #12]
 800ffe0:	059b      	lsls	r3, r3, #22
 800ffe2:	d4dd      	bmi.n	800ffa0 <_fflush_r+0xc>
 800ffe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffe6:	f7ff fced 	bl	800f9c4 <__retarget_lock_release_recursive>
 800ffea:	e7d9      	b.n	800ffa0 <_fflush_r+0xc>
 800ffec:	4b05      	ldr	r3, [pc, #20]	; (8010004 <_fflush_r+0x70>)
 800ffee:	429c      	cmp	r4, r3
 800fff0:	d101      	bne.n	800fff6 <_fflush_r+0x62>
 800fff2:	68ac      	ldr	r4, [r5, #8]
 800fff4:	e7df      	b.n	800ffb6 <_fflush_r+0x22>
 800fff6:	4b04      	ldr	r3, [pc, #16]	; (8010008 <_fflush_r+0x74>)
 800fff8:	429c      	cmp	r4, r3
 800fffa:	bf08      	it	eq
 800fffc:	68ec      	ldreq	r4, [r5, #12]
 800fffe:	e7da      	b.n	800ffb6 <_fflush_r+0x22>
 8010000:	08010c04 	.word	0x08010c04
 8010004:	08010c24 	.word	0x08010c24
 8010008:	08010be4 	.word	0x08010be4

0801000c <std>:
 801000c:	2300      	movs	r3, #0
 801000e:	b510      	push	{r4, lr}
 8010010:	4604      	mov	r4, r0
 8010012:	e9c0 3300 	strd	r3, r3, [r0]
 8010016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801001a:	6083      	str	r3, [r0, #8]
 801001c:	8181      	strh	r1, [r0, #12]
 801001e:	6643      	str	r3, [r0, #100]	; 0x64
 8010020:	81c2      	strh	r2, [r0, #14]
 8010022:	6183      	str	r3, [r0, #24]
 8010024:	4619      	mov	r1, r3
 8010026:	2208      	movs	r2, #8
 8010028:	305c      	adds	r0, #92	; 0x5c
 801002a:	f7fb fe19 	bl	800bc60 <memset>
 801002e:	4b05      	ldr	r3, [pc, #20]	; (8010044 <std+0x38>)
 8010030:	6263      	str	r3, [r4, #36]	; 0x24
 8010032:	4b05      	ldr	r3, [pc, #20]	; (8010048 <std+0x3c>)
 8010034:	62a3      	str	r3, [r4, #40]	; 0x28
 8010036:	4b05      	ldr	r3, [pc, #20]	; (801004c <std+0x40>)
 8010038:	62e3      	str	r3, [r4, #44]	; 0x2c
 801003a:	4b05      	ldr	r3, [pc, #20]	; (8010050 <std+0x44>)
 801003c:	6224      	str	r4, [r4, #32]
 801003e:	6323      	str	r3, [r4, #48]	; 0x30
 8010040:	bd10      	pop	{r4, pc}
 8010042:	bf00      	nop
 8010044:	08010359 	.word	0x08010359
 8010048:	0801037b 	.word	0x0801037b
 801004c:	080103b3 	.word	0x080103b3
 8010050:	080103d7 	.word	0x080103d7

08010054 <_cleanup_r>:
 8010054:	4901      	ldr	r1, [pc, #4]	; (801005c <_cleanup_r+0x8>)
 8010056:	f000 b8af 	b.w	80101b8 <_fwalk_reent>
 801005a:	bf00      	nop
 801005c:	0800ff95 	.word	0x0800ff95

08010060 <__sfmoreglue>:
 8010060:	b570      	push	{r4, r5, r6, lr}
 8010062:	1e4a      	subs	r2, r1, #1
 8010064:	2568      	movs	r5, #104	; 0x68
 8010066:	4355      	muls	r5, r2
 8010068:	460e      	mov	r6, r1
 801006a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801006e:	f7fb fe4f 	bl	800bd10 <_malloc_r>
 8010072:	4604      	mov	r4, r0
 8010074:	b140      	cbz	r0, 8010088 <__sfmoreglue+0x28>
 8010076:	2100      	movs	r1, #0
 8010078:	e9c0 1600 	strd	r1, r6, [r0]
 801007c:	300c      	adds	r0, #12
 801007e:	60a0      	str	r0, [r4, #8]
 8010080:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010084:	f7fb fdec 	bl	800bc60 <memset>
 8010088:	4620      	mov	r0, r4
 801008a:	bd70      	pop	{r4, r5, r6, pc}

0801008c <__sfp_lock_acquire>:
 801008c:	4801      	ldr	r0, [pc, #4]	; (8010094 <__sfp_lock_acquire+0x8>)
 801008e:	f7ff bc98 	b.w	800f9c2 <__retarget_lock_acquire_recursive>
 8010092:	bf00      	nop
 8010094:	20000b10 	.word	0x20000b10

08010098 <__sfp_lock_release>:
 8010098:	4801      	ldr	r0, [pc, #4]	; (80100a0 <__sfp_lock_release+0x8>)
 801009a:	f7ff bc93 	b.w	800f9c4 <__retarget_lock_release_recursive>
 801009e:	bf00      	nop
 80100a0:	20000b10 	.word	0x20000b10

080100a4 <__sinit_lock_acquire>:
 80100a4:	4801      	ldr	r0, [pc, #4]	; (80100ac <__sinit_lock_acquire+0x8>)
 80100a6:	f7ff bc8c 	b.w	800f9c2 <__retarget_lock_acquire_recursive>
 80100aa:	bf00      	nop
 80100ac:	20000b0b 	.word	0x20000b0b

080100b0 <__sinit_lock_release>:
 80100b0:	4801      	ldr	r0, [pc, #4]	; (80100b8 <__sinit_lock_release+0x8>)
 80100b2:	f7ff bc87 	b.w	800f9c4 <__retarget_lock_release_recursive>
 80100b6:	bf00      	nop
 80100b8:	20000b0b 	.word	0x20000b0b

080100bc <__sinit>:
 80100bc:	b510      	push	{r4, lr}
 80100be:	4604      	mov	r4, r0
 80100c0:	f7ff fff0 	bl	80100a4 <__sinit_lock_acquire>
 80100c4:	69a3      	ldr	r3, [r4, #24]
 80100c6:	b11b      	cbz	r3, 80100d0 <__sinit+0x14>
 80100c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100cc:	f7ff bff0 	b.w	80100b0 <__sinit_lock_release>
 80100d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80100d4:	6523      	str	r3, [r4, #80]	; 0x50
 80100d6:	4b13      	ldr	r3, [pc, #76]	; (8010124 <__sinit+0x68>)
 80100d8:	4a13      	ldr	r2, [pc, #76]	; (8010128 <__sinit+0x6c>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80100de:	42a3      	cmp	r3, r4
 80100e0:	bf04      	itt	eq
 80100e2:	2301      	moveq	r3, #1
 80100e4:	61a3      	streq	r3, [r4, #24]
 80100e6:	4620      	mov	r0, r4
 80100e8:	f000 f820 	bl	801012c <__sfp>
 80100ec:	6060      	str	r0, [r4, #4]
 80100ee:	4620      	mov	r0, r4
 80100f0:	f000 f81c 	bl	801012c <__sfp>
 80100f4:	60a0      	str	r0, [r4, #8]
 80100f6:	4620      	mov	r0, r4
 80100f8:	f000 f818 	bl	801012c <__sfp>
 80100fc:	2200      	movs	r2, #0
 80100fe:	60e0      	str	r0, [r4, #12]
 8010100:	2104      	movs	r1, #4
 8010102:	6860      	ldr	r0, [r4, #4]
 8010104:	f7ff ff82 	bl	801000c <std>
 8010108:	68a0      	ldr	r0, [r4, #8]
 801010a:	2201      	movs	r2, #1
 801010c:	2109      	movs	r1, #9
 801010e:	f7ff ff7d 	bl	801000c <std>
 8010112:	68e0      	ldr	r0, [r4, #12]
 8010114:	2202      	movs	r2, #2
 8010116:	2112      	movs	r1, #18
 8010118:	f7ff ff78 	bl	801000c <std>
 801011c:	2301      	movs	r3, #1
 801011e:	61a3      	str	r3, [r4, #24]
 8010120:	e7d2      	b.n	80100c8 <__sinit+0xc>
 8010122:	bf00      	nop
 8010124:	0801078c 	.word	0x0801078c
 8010128:	08010055 	.word	0x08010055

0801012c <__sfp>:
 801012c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801012e:	4607      	mov	r7, r0
 8010130:	f7ff ffac 	bl	801008c <__sfp_lock_acquire>
 8010134:	4b1e      	ldr	r3, [pc, #120]	; (80101b0 <__sfp+0x84>)
 8010136:	681e      	ldr	r6, [r3, #0]
 8010138:	69b3      	ldr	r3, [r6, #24]
 801013a:	b913      	cbnz	r3, 8010142 <__sfp+0x16>
 801013c:	4630      	mov	r0, r6
 801013e:	f7ff ffbd 	bl	80100bc <__sinit>
 8010142:	3648      	adds	r6, #72	; 0x48
 8010144:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010148:	3b01      	subs	r3, #1
 801014a:	d503      	bpl.n	8010154 <__sfp+0x28>
 801014c:	6833      	ldr	r3, [r6, #0]
 801014e:	b30b      	cbz	r3, 8010194 <__sfp+0x68>
 8010150:	6836      	ldr	r6, [r6, #0]
 8010152:	e7f7      	b.n	8010144 <__sfp+0x18>
 8010154:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010158:	b9d5      	cbnz	r5, 8010190 <__sfp+0x64>
 801015a:	4b16      	ldr	r3, [pc, #88]	; (80101b4 <__sfp+0x88>)
 801015c:	60e3      	str	r3, [r4, #12]
 801015e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010162:	6665      	str	r5, [r4, #100]	; 0x64
 8010164:	f7ff fc2c 	bl	800f9c0 <__retarget_lock_init_recursive>
 8010168:	f7ff ff96 	bl	8010098 <__sfp_lock_release>
 801016c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010170:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010174:	6025      	str	r5, [r4, #0]
 8010176:	61a5      	str	r5, [r4, #24]
 8010178:	2208      	movs	r2, #8
 801017a:	4629      	mov	r1, r5
 801017c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010180:	f7fb fd6e 	bl	800bc60 <memset>
 8010184:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010188:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801018c:	4620      	mov	r0, r4
 801018e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010190:	3468      	adds	r4, #104	; 0x68
 8010192:	e7d9      	b.n	8010148 <__sfp+0x1c>
 8010194:	2104      	movs	r1, #4
 8010196:	4638      	mov	r0, r7
 8010198:	f7ff ff62 	bl	8010060 <__sfmoreglue>
 801019c:	4604      	mov	r4, r0
 801019e:	6030      	str	r0, [r6, #0]
 80101a0:	2800      	cmp	r0, #0
 80101a2:	d1d5      	bne.n	8010150 <__sfp+0x24>
 80101a4:	f7ff ff78 	bl	8010098 <__sfp_lock_release>
 80101a8:	230c      	movs	r3, #12
 80101aa:	603b      	str	r3, [r7, #0]
 80101ac:	e7ee      	b.n	801018c <__sfp+0x60>
 80101ae:	bf00      	nop
 80101b0:	0801078c 	.word	0x0801078c
 80101b4:	ffff0001 	.word	0xffff0001

080101b8 <_fwalk_reent>:
 80101b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101bc:	4606      	mov	r6, r0
 80101be:	4688      	mov	r8, r1
 80101c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80101c4:	2700      	movs	r7, #0
 80101c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101ca:	f1b9 0901 	subs.w	r9, r9, #1
 80101ce:	d505      	bpl.n	80101dc <_fwalk_reent+0x24>
 80101d0:	6824      	ldr	r4, [r4, #0]
 80101d2:	2c00      	cmp	r4, #0
 80101d4:	d1f7      	bne.n	80101c6 <_fwalk_reent+0xe>
 80101d6:	4638      	mov	r0, r7
 80101d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101dc:	89ab      	ldrh	r3, [r5, #12]
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d907      	bls.n	80101f2 <_fwalk_reent+0x3a>
 80101e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101e6:	3301      	adds	r3, #1
 80101e8:	d003      	beq.n	80101f2 <_fwalk_reent+0x3a>
 80101ea:	4629      	mov	r1, r5
 80101ec:	4630      	mov	r0, r6
 80101ee:	47c0      	blx	r8
 80101f0:	4307      	orrs	r7, r0
 80101f2:	3568      	adds	r5, #104	; 0x68
 80101f4:	e7e9      	b.n	80101ca <_fwalk_reent+0x12>

080101f6 <__swhatbuf_r>:
 80101f6:	b570      	push	{r4, r5, r6, lr}
 80101f8:	460e      	mov	r6, r1
 80101fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101fe:	2900      	cmp	r1, #0
 8010200:	b096      	sub	sp, #88	; 0x58
 8010202:	4614      	mov	r4, r2
 8010204:	461d      	mov	r5, r3
 8010206:	da07      	bge.n	8010218 <__swhatbuf_r+0x22>
 8010208:	2300      	movs	r3, #0
 801020a:	602b      	str	r3, [r5, #0]
 801020c:	89b3      	ldrh	r3, [r6, #12]
 801020e:	061a      	lsls	r2, r3, #24
 8010210:	d410      	bmi.n	8010234 <__swhatbuf_r+0x3e>
 8010212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010216:	e00e      	b.n	8010236 <__swhatbuf_r+0x40>
 8010218:	466a      	mov	r2, sp
 801021a:	f000 f903 	bl	8010424 <_fstat_r>
 801021e:	2800      	cmp	r0, #0
 8010220:	dbf2      	blt.n	8010208 <__swhatbuf_r+0x12>
 8010222:	9a01      	ldr	r2, [sp, #4]
 8010224:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010228:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801022c:	425a      	negs	r2, r3
 801022e:	415a      	adcs	r2, r3
 8010230:	602a      	str	r2, [r5, #0]
 8010232:	e7ee      	b.n	8010212 <__swhatbuf_r+0x1c>
 8010234:	2340      	movs	r3, #64	; 0x40
 8010236:	2000      	movs	r0, #0
 8010238:	6023      	str	r3, [r4, #0]
 801023a:	b016      	add	sp, #88	; 0x58
 801023c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010240 <__smakebuf_r>:
 8010240:	898b      	ldrh	r3, [r1, #12]
 8010242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010244:	079d      	lsls	r5, r3, #30
 8010246:	4606      	mov	r6, r0
 8010248:	460c      	mov	r4, r1
 801024a:	d507      	bpl.n	801025c <__smakebuf_r+0x1c>
 801024c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010250:	6023      	str	r3, [r4, #0]
 8010252:	6123      	str	r3, [r4, #16]
 8010254:	2301      	movs	r3, #1
 8010256:	6163      	str	r3, [r4, #20]
 8010258:	b002      	add	sp, #8
 801025a:	bd70      	pop	{r4, r5, r6, pc}
 801025c:	ab01      	add	r3, sp, #4
 801025e:	466a      	mov	r2, sp
 8010260:	f7ff ffc9 	bl	80101f6 <__swhatbuf_r>
 8010264:	9900      	ldr	r1, [sp, #0]
 8010266:	4605      	mov	r5, r0
 8010268:	4630      	mov	r0, r6
 801026a:	f7fb fd51 	bl	800bd10 <_malloc_r>
 801026e:	b948      	cbnz	r0, 8010284 <__smakebuf_r+0x44>
 8010270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010274:	059a      	lsls	r2, r3, #22
 8010276:	d4ef      	bmi.n	8010258 <__smakebuf_r+0x18>
 8010278:	f023 0303 	bic.w	r3, r3, #3
 801027c:	f043 0302 	orr.w	r3, r3, #2
 8010280:	81a3      	strh	r3, [r4, #12]
 8010282:	e7e3      	b.n	801024c <__smakebuf_r+0xc>
 8010284:	4b0d      	ldr	r3, [pc, #52]	; (80102bc <__smakebuf_r+0x7c>)
 8010286:	62b3      	str	r3, [r6, #40]	; 0x28
 8010288:	89a3      	ldrh	r3, [r4, #12]
 801028a:	6020      	str	r0, [r4, #0]
 801028c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010290:	81a3      	strh	r3, [r4, #12]
 8010292:	9b00      	ldr	r3, [sp, #0]
 8010294:	6163      	str	r3, [r4, #20]
 8010296:	9b01      	ldr	r3, [sp, #4]
 8010298:	6120      	str	r0, [r4, #16]
 801029a:	b15b      	cbz	r3, 80102b4 <__smakebuf_r+0x74>
 801029c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102a0:	4630      	mov	r0, r6
 80102a2:	f000 f8d1 	bl	8010448 <_isatty_r>
 80102a6:	b128      	cbz	r0, 80102b4 <__smakebuf_r+0x74>
 80102a8:	89a3      	ldrh	r3, [r4, #12]
 80102aa:	f023 0303 	bic.w	r3, r3, #3
 80102ae:	f043 0301 	orr.w	r3, r3, #1
 80102b2:	81a3      	strh	r3, [r4, #12]
 80102b4:	89a0      	ldrh	r0, [r4, #12]
 80102b6:	4305      	orrs	r5, r0
 80102b8:	81a5      	strh	r5, [r4, #12]
 80102ba:	e7cd      	b.n	8010258 <__smakebuf_r+0x18>
 80102bc:	08010055 	.word	0x08010055

080102c0 <_malloc_usable_size_r>:
 80102c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102c4:	1f18      	subs	r0, r3, #4
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	bfbc      	itt	lt
 80102ca:	580b      	ldrlt	r3, [r1, r0]
 80102cc:	18c0      	addlt	r0, r0, r3
 80102ce:	4770      	bx	lr

080102d0 <_raise_r>:
 80102d0:	291f      	cmp	r1, #31
 80102d2:	b538      	push	{r3, r4, r5, lr}
 80102d4:	4604      	mov	r4, r0
 80102d6:	460d      	mov	r5, r1
 80102d8:	d904      	bls.n	80102e4 <_raise_r+0x14>
 80102da:	2316      	movs	r3, #22
 80102dc:	6003      	str	r3, [r0, #0]
 80102de:	f04f 30ff 	mov.w	r0, #4294967295
 80102e2:	bd38      	pop	{r3, r4, r5, pc}
 80102e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80102e6:	b112      	cbz	r2, 80102ee <_raise_r+0x1e>
 80102e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80102ec:	b94b      	cbnz	r3, 8010302 <_raise_r+0x32>
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 f830 	bl	8010354 <_getpid_r>
 80102f4:	462a      	mov	r2, r5
 80102f6:	4601      	mov	r1, r0
 80102f8:	4620      	mov	r0, r4
 80102fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102fe:	f000 b817 	b.w	8010330 <_kill_r>
 8010302:	2b01      	cmp	r3, #1
 8010304:	d00a      	beq.n	801031c <_raise_r+0x4c>
 8010306:	1c59      	adds	r1, r3, #1
 8010308:	d103      	bne.n	8010312 <_raise_r+0x42>
 801030a:	2316      	movs	r3, #22
 801030c:	6003      	str	r3, [r0, #0]
 801030e:	2001      	movs	r0, #1
 8010310:	e7e7      	b.n	80102e2 <_raise_r+0x12>
 8010312:	2400      	movs	r4, #0
 8010314:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010318:	4628      	mov	r0, r5
 801031a:	4798      	blx	r3
 801031c:	2000      	movs	r0, #0
 801031e:	e7e0      	b.n	80102e2 <_raise_r+0x12>

08010320 <raise>:
 8010320:	4b02      	ldr	r3, [pc, #8]	; (801032c <raise+0xc>)
 8010322:	4601      	mov	r1, r0
 8010324:	6818      	ldr	r0, [r3, #0]
 8010326:	f7ff bfd3 	b.w	80102d0 <_raise_r>
 801032a:	bf00      	nop
 801032c:	2000002c 	.word	0x2000002c

08010330 <_kill_r>:
 8010330:	b538      	push	{r3, r4, r5, lr}
 8010332:	4d07      	ldr	r5, [pc, #28]	; (8010350 <_kill_r+0x20>)
 8010334:	2300      	movs	r3, #0
 8010336:	4604      	mov	r4, r0
 8010338:	4608      	mov	r0, r1
 801033a:	4611      	mov	r1, r2
 801033c:	602b      	str	r3, [r5, #0]
 801033e:	f7f1 faa9 	bl	8001894 <_kill>
 8010342:	1c43      	adds	r3, r0, #1
 8010344:	d102      	bne.n	801034c <_kill_r+0x1c>
 8010346:	682b      	ldr	r3, [r5, #0]
 8010348:	b103      	cbz	r3, 801034c <_kill_r+0x1c>
 801034a:	6023      	str	r3, [r4, #0]
 801034c:	bd38      	pop	{r3, r4, r5, pc}
 801034e:	bf00      	nop
 8010350:	20000b04 	.word	0x20000b04

08010354 <_getpid_r>:
 8010354:	f7f1 ba96 	b.w	8001884 <_getpid>

08010358 <__sread>:
 8010358:	b510      	push	{r4, lr}
 801035a:	460c      	mov	r4, r1
 801035c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010360:	f000 f894 	bl	801048c <_read_r>
 8010364:	2800      	cmp	r0, #0
 8010366:	bfab      	itete	ge
 8010368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801036a:	89a3      	ldrhlt	r3, [r4, #12]
 801036c:	181b      	addge	r3, r3, r0
 801036e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010372:	bfac      	ite	ge
 8010374:	6563      	strge	r3, [r4, #84]	; 0x54
 8010376:	81a3      	strhlt	r3, [r4, #12]
 8010378:	bd10      	pop	{r4, pc}

0801037a <__swrite>:
 801037a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801037e:	461f      	mov	r7, r3
 8010380:	898b      	ldrh	r3, [r1, #12]
 8010382:	05db      	lsls	r3, r3, #23
 8010384:	4605      	mov	r5, r0
 8010386:	460c      	mov	r4, r1
 8010388:	4616      	mov	r6, r2
 801038a:	d505      	bpl.n	8010398 <__swrite+0x1e>
 801038c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010390:	2302      	movs	r3, #2
 8010392:	2200      	movs	r2, #0
 8010394:	f000 f868 	bl	8010468 <_lseek_r>
 8010398:	89a3      	ldrh	r3, [r4, #12]
 801039a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801039e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103a2:	81a3      	strh	r3, [r4, #12]
 80103a4:	4632      	mov	r2, r6
 80103a6:	463b      	mov	r3, r7
 80103a8:	4628      	mov	r0, r5
 80103aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103ae:	f000 b817 	b.w	80103e0 <_write_r>

080103b2 <__sseek>:
 80103b2:	b510      	push	{r4, lr}
 80103b4:	460c      	mov	r4, r1
 80103b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103ba:	f000 f855 	bl	8010468 <_lseek_r>
 80103be:	1c43      	adds	r3, r0, #1
 80103c0:	89a3      	ldrh	r3, [r4, #12]
 80103c2:	bf15      	itete	ne
 80103c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80103c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103ce:	81a3      	strheq	r3, [r4, #12]
 80103d0:	bf18      	it	ne
 80103d2:	81a3      	strhne	r3, [r4, #12]
 80103d4:	bd10      	pop	{r4, pc}

080103d6 <__sclose>:
 80103d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103da:	f000 b813 	b.w	8010404 <_close_r>
	...

080103e0 <_write_r>:
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	4d07      	ldr	r5, [pc, #28]	; (8010400 <_write_r+0x20>)
 80103e4:	4604      	mov	r4, r0
 80103e6:	4608      	mov	r0, r1
 80103e8:	4611      	mov	r1, r2
 80103ea:	2200      	movs	r2, #0
 80103ec:	602a      	str	r2, [r5, #0]
 80103ee:	461a      	mov	r2, r3
 80103f0:	f7f1 fa87 	bl	8001902 <_write>
 80103f4:	1c43      	adds	r3, r0, #1
 80103f6:	d102      	bne.n	80103fe <_write_r+0x1e>
 80103f8:	682b      	ldr	r3, [r5, #0]
 80103fa:	b103      	cbz	r3, 80103fe <_write_r+0x1e>
 80103fc:	6023      	str	r3, [r4, #0]
 80103fe:	bd38      	pop	{r3, r4, r5, pc}
 8010400:	20000b04 	.word	0x20000b04

08010404 <_close_r>:
 8010404:	b538      	push	{r3, r4, r5, lr}
 8010406:	4d06      	ldr	r5, [pc, #24]	; (8010420 <_close_r+0x1c>)
 8010408:	2300      	movs	r3, #0
 801040a:	4604      	mov	r4, r0
 801040c:	4608      	mov	r0, r1
 801040e:	602b      	str	r3, [r5, #0]
 8010410:	f7f1 fa93 	bl	800193a <_close>
 8010414:	1c43      	adds	r3, r0, #1
 8010416:	d102      	bne.n	801041e <_close_r+0x1a>
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	b103      	cbz	r3, 801041e <_close_r+0x1a>
 801041c:	6023      	str	r3, [r4, #0]
 801041e:	bd38      	pop	{r3, r4, r5, pc}
 8010420:	20000b04 	.word	0x20000b04

08010424 <_fstat_r>:
 8010424:	b538      	push	{r3, r4, r5, lr}
 8010426:	4d07      	ldr	r5, [pc, #28]	; (8010444 <_fstat_r+0x20>)
 8010428:	2300      	movs	r3, #0
 801042a:	4604      	mov	r4, r0
 801042c:	4608      	mov	r0, r1
 801042e:	4611      	mov	r1, r2
 8010430:	602b      	str	r3, [r5, #0]
 8010432:	f7f1 fa8e 	bl	8001952 <_fstat>
 8010436:	1c43      	adds	r3, r0, #1
 8010438:	d102      	bne.n	8010440 <_fstat_r+0x1c>
 801043a:	682b      	ldr	r3, [r5, #0]
 801043c:	b103      	cbz	r3, 8010440 <_fstat_r+0x1c>
 801043e:	6023      	str	r3, [r4, #0]
 8010440:	bd38      	pop	{r3, r4, r5, pc}
 8010442:	bf00      	nop
 8010444:	20000b04 	.word	0x20000b04

08010448 <_isatty_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4d06      	ldr	r5, [pc, #24]	; (8010464 <_isatty_r+0x1c>)
 801044c:	2300      	movs	r3, #0
 801044e:	4604      	mov	r4, r0
 8010450:	4608      	mov	r0, r1
 8010452:	602b      	str	r3, [r5, #0]
 8010454:	f7f1 fa8d 	bl	8001972 <_isatty>
 8010458:	1c43      	adds	r3, r0, #1
 801045a:	d102      	bne.n	8010462 <_isatty_r+0x1a>
 801045c:	682b      	ldr	r3, [r5, #0]
 801045e:	b103      	cbz	r3, 8010462 <_isatty_r+0x1a>
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	bd38      	pop	{r3, r4, r5, pc}
 8010464:	20000b04 	.word	0x20000b04

08010468 <_lseek_r>:
 8010468:	b538      	push	{r3, r4, r5, lr}
 801046a:	4d07      	ldr	r5, [pc, #28]	; (8010488 <_lseek_r+0x20>)
 801046c:	4604      	mov	r4, r0
 801046e:	4608      	mov	r0, r1
 8010470:	4611      	mov	r1, r2
 8010472:	2200      	movs	r2, #0
 8010474:	602a      	str	r2, [r5, #0]
 8010476:	461a      	mov	r2, r3
 8010478:	f7f1 fa86 	bl	8001988 <_lseek>
 801047c:	1c43      	adds	r3, r0, #1
 801047e:	d102      	bne.n	8010486 <_lseek_r+0x1e>
 8010480:	682b      	ldr	r3, [r5, #0]
 8010482:	b103      	cbz	r3, 8010486 <_lseek_r+0x1e>
 8010484:	6023      	str	r3, [r4, #0]
 8010486:	bd38      	pop	{r3, r4, r5, pc}
 8010488:	20000b04 	.word	0x20000b04

0801048c <_read_r>:
 801048c:	b538      	push	{r3, r4, r5, lr}
 801048e:	4d07      	ldr	r5, [pc, #28]	; (80104ac <_read_r+0x20>)
 8010490:	4604      	mov	r4, r0
 8010492:	4608      	mov	r0, r1
 8010494:	4611      	mov	r1, r2
 8010496:	2200      	movs	r2, #0
 8010498:	602a      	str	r2, [r5, #0]
 801049a:	461a      	mov	r2, r3
 801049c:	f7f1 fa14 	bl	80018c8 <_read>
 80104a0:	1c43      	adds	r3, r0, #1
 80104a2:	d102      	bne.n	80104aa <_read_r+0x1e>
 80104a4:	682b      	ldr	r3, [r5, #0]
 80104a6:	b103      	cbz	r3, 80104aa <_read_r+0x1e>
 80104a8:	6023      	str	r3, [r4, #0]
 80104aa:	bd38      	pop	{r3, r4, r5, pc}
 80104ac:	20000b04 	.word	0x20000b04

080104b0 <_init>:
 80104b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b2:	bf00      	nop
 80104b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104b6:	bc08      	pop	{r3}
 80104b8:	469e      	mov	lr, r3
 80104ba:	4770      	bx	lr

080104bc <_fini>:
 80104bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104be:	bf00      	nop
 80104c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c2:	bc08      	pop	{r3}
 80104c4:	469e      	mov	lr, r3
 80104c6:	4770      	bx	lr
